
MAP_F411_CV5_SPI_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a44  08000a44  00010a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a54  08000a54  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a54  08000a54  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a54  08000a54  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a54  08000a54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a58  08000a58  00010a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000a60  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000a60  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014de  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005d1  00000000  00000000  00021555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00021b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ad  00000000  00000000  00021c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000df8a  00000000  00000000  00021cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000179f  00000000  00000000  0002fc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00050567  00000000  00000000  000313fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000290  00000000  00000000  00081968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00081bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a2c 	.word	0x08000a2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000a2c 	.word	0x08000a2c

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <SystemInit+0x20>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001e2:	4a05      	ldr	r2, [pc, #20]	; (80001f8 <SystemInit+0x20>)
 80001e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b087      	sub	sp, #28
 8000200:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000202:	2300      	movs	r3, #0
 8000204:	613b      	str	r3, [r7, #16]
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]
 800020a:	2302      	movs	r3, #2
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
 8000212:	2302      	movs	r3, #2
 8000214:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000216:	4b34      	ldr	r3, [pc, #208]	; (80002e8 <SystemCoreClockUpdate+0xec>)
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	f003 030c 	and.w	r3, r3, #12
 800021e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	2b08      	cmp	r3, #8
 8000224:	d011      	beq.n	800024a <SystemCoreClockUpdate+0x4e>
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	2b08      	cmp	r3, #8
 800022a:	d844      	bhi.n	80002b6 <SystemCoreClockUpdate+0xba>
 800022c:	693b      	ldr	r3, [r7, #16]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d003      	beq.n	800023a <SystemCoreClockUpdate+0x3e>
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	2b04      	cmp	r3, #4
 8000236:	d004      	beq.n	8000242 <SystemCoreClockUpdate+0x46>
 8000238:	e03d      	b.n	80002b6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800023a:	4b2c      	ldr	r3, [pc, #176]	; (80002ec <SystemCoreClockUpdate+0xf0>)
 800023c:	4a2c      	ldr	r2, [pc, #176]	; (80002f0 <SystemCoreClockUpdate+0xf4>)
 800023e:	601a      	str	r2, [r3, #0]
      break;
 8000240:	e03d      	b.n	80002be <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000242:	4b2a      	ldr	r3, [pc, #168]	; (80002ec <SystemCoreClockUpdate+0xf0>)
 8000244:	4a2b      	ldr	r2, [pc, #172]	; (80002f4 <SystemCoreClockUpdate+0xf8>)
 8000246:	601a      	str	r2, [r3, #0]
      break;
 8000248:	e039      	b.n	80002be <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800024a:	4b27      	ldr	r3, [pc, #156]	; (80002e8 <SystemCoreClockUpdate+0xec>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	0d9b      	lsrs	r3, r3, #22
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000256:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <SystemCoreClockUpdate+0xec>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800025e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d00c      	beq.n	8000280 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000266:	4a23      	ldr	r2, [pc, #140]	; (80002f4 <SystemCoreClockUpdate+0xf8>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4a1e      	ldr	r2, [pc, #120]	; (80002e8 <SystemCoreClockUpdate+0xec>)
 8000270:	6852      	ldr	r2, [r2, #4]
 8000272:	0992      	lsrs	r2, r2, #6
 8000274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000278:	fb02 f303 	mul.w	r3, r2, r3
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	e00b      	b.n	8000298 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000280:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <SystemCoreClockUpdate+0xf4>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	fbb2 f3f3 	udiv	r3, r2, r3
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <SystemCoreClockUpdate+0xec>)
 800028a:	6852      	ldr	r2, [r2, #4]
 800028c:	0992      	lsrs	r2, r2, #6
 800028e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000292:	fb02 f303 	mul.w	r3, r2, r3
 8000296:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <SystemCoreClockUpdate+0xec>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	0c1b      	lsrs	r3, r3, #16
 800029e:	f003 0303 	and.w	r3, r3, #3
 80002a2:	3301      	adds	r3, #1
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002a8:	697a      	ldr	r2, [r7, #20]
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b0:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <SystemCoreClockUpdate+0xf0>)
 80002b2:	6013      	str	r3, [r2, #0]
      break;
 80002b4:	e003      	b.n	80002be <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <SystemCoreClockUpdate+0xf0>)
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <SystemCoreClockUpdate+0xf4>)
 80002ba:	601a      	str	r2, [r3, #0]
      break;
 80002bc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <SystemCoreClockUpdate+0xec>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	091b      	lsrs	r3, r3, #4
 80002c4:	f003 030f 	and.w	r3, r3, #15
 80002c8:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <SystemCoreClockUpdate+0xfc>)
 80002ca:	5cd3      	ldrb	r3, [r2, r3]
 80002cc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <SystemCoreClockUpdate+0xf0>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	fa22 f303 	lsr.w	r3, r2, r3
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <SystemCoreClockUpdate+0xf0>)
 80002da:	6013      	str	r3, [r2, #0]
}
 80002dc:	bf00      	nop
 80002de:	371c      	adds	r7, #28
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40023800 	.word	0x40023800
 80002ec:	20000000 	.word	0x20000000
 80002f0:	00f42400 	.word	0x00f42400
 80002f4:	017d7840 	.word	0x017d7840
 80002f8:	08000a44 	.word	0x08000a44

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3b01      	subs	r3, #1
 800035c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000360:	d301      	bcc.n	8000366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000362:	2301      	movs	r3, #1
 8000364:	e00f      	b.n	8000386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <SysTick_Config+0x40>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3b01      	subs	r3, #1
 800036c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800036e:	210f      	movs	r1, #15
 8000370:	f04f 30ff 	mov.w	r0, #4294967295
 8000374:	f7ff ffc2 	bl	80002fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <SysTick_Config+0x40>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037e:	4b04      	ldr	r3, [pc, #16]	; (8000390 <SysTick_Config+0x40>)
 8000380:	2207      	movs	r2, #7
 8000382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000384:	2300      	movs	r3, #0
}
 8000386:	4618      	mov	r0, r3
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	e000e010 	.word	0xe000e010

08000394 <SysTick_Handler>:
#include "map_shield.h"

volatile uint32_t _ticks = 0;

void SysTick_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	_ticks++;
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <SysTick_Handler+0x18>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	4a03      	ldr	r2, [pc, #12]	; (80003ac <SysTick_Handler+0x18>)
 80003a0:	6013      	str	r3, [r2, #0]
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	20000020 	.word	0x20000020

080003b0 <main>:

int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

	SystemCoreClockUpdate();
 80003b6:	f7ff ff21 	bl	80001fc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock /1000 -1);
 80003ba:	4b29      	ldr	r3, [pc, #164]	; (8000460 <main+0xb0>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a29      	ldr	r2, [pc, #164]	; (8000464 <main+0xb4>)
 80003c0:	fba2 2303 	umull	r2, r3, r2, r3
 80003c4:	099b      	lsrs	r3, r3, #6
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ffc1 	bl	8000350 <SysTick_Config>
	InitSPILED();
 80003ce:	f000 f8a3 	bl	8000518 <InitSPILED>
	Init8LED();
 80003d2:	f000 f84b 	bl	800046c <Init8LED>
	uint16_t b = 1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	81fb      	strh	r3, [r7, #14]
	uint32_t tm2 = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
	// tlacitka
	//STM_SetPinGPIO(BTN_LEFT, ioPortInputFloat);
	//STM_SetPinGPIO(BTN_RIGHT, ioPortInputFloat);
	bool direction = true;
 80003de:	2301      	movs	r3, #1
 80003e0:	71fb      	strb	r3, [r7, #7]


	  while (1)
	  {
		  if(_ticks >= tm2)
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <main+0xb8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	68ba      	ldr	r2, [r7, #8]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d8fa      	bhi.n	80003e2 <main+0x32>
		  {
			  tm2 = _ticks + 100;
 80003ec:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <main+0xb8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3364      	adds	r3, #100	; 0x64
 80003f2:	60bb      	str	r3, [r7, #8]
			  // Bezici bod
			  if (b<=128)
 80003f4:	89fb      	ldrh	r3, [r7, #14]
 80003f6:	2b80      	cmp	r3, #128	; 0x80
 80003f8:	d817      	bhi.n	800042a <main+0x7a>
			  {
				  Write8LED(b);
 80003fa:	89fb      	ldrh	r3, [r7, #14]
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 f874 	bl	80004ec <Write8LED>
				  writeSPILED(0);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f8df 	bl	80005c8 <writeSPILED>
				  if (direction)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d003      	beq.n	8000418 <main+0x68>
					  b*=2;
 8000410:	89fb      	ldrh	r3, [r7, #14]
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	81fb      	strh	r3, [r7, #14]
 8000416:	e002      	b.n	800041e <main+0x6e>
				  else
					  b/=2;
 8000418:	89fb      	ldrh	r3, [r7, #14]
 800041a:	085b      	lsrs	r3, r3, #1
 800041c:	81fb      	strh	r3, [r7, #14]
				  if (b==1)
 800041e:	89fb      	ldrh	r3, [r7, #14]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d1de      	bne.n	80003e2 <main+0x32>
					  direction = true;
 8000424:	2301      	movs	r3, #1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	e7db      	b.n	80003e2 <main+0x32>
			  }
			  else
			  {
				  writeSPILED(b>>8);
 800042a:	89fb      	ldrh	r3, [r7, #14]
 800042c:	0a1b      	lsrs	r3, r3, #8
 800042e:	b29b      	uxth	r3, r3
 8000430:	b2db      	uxtb	r3, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f8c8 	bl	80005c8 <writeSPILED>
				  Write8LED(0);
 8000438:	2000      	movs	r0, #0
 800043a:	f000 f857 	bl	80004ec <Write8LED>
				  if (direction)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d003      	beq.n	800044c <main+0x9c>
					  b*=2;
 8000444:	89fb      	ldrh	r3, [r7, #14]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	81fb      	strh	r3, [r7, #14]
 800044a:	e002      	b.n	8000452 <main+0xa2>
				  else
					  b/=2;
 800044c:	89fb      	ldrh	r3, [r7, #14]
 800044e:	085b      	lsrs	r3, r3, #1
 8000450:	81fb      	strh	r3, [r7, #14]
				 if (b == 32768)
 8000452:	89fb      	ldrh	r3, [r7, #14]
 8000454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000458:	d1c3      	bne.n	80003e2 <main+0x32>
					 direction = false;
 800045a:	2300      	movs	r3, #0
 800045c:	71fb      	strb	r3, [r7, #7]
		  if(_ticks >= tm2)
 800045e:	e7c0      	b.n	80003e2 <main+0x32>
 8000460:	20000000 	.word	0x20000000
 8000464:	10624dd3 	.word	0x10624dd3
 8000468:	20000020 	.word	0x20000020

0800046c <Init8LED>:
#include "map_shield.h"

#define USE_SPI_LED

void Init8LED(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	if(!(RCC->AHB1ENR & RCC_AHB1ENR_GPIOCEN))
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <Init8LED+0x78>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	2b00      	cmp	r3, #0
 800047a:	d111      	bne.n	80004a0 <Init8LED+0x34>
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <Init8LED+0x78>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <Init8LED+0x78>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOCRST;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <Init8LED+0x78>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <Init8LED+0x78>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6113      	str	r3, [r2, #16]
		RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOCRST;
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <Init8LED+0x78>)
 8000496:	691b      	ldr	r3, [r3, #16]
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <Init8LED+0x78>)
 800049a:	f023 0304 	bic.w	r3, r3, #4
 800049e:	6113      	str	r3, [r2, #16]
	}

	GPIOC->MODER &= 0xffff0000;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <Init8LED+0x7c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <Init8LED+0x7c>)
 80004a6:	0c1b      	lsrs	r3, r3, #16
 80004a8:	041b      	lsls	r3, r3, #16
 80004aa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x00005555;
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <Init8LED+0x7c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <Init8LED+0x7c>)
 80004b2:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80004b6:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80004ba:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= 0xff00;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <Init8LED+0x7c>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <Init8LED+0x7c>)
 80004c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80004c6:	6053      	str	r3, [r2, #4]

	GPIOC->OSPEEDR |= 0x0000ffff;
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <Init8LED+0x7c>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a06      	ldr	r2, [pc, #24]	; (80004e8 <Init8LED+0x7c>)
 80004ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80004d2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80004d6:	6093      	str	r3, [r2, #8]
	return;
 80004d8:	bf00      	nop
}
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40020800 	.word	0x40020800

080004ec <Write8LED>:

void Write8LED(uint8_t val)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR = (GPIOC->ODR & 0xff00) | (uint16_t)val;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <Write8LED+0x28>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	4904      	ldr	r1, [pc, #16]	; (8000514 <Write8LED+0x28>)
 8000502:	4313      	orrs	r3, r2
 8000504:	614b      	str	r3, [r1, #20]
	return;
 8000506:	bf00      	nop
}
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40020800 	.word	0x40020800

08000518 <InitSPILED>:

void InitSPILED(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	STM_SetPinGPIO(GPIOA, 8, ioPortOutputPP); // SHIFT – LE. 595 - RCLK
 800051c:	2200      	movs	r2, #0
 800051e:	2108      	movs	r1, #8
 8000520:	4826      	ldr	r0, [pc, #152]	; (80005bc <InitSPILED+0xa4>)
 8000522:	f000 f8a3 	bl	800066c <STM_SetPinGPIO>
	GPIOWrite(GPIOA, 8, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2108      	movs	r1, #8
 800052a:	4824      	ldr	r0, [pc, #144]	; (80005bc <InitSPILED+0xa4>)
 800052c:	f000 fa36 	bl	800099c <GPIOWrite>

	STM_SetPinGPIO(GPIOA, 9, ioPortOutputPP); // Output enable
 8000530:	2200      	movs	r2, #0
 8000532:	2109      	movs	r1, #9
 8000534:	4821      	ldr	r0, [pc, #132]	; (80005bc <InitSPILED+0xa4>)
 8000536:	f000 f899 	bl	800066c <STM_SetPinGPIO>
	GPIOWrite(GPIOA, 9, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2109      	movs	r1, #9
 800053e:	481f      	ldr	r0, [pc, #124]	; (80005bc <InitSPILED+0xa4>)
 8000540:	f000 fa2c 	bl	800099c <GPIOWrite>

#ifdef USE_SPI_LED
	STM_SetPinGPIO(GPIOA, 5, ioPortAlternatePP);
 8000544:	2206      	movs	r2, #6
 8000546:	2105      	movs	r1, #5
 8000548:	481c      	ldr	r0, [pc, #112]	; (80005bc <InitSPILED+0xa4>)
 800054a:	f000 f88f 	bl	800066c <STM_SetPinGPIO>
	STM_SetAFGPIO(GPIOA, 5, 5);
 800054e:	2205      	movs	r2, #5
 8000550:	2105      	movs	r1, #5
 8000552:	481a      	ldr	r0, [pc, #104]	; (80005bc <InitSPILED+0xa4>)
 8000554:	f000 f9d4 	bl	8000900 <STM_SetAFGPIO>
	STM_SetPinGPIO(GPIOA, 7, ioPortAlternatePP);
 8000558:	2206      	movs	r2, #6
 800055a:	2107      	movs	r1, #7
 800055c:	4817      	ldr	r0, [pc, #92]	; (80005bc <InitSPILED+0xa4>)
 800055e:	f000 f885 	bl	800066c <STM_SetPinGPIO>
	STM_SetAFGPIO(GPIOA, 7, 5);
 8000562:	2205      	movs	r2, #5
 8000564:	2107      	movs	r1, #7
 8000566:	4815      	ldr	r0, [pc, #84]	; (80005bc <InitSPILED+0xa4>)
 8000568:	f000 f9ca 	bl	8000900 <STM_SetAFGPIO>
	if (!(RCC->APB2ENR & RCC_APB2ENR_SPI1EN))
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <InitSPILED+0xa8>)
 800056e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <InitSPILED+0x84>
	{
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <InitSPILED+0xa8>)
 800057a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <InitSPILED+0xa8>)
 800057e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000582:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <InitSPILED+0xa8>)
 8000586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <InitSPILED+0xa8>)
 800058a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800058e:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_SPI1RST;
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <InitSPILED+0xa8>)
 8000592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <InitSPILED+0xa8>)
 8000596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800059a:	6253      	str	r3, [r2, #36]	; 0x24
	}
	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM; // CPOL = 0, CPHA = 0, DFF = 0 = 8b data, BR = 0 = clk/2
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <InitSPILED+0xac>)
 800059e:	f44f 7241 	mov.w	r2, #772	; 0x304
 80005a2:	601a      	str	r2, [r3, #0]
	SPI1->CR2 = 0; // zadne preruseni ani DMA
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <InitSPILED+0xac>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_SPE; // SPI enable
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <InitSPILED+0xac>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <InitSPILED+0xac>)
 80005b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b4:	6013      	str	r3, [r2, #0]
	STM_SetPinGPIO(GPIOA, 7, ioPortOutputPP); // SER in

	STM_SetPinGPIO(GPIOA, 5, ioPortOutputPP); // SHIFT – CLK, 595 - SRCLK
	GPIOWrite(GPIOA, 5, 0);
#endif
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020000 	.word	0x40020000
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40013000 	.word	0x40013000

080005c8 <writeSPILED>:

void writeSPILED(uint8_t val)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
#ifdef USE_SPI_LED
	SPI1->DR = val;
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <writeSPILED+0x48>)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	60d3      	str	r3, [r2, #12]

	while(!(SPI1->SR & SPI_SR_TXE) || (SPI1->SR & SPI_SR_BSY))	//dokud je TXE 0 nebo BSY 1
 80005d8:	bf00      	nop
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <writeSPILED+0x48>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <writeSPILED+0x12>
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <writeSPILED+0x48>)
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f3      	bne.n	80005da <writeSPILED+0x12>
		GPIOWrite(GPIOA, 5, 0);

		val <<= 1;
	}
#endif
	GPIOWrite(GPIOA, 8, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2108      	movs	r1, #8
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <writeSPILED+0x4c>)
 80005f8:	f000 f9d0 	bl	800099c <GPIOWrite>
	GPIOWrite(GPIOA, 8, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <writeSPILED+0x4c>)
 8000602:	f000 f9cb 	bl	800099c <GPIOWrite>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40013000 	.word	0x40013000
 8000614:	40020000 	.word	0x40020000

08000618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800061c:	f7ff fddc 	bl	80001d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f000 f9cd 	bl	80009e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff feb1 	bl	80003b0 <main>

0800064e <LoopForever>:

LoopForever:
  b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800065c:	08000a5c 	.word	0x08000a5c
  ldr r2, =_sbss
 8000660:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000664:	20000024 	.word	0x20000024

08000668 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC_IRQHandler>
	...

0800066c <STM_SetPinGPIO>:
#include "stm_core.h"

bool STM_SetPinGPIO(GPIO_TypeDef *pgpio, uint32_t bitnum, eIoPortModes mode)
{
 800066c:	b480      	push	{r7}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	4613      	mov	r3, r2
 8000678:	71fb      	strb	r3, [r7, #7]
	uint32_t enr_mask = 0; // hodnota do xxENR registru
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
	uint32_t rstr_mask = 0; // hodnota do xxRSTR registru
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
	switch((uint32_t)pgpio) // detekce, ktery GPIO
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4a97      	ldr	r2, [pc, #604]	; (80008e4 <STM_SetPinGPIO+0x278>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d034      	beq.n	80006f4 <STM_SetPinGPIO+0x88>
 800068a:	4a96      	ldr	r2, [pc, #600]	; (80008e4 <STM_SetPinGPIO+0x278>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d836      	bhi.n	80006fe <STM_SetPinGPIO+0x92>
 8000690:	4a95      	ldr	r2, [pc, #596]	; (80008e8 <STM_SetPinGPIO+0x27c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d029      	beq.n	80006ea <STM_SetPinGPIO+0x7e>
 8000696:	4a94      	ldr	r2, [pc, #592]	; (80008e8 <STM_SetPinGPIO+0x27c>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d830      	bhi.n	80006fe <STM_SetPinGPIO+0x92>
 800069c:	4a93      	ldr	r2, [pc, #588]	; (80008ec <STM_SetPinGPIO+0x280>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d01e      	beq.n	80006e0 <STM_SetPinGPIO+0x74>
 80006a2:	4a92      	ldr	r2, [pc, #584]	; (80008ec <STM_SetPinGPIO+0x280>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d82a      	bhi.n	80006fe <STM_SetPinGPIO+0x92>
 80006a8:	4a91      	ldr	r2, [pc, #580]	; (80008f0 <STM_SetPinGPIO+0x284>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d013      	beq.n	80006d6 <STM_SetPinGPIO+0x6a>
 80006ae:	4a90      	ldr	r2, [pc, #576]	; (80008f0 <STM_SetPinGPIO+0x284>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d824      	bhi.n	80006fe <STM_SetPinGPIO+0x92>
 80006b4:	4a8f      	ldr	r2, [pc, #572]	; (80008f4 <STM_SetPinGPIO+0x288>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d003      	beq.n	80006c2 <STM_SetPinGPIO+0x56>
 80006ba:	4a8f      	ldr	r2, [pc, #572]	; (80008f8 <STM_SetPinGPIO+0x28c>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d005      	beq.n	80006cc <STM_SetPinGPIO+0x60>
 80006c0:	e01d      	b.n	80006fe <STM_SetPinGPIO+0x92>
	{
		case (uint32_t)GPIOA:
				enr_mask = RCC_AHB1ENR_GPIOAEN;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOARST;
 80006c6:	2301      	movs	r3, #1
 80006c8:	613b      	str	r3, [r7, #16]
			break;
 80006ca:	e018      	b.n	80006fe <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOB:
				enr_mask = RCC_AHB1ENR_GPIOBEN;
 80006cc:	2302      	movs	r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
			break;
 80006d4:	e013      	b.n	80006fe <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOC:
				enr_mask = RCC_AHB1ENR_GPIOCEN;
 80006d6:	2304      	movs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 80006da:	2304      	movs	r3, #4
 80006dc:	613b      	str	r3, [r7, #16]
			break;
 80006de:	e00e      	b.n	80006fe <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOD:
				enr_mask = RCC_AHB1ENR_GPIODEN;
 80006e0:	2308      	movs	r3, #8
 80006e2:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIODRST;
 80006e4:	2308      	movs	r3, #8
 80006e6:	613b      	str	r3, [r7, #16]
			break;
 80006e8:	e009      	b.n	80006fe <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOE:
				enr_mask = RCC_AHB1ENR_GPIOEEN;
 80006ea:	2310      	movs	r3, #16
 80006ec:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOERST;
 80006ee:	2310      	movs	r3, #16
 80006f0:	613b      	str	r3, [r7, #16]
			break;
 80006f2:	e004      	b.n	80006fe <STM_SetPinGPIO+0x92>
			rstr_mask = RCC_AHB1RSTR_GPIOGRST;
			break;
	#endif

		case (uint32_t)GPIOH:
				enr_mask = RCC_AHB1ENR_GPIOHEN;
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	617b      	str	r3, [r7, #20]
				rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	613b      	str	r3, [r7, #16]
				break;
 80006fc:	bf00      	nop
	}


	if ((enr_mask == 0) || (rstr_mask == 0)) // nevybran GPIO
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <STM_SetPinGPIO+0x9e>
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <STM_SetPinGPIO+0xa2>
	return false; // vrat priznak chyby
 800070a:	2300      	movs	r3, #0
 800070c:	e0e4      	b.n	80008d8 <STM_SetPinGPIO+0x26c>

	if (!(RCC->AHB1ENR & enr_mask)) // inicializace vybraneho
 800070e:	4b7b      	ldr	r3, [pc, #492]	; (80008fc <STM_SetPinGPIO+0x290>)
 8000710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	4013      	ands	r3, r2
 8000716:	2b00      	cmp	r3, #0
 8000718:	d112      	bne.n	8000740 <STM_SetPinGPIO+0xd4>
	{
	RCC->AHB1ENR |= enr_mask; // povolit hodiny periferie
 800071a:	4b78      	ldr	r3, [pc, #480]	; (80008fc <STM_SetPinGPIO+0x290>)
 800071c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071e:	4977      	ldr	r1, [pc, #476]	; (80008fc <STM_SetPinGPIO+0x290>)
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	4313      	orrs	r3, r2
 8000724:	630b      	str	r3, [r1, #48]	; 0x30
	RCC->AHB1RSTR |= rstr_mask; // proved reset periferie
 8000726:	4b75      	ldr	r3, [pc, #468]	; (80008fc <STM_SetPinGPIO+0x290>)
 8000728:	691a      	ldr	r2, [r3, #16]
 800072a:	4974      	ldr	r1, [pc, #464]	; (80008fc <STM_SetPinGPIO+0x290>)
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	4313      	orrs	r3, r2
 8000730:	610b      	str	r3, [r1, #16]
	RCC->AHB1RSTR &= ~rstr_mask; // a konec resetu
 8000732:	4b72      	ldr	r3, [pc, #456]	; (80008fc <STM_SetPinGPIO+0x290>)
 8000734:	691a      	ldr	r2, [r3, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	43db      	mvns	r3, r3
 800073a:	4970      	ldr	r1, [pc, #448]	; (80008fc <STM_SetPinGPIO+0x290>)
 800073c:	4013      	ands	r3, r2
 800073e:	610b      	str	r3, [r1, #16]
	}
	// pokracovani inicializace konkretniho vystupu

	// nastaveni registru podle typu vystupu/vstupu
	switch(mode)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b07      	cmp	r3, #7
 8000744:	f200 80c5 	bhi.w	80008d2 <STM_SetPinGPIO+0x266>
 8000748:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <STM_SetPinGPIO+0xe4>)
 800074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074e:	bf00      	nop
 8000750:	08000771 	.word	0x08000771
 8000754:	08000771 	.word	0x08000771
 8000758:	0800084f 	.word	0x0800084f
 800075c:	08000837 	.word	0x08000837
 8000760:	080007df 	.word	0x080007df
 8000764:	0800080b 	.word	0x0800080b
 8000768:	08000865 	.word	0x08000865
 800076c:	08000865 	.word	0x08000865
	{
		case ioPortOutputOC:
		case ioPortOutputPP:
			pgpio->MODER |= 0x01 << (2 * bitnum); // 01 = output
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	431a      	orrs	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	601a      	str	r2, [r3, #0]
			pgpio->OSPEEDR |= 0x03 << (2 * bitnum); // 11 = high speed
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	2103      	movs	r1, #3
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	431a      	orrs	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	609a      	str	r2, [r3, #8]
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pu/pd
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	0052      	lsls	r2, r2, #1
 80007a0:	2103      	movs	r1, #3
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	43d2      	mvns	r2, r2
 80007a8:	401a      	ands	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	60da      	str	r2, [r3, #12]
			if (mode == ioPortOutputOC) // open collector (drain) ?
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d109      	bne.n	80007c8 <STM_SetPinGPIO+0x15c>
				pgpio->OTYPER |= 0x01 << bitnum; // 1 = OC/Open drain
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	2101      	movs	r1, #1
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	431a      	orrs	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	605a      	str	r2, [r3, #4]
			else
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
			break;
 80007c6:	e086      	b.n	80008d6 <STM_SetPinGPIO+0x26a>
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2101      	movs	r1, #1
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	fa01 f202 	lsl.w	r2, r1, r2
 80007d4:	43d2      	mvns	r2, r2
 80007d6:	401a      	ands	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	605a      	str	r2, [r3, #4]
			break;
 80007dc:	e07b      	b.n	80008d6 <STM_SetPinGPIO+0x26a>
		case ioPortInputPU: // moder bits 00 = input
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // clear bits
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	2103      	movs	r1, #3
 80007e8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ec:	43d2      	mvns	r2, r2
 80007ee:	401a      	ands	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	60da      	str	r2, [r3, #12]
			pgpio->PUPDR |= 0x01 << (2 * bitnum); // 01 = pull-up
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	0052      	lsls	r2, r2, #1
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	431a      	orrs	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	60da      	str	r2, [r3, #12]
			break;
 8000808:	e065      	b.n	80008d6 <STM_SetPinGPIO+0x26a>
		case ioPortInputPD:
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // clear bits
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	0052      	lsls	r2, r2, #1
 8000812:	2103      	movs	r1, #3
 8000814:	fa01 f202 	lsl.w	r2, r1, r2
 8000818:	43d2      	mvns	r2, r2
 800081a:	401a      	ands	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	60da      	str	r2, [r3, #12]
			pgpio->PUPDR |= 0x02 << (2 * bitnum); // 10 = pull-down
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	2102      	movs	r1, #2
 800082a:	fa01 f202 	lsl.w	r2, r1, r2
 800082e:	431a      	orrs	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	60da      	str	r2, [r3, #12]
			break;
 8000834:	e04f      	b.n	80008d6 <STM_SetPinGPIO+0x26a>
		case ioPortInputFloat: // 00 = input mode, nothing to do
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/dn
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	0052      	lsls	r2, r2, #1
 800083e:	2103      	movs	r1, #3
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	43d2      	mvns	r2, r2
 8000846:	401a      	ands	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	60da      	str	r2, [r3, #12]
			break;
 800084c:	e043      	b.n	80008d6 <STM_SetPinGPIO+0x26a>
		case ioPortAnalog:
			pgpio->MODER |= 0x03 << (2 * bitnum); // 11 - analog mode
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	0052      	lsls	r2, r2, #1
 8000856:	2103      	movs	r1, #3
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	431a      	orrs	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	601a      	str	r2, [r3, #0]
			break;
 8000862:	e038      	b.n	80008d6 <STM_SetPinGPIO+0x26a>
	// other modes
	// Alternative modes
		case ioPortAlternatePP:
		case ioPortAlternateOC:
			pgpio->MODER |= 0x02 << (2 * bitnum); // set bits
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	0052      	lsls	r2, r2, #1
 800086c:	2102      	movs	r1, #2
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	431a      	orrs	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	601a      	str	r2, [r3, #0]
			if (mode == ioPortAlternateOC)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b07      	cmp	r3, #7
 800087c:	d109      	bne.n	8000892 <STM_SetPinGPIO+0x226>
				pgpio->OTYPER |= 0x01 << bitnum; // 1 = open-drain
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2101      	movs	r1, #1
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	431a      	orrs	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	e009      	b.n	80008a6 <STM_SetPinGPIO+0x23a>
			else
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2101      	movs	r1, #1
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	fa01 f202 	lsl.w	r2, r1, r2
 800089e:	43d2      	mvns	r2, r2
 80008a0:	401a      	ands	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	605a      	str	r2, [r3, #4]
			pgpio->OSPEEDR |= 0x03 << (2 * bitnum); // high-speed = 11
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	0052      	lsls	r2, r2, #1
 80008ae:	2103      	movs	r1, #3
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	431a      	orrs	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	609a      	str	r2, [r3, #8]
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/pull-down
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	0052      	lsls	r2, r2, #1
 80008c2:	2103      	movs	r1, #3
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	60da      	str	r2, [r3, #12]
	// don't forget set AFR registers !!!
			break;
 80008d0:	e001      	b.n	80008d6 <STM_SetPinGPIO+0x26a>
		default: // unknown mode ?
			return false; // return "fail"
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <STM_SetPinGPIO+0x26c>
	}
	return true; // return "OK"
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	40021c00 	.word	0x40021c00
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40023800 	.word	0x40023800

08000900 <STM_SetAFGPIO>:

bool STM_SetAFGPIO(GPIO_TypeDef *pgpio, uint32_t bitnum, uint32_t afValue)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
pgpio->AFR[(bitnum < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitnum & 0x07))); // vynuluj AF bity
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b07      	cmp	r3, #7
 8000910:	bf8c      	ite	hi
 8000912:	2301      	movhi	r3, #1
 8000914:	2300      	movls	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3208      	adds	r2, #8
 800091e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f002 0207 	and.w	r2, r2, #7
 8000928:	0092      	lsls	r2, r2, #2
 800092a:	210f      	movs	r1, #15
 800092c:	fa01 f202 	lsl.w	r2, r1, r2
 8000930:	43d2      	mvns	r2, r2
 8000932:	4611      	mov	r1, r2
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	2a07      	cmp	r2, #7
 8000938:	bf8c      	ite	hi
 800093a:	2201      	movhi	r2, #1
 800093c:	2200      	movls	r2, #0
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	4019      	ands	r1, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3208      	adds	r2, #8
 8000946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
pgpio->AFR[(bitnum < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitnum & 0x07))); // nastav AF bity
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b07      	cmp	r3, #7
 800094e:	bf8c      	ite	hi
 8000950:	2301      	movhi	r3, #1
 8000952:	2300      	movls	r3, #0
 8000954:	b2db      	uxtb	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3208      	adds	r2, #8
 800095c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 010f 	and.w	r1, r3, #15
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	f003 0307 	and.w	r3, r3, #7
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	68b9      	ldr	r1, [r7, #8]
 8000974:	2907      	cmp	r1, #7
 8000976:	bf8c      	ite	hi
 8000978:	2101      	movhi	r1, #1
 800097a:	2100      	movls	r1, #0
 800097c:	b2c9      	uxtb	r1, r1
 800097e:	4608      	mov	r0, r1
 8000980:	ea42 0103 	orr.w	r1, r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f100 0208 	add.w	r2, r0, #8
 800098a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
return true;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <GPIOWrite>:

void GPIOWrite(GPIO_TypeDef *pgpio, uint32_t bitnum, bool state)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	71fb      	strb	r3, [r7, #7]
	if (state==true)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d009      	beq.n	80009c4 <GPIOWrite+0x28>
		pgpio->ODR |= (state << bitnum);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	79f9      	ldrb	r1, [r7, #7]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	fa01 f202 	lsl.w	r2, r1, r2
 80009bc:	431a      	orrs	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	615a      	str	r2, [r3, #20]
	else
		pgpio->ODR &= ~(1 << bitnum);
}
 80009c2:	e009      	b.n	80009d8 <GPIOWrite+0x3c>
		pgpio->ODR &= ~(1 << bitnum);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	2101      	movs	r1, #1
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	615a      	str	r2, [r3, #20]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <__libc_init_array>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	4d0d      	ldr	r5, [pc, #52]	; (8000a1c <__libc_init_array+0x38>)
 80009e8:	4c0d      	ldr	r4, [pc, #52]	; (8000a20 <__libc_init_array+0x3c>)
 80009ea:	1b64      	subs	r4, r4, r5
 80009ec:	10a4      	asrs	r4, r4, #2
 80009ee:	2600      	movs	r6, #0
 80009f0:	42a6      	cmp	r6, r4
 80009f2:	d109      	bne.n	8000a08 <__libc_init_array+0x24>
 80009f4:	4d0b      	ldr	r5, [pc, #44]	; (8000a24 <__libc_init_array+0x40>)
 80009f6:	4c0c      	ldr	r4, [pc, #48]	; (8000a28 <__libc_init_array+0x44>)
 80009f8:	f000 f818 	bl	8000a2c <_init>
 80009fc:	1b64      	subs	r4, r4, r5
 80009fe:	10a4      	asrs	r4, r4, #2
 8000a00:	2600      	movs	r6, #0
 8000a02:	42a6      	cmp	r6, r4
 8000a04:	d105      	bne.n	8000a12 <__libc_init_array+0x2e>
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0c:	4798      	blx	r3
 8000a0e:	3601      	adds	r6, #1
 8000a10:	e7ee      	b.n	80009f0 <__libc_init_array+0xc>
 8000a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a16:	4798      	blx	r3
 8000a18:	3601      	adds	r6, #1
 8000a1a:	e7f2      	b.n	8000a02 <__libc_init_array+0x1e>
 8000a1c:	08000a54 	.word	0x08000a54
 8000a20:	08000a54 	.word	0x08000a54
 8000a24:	08000a54 	.word	0x08000a54
 8000a28:	08000a58 	.word	0x08000a58

08000a2c <_init>:
 8000a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2e:	bf00      	nop
 8000a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a32:	bc08      	pop	{r3}
 8000a34:	469e      	mov	lr, r3
 8000a36:	4770      	bx	lr

08000a38 <_fini>:
 8000a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3a:	bf00      	nop
 8000a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3e:	bc08      	pop	{r3}
 8000a40:	469e      	mov	lr, r3
 8000a42:	4770      	bx	lr
