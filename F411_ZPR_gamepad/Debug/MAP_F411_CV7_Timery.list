
MAP_F411_CV7_Timery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002118  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022b0  080022b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022c0  080022c0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080022c0  080022c0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022c0  080022c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022c0  080022c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022c4  080022c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080022c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000060  08002328  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08002328  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000029d6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000980  00000000  00000000  00022aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00023430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000015d  00000000  00000000  00023628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fd8b  00000000  00000000  00023785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002add  00000000  00000000  00033510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005642c  00000000  00000000  00035fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e88  00000000  00000000  0008c41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0008d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002298 	.word	0x08002298

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08002298 	.word	0x08002298

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	2302      	movs	r3, #2
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	2302      	movs	r3, #2
 80009f0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <SystemCoreClockUpdate+0xec>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 030c 	and.w	r3, r3, #12
 80009fa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	2b08      	cmp	r3, #8
 8000a00:	d011      	beq.n	8000a26 <SystemCoreClockUpdate+0x4e>
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	d844      	bhi.n	8000a92 <SystemCoreClockUpdate+0xba>
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <SystemCoreClockUpdate+0x3e>
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d004      	beq.n	8000a1e <SystemCoreClockUpdate+0x46>
 8000a14:	e03d      	b.n	8000a92 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <SystemCoreClockUpdate+0xf0>)
 8000a18:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <SystemCoreClockUpdate+0xf4>)
 8000a1a:	601a      	str	r2, [r3, #0]
      break;
 8000a1c:	e03d      	b.n	8000a9a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <SystemCoreClockUpdate+0xf0>)
 8000a20:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <SystemCoreClockUpdate+0xf8>)
 8000a22:	601a      	str	r2, [r3, #0]
      break;
 8000a24:	e039      	b.n	8000a9a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <SystemCoreClockUpdate+0xec>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	0d9b      	lsrs	r3, r3, #22
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <SystemCoreClockUpdate+0xec>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a3a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00c      	beq.n	8000a5c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <SystemCoreClockUpdate+0xf8>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <SystemCoreClockUpdate+0xec>)
 8000a4c:	6852      	ldr	r2, [r2, #4]
 8000a4e:	0992      	lsrs	r2, r2, #6
 8000a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e00b      	b.n	8000a74 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <SystemCoreClockUpdate+0xf4>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <SystemCoreClockUpdate+0xec>)
 8000a66:	6852      	ldr	r2, [r2, #4]
 8000a68:	0992      	lsrs	r2, r2, #6
 8000a6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a6e:	fb02 f303 	mul.w	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <SystemCoreClockUpdate+0xec>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	0c1b      	lsrs	r3, r3, #16
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	3301      	adds	r3, #1
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <SystemCoreClockUpdate+0xf0>)
 8000a8e:	6013      	str	r3, [r2, #0]
      break;
 8000a90:	e003      	b.n	8000a9a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SystemCoreClockUpdate+0xf0>)
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <SystemCoreClockUpdate+0xf4>)
 8000a96:	601a      	str	r2, [r3, #0]
      break;
 8000a98:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <SystemCoreClockUpdate+0xec>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	091b      	lsrs	r3, r3, #4
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <SystemCoreClockUpdate+0xfc>)
 8000aa6:	5cd3      	ldrb	r3, [r2, r3]
 8000aa8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <SystemCoreClockUpdate+0xf0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <SystemCoreClockUpdate+0xf0>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	00f42400 	.word	0x00f42400
 8000ad0:	017d7840 	.word	0x017d7840
 8000ad4:	080022b0 	.word	0x080022b0

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ffc2 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <SysTick_Handler>:
#include "stm_usart.h"

volatile uint32_t _ticks = 0;

void SysTick_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	_ticks++;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SysTick_Handler+0x18>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <SysTick_Handler+0x18>)
 8000bb8:	6013      	str	r3, [r2, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	2000007c 	.word	0x2000007c

08000bc8 <TIM3_IRQHandler>:

volatile bool tim3irq = false;
//volatile bool tim3irq_BTN_left = false;
void TIM3_IRQHandler(void) // obsluha preruseni od TIM3
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	static int cnt = 0;
	static int cnt2 = 0;
	static int disable = 0;
	static int frequency_state = 0;
	bool state = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	TIM3->SR = ~TIM_SR_UIF; // shodit priznak !!
 8000bd2:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <TIM3_IRQHandler+0x108>)
 8000bd4:	f06f 0201 	mvn.w	r2, #1
 8000bd8:	611a      	str	r2, [r3, #16]
	/*if (tim3irq_BTN_left)
		GPIOWrite(GPIOB, 0, 0);
	else
		GPIOToggle(GPIOB, 0);*/

	if (disable % 2)
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <TIM3_IRQHandler+0x10c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <TIM3_IRQHandler+0x2a>
		GPIOWrite(GPIOB, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	483b      	ldr	r0, [pc, #236]	; (8000cd8 <TIM3_IRQHandler+0x110>)
 8000bec:	f000 fc6a 	bl	80014c4 <GPIOWrite>
 8000bf0:	e003      	b.n	8000bfa <TIM3_IRQHandler+0x32>
	else
		GPIOToggle(GPIOB, 0);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4838      	ldr	r0, [pc, #224]	; (8000cd8 <TIM3_IRQHandler+0x110>)
 8000bf6:	f000 fc89 	bl	800150c <GPIOToggle>


	cnt++;
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <TIM3_IRQHandler+0x114>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a36      	ldr	r2, [pc, #216]	; (8000cdc <TIM3_IRQHandler+0x114>)
 8000c02:	6013      	str	r3, [r2, #0]
	cnt2++;
 8000c04:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <TIM3_IRQHandler+0x118>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a35      	ldr	r2, [pc, #212]	; (8000ce0 <TIM3_IRQHandler+0x118>)
 8000c0c:	6013      	str	r3, [r2, #0]
	if (cnt >=100)
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <TIM3_IRQHandler+0x114>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b63      	cmp	r3, #99	; 0x63
 8000c14:	dd05      	ble.n	8000c22 <TIM3_IRQHandler+0x5a>
	{
		tim3irq = true;
 8000c16:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <TIM3_IRQHandler+0x11c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
		cnt = 0;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <TIM3_IRQHandler+0x114>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
	}
	if (cnt2 >=150)
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <TIM3_IRQHandler+0x118>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b95      	cmp	r3, #149	; 0x95
 8000c28:	dd4e      	ble.n	8000cc8 <TIM3_IRQHandler+0x100>
	{
		if(GPIORead(BTN_LEFT)!=state)
 8000c2a:	2105      	movs	r1, #5
 8000c2c:	482a      	ldr	r0, [pc, #168]	; (8000cd8 <TIM3_IRQHandler+0x110>)
 8000c2e:	f000 fc81 	bl	8001534 <GPIORead>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00c      	beq.n	8000c56 <TIM3_IRQHandler+0x8e>
			{
				disable++;
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <TIM3_IRQHandler+0x10c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	4a24      	ldr	r2, [pc, #144]	; (8000cd4 <TIM3_IRQHandler+0x10c>)
 8000c44:	6013      	str	r3, [r2, #0]
				if (state)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <TIM3_IRQHandler+0x8a>
					state = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	e001      	b.n	8000c56 <TIM3_IRQHandler+0x8e>
				else
					state = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	71fb      	strb	r3, [r7, #7]
			}
		if (GPIORead(BTN_RIGHT))
 8000c56:	2104      	movs	r1, #4
 8000c58:	481f      	ldr	r0, [pc, #124]	; (8000cd8 <TIM3_IRQHandler+0x110>)
 8000c5a:	f000 fc6b 	bl	8001534 <GPIORead>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <TIM3_IRQHandler+0xa6>
			frequency_state++;
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <TIM3_IRQHandler+0x120>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <TIM3_IRQHandler+0x120>)
 8000c6c:	6013      	str	r3, [r2, #0]

		if (frequency_state == 4)
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <TIM3_IRQHandler+0x120>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d102      	bne.n	8000c7c <TIM3_IRQHandler+0xb4>
			frequency_state = 0;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <TIM3_IRQHandler+0x120>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]

		switch(frequency_state)
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <TIM3_IRQHandler+0x120>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d81e      	bhi.n	8000cc2 <TIM3_IRQHandler+0xfa>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <TIM3_IRQHandler+0xc4>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000ca7 	.word	0x08000ca7
 8000c94:	08000cb1 	.word	0x08000cb1
 8000c98:	08000cbb 	.word	0x08000cbb
		{
		case 0:
			TIM3->ARR = 1000-1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <TIM3_IRQHandler+0x108>)
 8000c9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8000ca4:	e00d      	b.n	8000cc2 <TIM3_IRQHandler+0xfa>
		case 1:
			TIM3->ARR = 700-1;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <TIM3_IRQHandler+0x108>)
 8000ca8:	f240 22bb 	movw	r2, #699	; 0x2bb
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8000cae:	e008      	b.n	8000cc2 <TIM3_IRQHandler+0xfa>
		case 2:
			TIM3->ARR = 500-1;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <TIM3_IRQHandler+0x108>)
 8000cb2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8000cb8:	e003      	b.n	8000cc2 <TIM3_IRQHandler+0xfa>
		case 3:
			TIM3->ARR = 250-1;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <TIM3_IRQHandler+0x108>)
 8000cbc:	22f9      	movs	r2, #249	; 0xf9
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8000cc0:	bf00      	nop
		/*if (GPIORead(BTN_RIGHT))
			TIM3->ARR = 500-1;
		else
			TIM3->ARR = 1000-1;*/

		cnt2 = 0;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <TIM3_IRQHandler+0x118>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
	}
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	20000084 	.word	0x20000084
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	2000008c 	.word	0x2000008c
 8000ce4:	20000080 	.word	0x20000080
 8000ce8:	20000090 	.word	0x20000090

08000cec <TIM4_IRQHandler>:

volatile bool tim4irq = false;
void TIM4_IRQHandler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
	TIM4->SR = ~TIM_SR_UIF; // shodit priznak !!
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <TIM4_IRQHandler+0x1c>)
 8000cf2:	f06f 0201 	mvn.w	r2, #1
 8000cf6:	611a      	str	r2, [r3, #16]
	tim4irq = true;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <TIM4_IRQHandler+0x20>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40000800 	.word	0x40000800
 8000d0c:	20000081 	.word	0x20000081

08000d10 <main>:

// Preruseni programu
#if 1
int main(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0

	SystemCoreClockUpdate();
 8000d16:	f7ff fe5f 	bl	80009d8 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock /1000 -1);
 8000d1a:	4bad      	ldr	r3, [pc, #692]	; (8000fd0 <main+0x2c0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4aad      	ldr	r2, [pc, #692]	; (8000fd4 <main+0x2c4>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	099b      	lsrs	r3, r3, #6
 8000d26:	3b01      	subs	r3, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff1d 	bl	8000b68 <SysTick_Config>


	//Nastaveni timeru TIM1
	uint32_t apb2 = SystemCoreClock;
 8000d2e:	4ba8      	ldr	r3, [pc, #672]	; (8000fd0 <main+0x2c0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	603b      	str	r3, [r7, #0]
		if (!(RCC->APB2ENR & RCC_APB2ENR_TIM1EN))
 8000d34:	4ba8      	ldr	r3, [pc, #672]	; (8000fd8 <main+0x2c8>)
 8000d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d111      	bne.n	8000d64 <main+0x54>
		{
			RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000d40:	4ba5      	ldr	r3, [pc, #660]	; (8000fd8 <main+0x2c8>)
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	4aa4      	ldr	r2, [pc, #656]	; (8000fd8 <main+0x2c8>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6453      	str	r3, [r2, #68]	; 0x44
			RCC->APB2RSTR |= RCC_APB2RSTR_TIM1RST;
 8000d4c:	4ba2      	ldr	r3, [pc, #648]	; (8000fd8 <main+0x2c8>)
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	4aa1      	ldr	r2, [pc, #644]	; (8000fd8 <main+0x2c8>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6253      	str	r3, [r2, #36]	; 0x24
			RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM1RST;
 8000d58:	4b9f      	ldr	r3, [pc, #636]	; (8000fd8 <main+0x2c8>)
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	4a9e      	ldr	r2, [pc, #632]	; (8000fd8 <main+0x2c8>)
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	6253      	str	r3, [r2, #36]	; 0x24
		}
	TIM1->CR1 = 0 // DIR = 0 - upcounter
 8000d64:	4b9d      	ldr	r3, [pc, #628]	; (8000fdc <main+0x2cc>)
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	601a      	str	r2, [r3, #0]
	| TIM_CR1_ARPE; // bufferovany zapis do ARR
	TIM1->CR2 = 0;
 8000d6a:	4b9c      	ldr	r3, [pc, #624]	; (8000fdc <main+0x2cc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
	TIM1->PSC = apb2 / 1E6 - 1; // 1MHz - 1us
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f7ff fb73 	bl	800045c <__aeabi_ui2d>
 8000d76:	a394      	add	r3, pc, #592	; (adr r3, 8000fc8 <main+0x2b8>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fd12 	bl	80007a4 <__aeabi_ddiv>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b94      	ldr	r3, [pc, #592]	; (8000fe0 <main+0x2d0>)
 8000d8e:	f7ff fa27 	bl	80001e0 <__aeabi_dsub>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4c91      	ldr	r4, [pc, #580]	; (8000fdc <main+0x2cc>)
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f7ff fdea 	bl	8000974 <__aeabi_d2uiz>
 8000da0:	4603      	mov	r3, r0
 8000da2:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->ARR = 128 - 1; // 256us preteceni
 8000da4:	4b8d      	ldr	r3, [pc, #564]	; (8000fdc <main+0x2cc>)
 8000da6:	227f      	movs	r2, #127	; 0x7f
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CR1 = TIM_CR1_CEN;
 8000daa:	4b8c      	ldr	r3, [pc, #560]	; (8000fdc <main+0x2cc>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
	TIM1->BDTR |= TIM_BDTR_MOE;
 8000db0:	4b8a      	ldr	r3, [pc, #552]	; (8000fdc <main+0x2cc>)
 8000db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db4:	4a89      	ldr	r2, [pc, #548]	; (8000fdc <main+0x2cc>)
 8000db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dba:	6453      	str	r3, [r2, #68]	; 0x44

	STM_SetPinGPIO(RGB_BLUE, ioPortAlternatePP);
 8000dbc:	2206      	movs	r2, #6
 8000dbe:	210d      	movs	r1, #13
 8000dc0:	4888      	ldr	r0, [pc, #544]	; (8000fe4 <main+0x2d4>)
 8000dc2:	f000 f9e7 	bl	8001194 <STM_SetPinGPIO>
	STM_SetAFGPIO(RGB_BLUE, 1);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	210d      	movs	r1, #13
 8000dca:	4886      	ldr	r0, [pc, #536]	; (8000fe4 <main+0x2d4>)
 8000dcc:	f000 fb2c 	bl	8001428 <STM_SetAFGPIO>

	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M;
 8000dd0:	4b82      	ldr	r3, [pc, #520]	; (8000fdc <main+0x2cc>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a81      	ldr	r2, [pc, #516]	; (8000fdc <main+0x2cc>)
 8000dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dda:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // 110 – PWM 1
 8000ddc:	4b7f      	ldr	r3, [pc, #508]	; (8000fdc <main+0x2cc>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a7e      	ldr	r2, [pc, #504]	; (8000fdc <main+0x2cc>)
 8000de2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000de6:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= TIM_CCER_CC1NE; // povol komplementarni vystup
 8000de8:	4b7c      	ldr	r3, [pc, #496]	; (8000fdc <main+0x2cc>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a7b      	ldr	r2, [pc, #492]	; (8000fdc <main+0x2cc>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6213      	str	r3, [r2, #32]
	TIM1->CCR1 = 0; //TIM1->ARR / 2;
 8000df4:	4b79      	ldr	r3, [pc, #484]	; (8000fdc <main+0x2cc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34

	STM_SetPinGPIO(RGB_RED, ioPortAlternatePP);
 8000dfa:	2206      	movs	r2, #6
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	4879      	ldr	r0, [pc, #484]	; (8000fe4 <main+0x2d4>)
 8000e00:	f000 f9c8 	bl	8001194 <STM_SetPinGPIO>
	STM_SetAFGPIO(RGB_RED, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	210f      	movs	r1, #15
 8000e08:	4876      	ldr	r0, [pc, #472]	; (8000fe4 <main+0x2d4>)
 8000e0a:	f000 fb0d 	bl	8001428 <STM_SetAFGPIO>

	TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 8000e0e:	4b73      	ldr	r3, [pc, #460]	; (8000fdc <main+0x2cc>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a72      	ldr	r2, [pc, #456]	; (8000fdc <main+0x2cc>)
 8000e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e18:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; // 110 - PWM 1
 8000e1a:	4b70      	ldr	r3, [pc, #448]	; (8000fdc <main+0x2cc>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a6f      	ldr	r2, [pc, #444]	; (8000fdc <main+0x2cc>)
 8000e20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e24:	61d3      	str	r3, [r2, #28]
	TIM1->CCER |= TIM_CCER_CC3NE; // povol komplementarni vystup
 8000e26:	4b6d      	ldr	r3, [pc, #436]	; (8000fdc <main+0x2cc>)
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4a6c      	ldr	r2, [pc, #432]	; (8000fdc <main+0x2cc>)
 8000e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e30:	6213      	str	r3, [r2, #32]
	TIM1->CCR3 = TIM1->ARR / 2;
 8000e32:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <main+0x2cc>)
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	4a69      	ldr	r2, [pc, #420]	; (8000fdc <main+0x2cc>)
 8000e38:	085b      	lsrs	r3, r3, #1
 8000e3a:	63d3      	str	r3, [r2, #60]	; 0x3c

	STM_SetPinGPIO(RGB_GREEN, ioPortAlternatePP);
 8000e3c:	2206      	movs	r2, #6
 8000e3e:	210e      	movs	r1, #14
 8000e40:	4868      	ldr	r0, [pc, #416]	; (8000fe4 <main+0x2d4>)
 8000e42:	f000 f9a7 	bl	8001194 <STM_SetPinGPIO>
	STM_SetAFGPIO(RGB_GREEN, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	210e      	movs	r1, #14
 8000e4a:	4866      	ldr	r0, [pc, #408]	; (8000fe4 <main+0x2d4>)
 8000e4c:	f000 faec 	bl	8001428 <STM_SetAFGPIO>

	TIM1->CCMR1 &= ~TIM_CCMR1_OC2M;
 8000e50:	4b62      	ldr	r3, [pc, #392]	; (8000fdc <main+0x2cc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a61      	ldr	r2, [pc, #388]	; (8000fdc <main+0x2cc>)
 8000e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e5a:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; // 110 - PWM 1
 8000e5c:	4b5f      	ldr	r3, [pc, #380]	; (8000fdc <main+0x2cc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a5e      	ldr	r2, [pc, #376]	; (8000fdc <main+0x2cc>)
 8000e62:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000e66:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= TIM_CCER_CC2NE; // povol komplementarni vystup
 8000e68:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <main+0x2cc>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <main+0x2cc>)
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e72:	6213      	str	r3, [r2, #32]
	TIM1->CCR2 = 0; //TIM1->ARR / 2;
 8000e74:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <main+0x2cc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38

	STM_SetPinGPIO(BTN_LEFT, ioPortInputFloat);
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	4859      	ldr	r0, [pc, #356]	; (8000fe4 <main+0x2d4>)
 8000e80:	f000 f988 	bl	8001194 <STM_SetPinGPIO>
	STM_SetPinGPIO(BTN_RIGHT, ioPortInputFloat);
 8000e84:	2203      	movs	r2, #3
 8000e86:	2104      	movs	r1, #4
 8000e88:	4856      	ldr	r0, [pc, #344]	; (8000fe4 <main+0x2d4>)
 8000e8a:	f000 f983 	bl	8001194 <STM_SetPinGPIO>




	// Nastaveni timeru TIM3
	if (!(RCC->APB1ENR & RCC_APB1ENR_TIM3EN))
 8000e8e:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <main+0x2c8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d111      	bne.n	8000ebe <main+0x1ae>
	{
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000e9a:	4b4f      	ldr	r3, [pc, #316]	; (8000fd8 <main+0x2c8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <main+0x2c8>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM3RST;
 8000ea6:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <main+0x2c8>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <main+0x2c8>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST;
 8000eb2:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <main+0x2c8>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <main+0x2c8>)
 8000eb8:	f023 0302 	bic.w	r3, r3, #2
 8000ebc:	6213      	str	r3, [r2, #32]
	}

	TIM3->CR1 = TIM_CR1_DIR; // DIR = 1 = cnt-down, ostatni v 0
 8000ebe:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <main+0x2d8>)
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	601a      	str	r2, [r3, #0]
	TIM3->CR2 = 0;
 8000ec4:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <main+0x2d8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]

	//TIM3->PSC = SystemCoreClock / 1000 - 1; // 1ms = 1kHz
	//TIM3->ARR = 99; // (100 - 1) - tj. 10Hz, 100ms
	TIM3->PSC = SystemCoreClock / 1e6 - 1; // 1us = 1MHz na vstupu casovace
 8000eca:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <main+0x2c0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fac4 	bl	800045c <__aeabi_ui2d>
 8000ed4:	a33c      	add	r3, pc, #240	; (adr r3, 8000fc8 <main+0x2b8>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fc63 	bl	80007a4 <__aeabi_ddiv>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <main+0x2d0>)
 8000eec:	f7ff f978 	bl	80001e0 <__aeabi_dsub>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4c3c      	ldr	r4, [pc, #240]	; (8000fe8 <main+0x2d8>)
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd3b 	bl	8000974 <__aeabi_d2uiz>
 8000efe:	4603      	mov	r3, r0
 8000f00:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM3->ARR = 1000-1; // (1000 - 1) - tj. 1ms
 8000f02:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <main+0x2d8>)
 8000f04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c


	TIM3->CR1 |= TIM_CR1_CEN; // CEN = 1 = enable
 8000f0a:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <main+0x2d8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <main+0x2d8>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6013      	str	r3, [r2, #0]

	// Nastaveni NVICu pro vyvolani preruseni
	TIM3->DIER = TIM_DIER_UIE;	// povoleni preruseni na casovaci
 8000f16:	4b34      	ldr	r3, [pc, #208]	; (8000fe8 <main+0x2d8>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM3_IRQn);	// kdyz prijde preruseni, zpracuj to
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fddb 	bl	8000ad8 <__NVIC_EnableIRQ>

	// Nastaveni timeru TIM4
	if (!(RCC->APB1ENR & RCC_APB1ENR_TIM4EN))
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <main+0x2c8>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d111      	bne.n	8000f52 <main+0x242>
	{
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <main+0x2c8>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <main+0x2c8>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM4RST;
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <main+0x2c8>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <main+0x2c8>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM4RST;
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <main+0x2c8>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <main+0x2c8>)
 8000f4c:	f023 0304 	bic.w	r3, r3, #4
 8000f50:	6213      	str	r3, [r2, #32]
	}

	TIM4->CR1 = TIM_CR1_DIR;	// aby cital dolu
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <main+0x2dc>)
 8000f54:	2210      	movs	r2, #16
 8000f56:	601a      	str	r2, [r3, #0]
	TIM4->CR2 = 0;
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <main+0x2dc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]

	TIM4->PSC = SystemCoreClock / 1e3 - 1;	// 1ms = 1kHy
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <main+0x2c0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa7a 	bl	800045c <__aeabi_ui2d>
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <main+0x2e0>)
 8000f6e:	f7ff fc19 	bl	80007a4 <__aeabi_ddiv>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <main+0x2d0>)
 8000f80:	f7ff f92e 	bl	80001e0 <__aeabi_dsub>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4c18      	ldr	r4, [pc, #96]	; (8000fec <main+0x2dc>)
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fcf1 	bl	8000974 <__aeabi_d2uiz>
 8000f92:	4603      	mov	r3, r0
 8000f94:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM4->ARR = 500 - 1;	//500ms
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <main+0x2dc>)
 8000f98:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= TIM_CR1_CEN;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <main+0x2dc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <main+0x2dc>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6013      	str	r3, [r2, #0]

	TIM4->DIER = TIM_DIER_UIE;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <main+0x2dc>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM4_IRQn);
 8000fb0:	201e      	movs	r0, #30
 8000fb2:	f7ff fd91 	bl	8000ad8 <__NVIC_EnableIRQ>

	STM_SetPinGPIO(GPIOB, 0, ioPortOutputPP);	// Nastaveni pipaku
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <main+0x2d4>)
 8000fbc:	f000 f8ea 	bl	8001194 <STM_SetPinGPIO>
	//uint32_t tm2 = 0;

	uint8_t b = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	e016      	b.n	8000ff4 <main+0x2e4>
 8000fc6:	bf00      	nop
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	412e8480 	.word	0x412e8480
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	10624dd3 	.word	0x10624dd3
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	3ff00000 	.word	0x3ff00000
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40000400 	.word	0x40000400
 8000fec:	40000800 	.word	0x40000800
 8000ff0:	408f4000 	.word	0x408f4000
	Usart2Init(38400);
 8000ff4:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8000ff8:	f000 fb06 	bl	8001608 <Usart2Init>
	char x = '0';
 8000ffc:	2330      	movs	r3, #48	; 0x30
 8000ffe:	71bb      	strb	r3, [r7, #6]
			tim4irq = false;
			GPIOToggle(RGB_BLUE);
		}
		*/
		// Dychani barev, prenos pres USART2 z PC
		if(IsUsart2Recv())
 8001000:	f000 fada 	bl	80015b8 <IsUsart2Recv>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <main+0x302>
		{
			x = getchar();
 800100a:	f000 fcc3 	bl	8001994 <getchar>
 800100e:	4603      	mov	r3, r0
 8001010:	71bb      	strb	r3, [r7, #6]
		}
		if(tim4irq)
 8001012:	4b49      	ldr	r3, [pc, #292]	; (8001138 <main+0x428>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f1      	beq.n	8001000 <main+0x2f0>
		{
			tim4irq = false;
 800101c:	4b46      	ldr	r3, [pc, #280]	; (8001138 <main+0x428>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
			switch (x)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	2b67      	cmp	r3, #103	; 0x67
 8001026:	dc53      	bgt.n	80010d0 <main+0x3c0>
 8001028:	2b42      	cmp	r3, #66	; 0x42
 800102a:	db7a      	blt.n	8001122 <main+0x412>
 800102c:	3b42      	subs	r3, #66	; 0x42
 800102e:	2b25      	cmp	r3, #37	; 0x25
 8001030:	d877      	bhi.n	8001122 <main+0x412>
 8001032:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <main+0x328>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	080010ef 	.word	0x080010ef
 800103c:	08001123 	.word	0x08001123
 8001040:	08001123 	.word	0x08001123
 8001044:	08001123 	.word	0x08001123
 8001048:	08001123 	.word	0x08001123
 800104c:	08001109 	.word	0x08001109
 8001050:	08001123 	.word	0x08001123
 8001054:	08001123 	.word	0x08001123
 8001058:	08001123 	.word	0x08001123
 800105c:	08001123 	.word	0x08001123
 8001060:	08001123 	.word	0x08001123
 8001064:	08001123 	.word	0x08001123
 8001068:	08001123 	.word	0x08001123
 800106c:	08001123 	.word	0x08001123
 8001070:	08001123 	.word	0x08001123
 8001074:	08001123 	.word	0x08001123
 8001078:	080010d5 	.word	0x080010d5
 800107c:	08001123 	.word	0x08001123
 8001080:	08001123 	.word	0x08001123
 8001084:	08001123 	.word	0x08001123
 8001088:	08001123 	.word	0x08001123
 800108c:	08001123 	.word	0x08001123
 8001090:	08001123 	.word	0x08001123
 8001094:	08001123 	.word	0x08001123
 8001098:	08001123 	.word	0x08001123
 800109c:	08001123 	.word	0x08001123
 80010a0:	08001123 	.word	0x08001123
 80010a4:	08001123 	.word	0x08001123
 80010a8:	08001123 	.word	0x08001123
 80010ac:	08001123 	.word	0x08001123
 80010b0:	08001123 	.word	0x08001123
 80010b4:	08001123 	.word	0x08001123
 80010b8:	080010ef 	.word	0x080010ef
 80010bc:	08001123 	.word	0x08001123
 80010c0:	08001123 	.word	0x08001123
 80010c4:	08001123 	.word	0x08001123
 80010c8:	08001123 	.word	0x08001123
 80010cc:	08001109 	.word	0x08001109
 80010d0:	2b72      	cmp	r3, #114	; 0x72
 80010d2:	d126      	bne.n	8001122 <main+0x412>
			{
			case 'r':
			case 'R':
				b+=4;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3304      	adds	r3, #4
 80010d8:	71fb      	strb	r3, [r7, #7]
				TIM1->CCR3 = b;
 80010da:	4a18      	ldr	r2, [pc, #96]	; (800113c <main+0x42c>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	63d3      	str	r3, [r2, #60]	; 0x3c
				TIM1->CCR1 = 0;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <main+0x42c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <main+0x42c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80010ec:	e022      	b.n	8001134 <main+0x424>
			case 'b':
			case 'B':
				b+=4;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	3304      	adds	r3, #4
 80010f2:	71fb      	strb	r3, [r7, #7]
				TIM1->CCR1 = b;
 80010f4:	4a11      	ldr	r2, [pc, #68]	; (800113c <main+0x42c>)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	6353      	str	r3, [r2, #52]	; 0x34
				TIM1->CCR3 = 0;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <main+0x42c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR2 = 0;
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <main+0x42c>)
 8001102:	2200      	movs	r2, #0
 8001104:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001106:	e015      	b.n	8001134 <main+0x424>
			case 'g':
			case 'G':
				b+=4;
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3304      	adds	r3, #4
 800110c:	71fb      	strb	r3, [r7, #7]
				TIM1->CCR2 = b;
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <main+0x42c>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	6393      	str	r3, [r2, #56]	; 0x38
				TIM1->CCR1 = 0;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <main+0x42c>)
 8001116:	2200      	movs	r2, #0
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR3 = 0;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <main+0x42c>)
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001120:	e008      	b.n	8001134 <main+0x424>
			default:
				TIM1->CCR1 = 0;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <main+0x42c>)
 8001124:	2200      	movs	r2, #0
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <main+0x42c>)
 800112a:	2200      	movs	r2, #0
 800112c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800112e:	4b03      	ldr	r3, [pc, #12]	; (800113c <main+0x42c>)
 8001130:	2200      	movs	r2, #0
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
		if(IsUsart2Recv())
 8001134:	e764      	b.n	8001000 <main+0x2f0>
 8001136:	bf00      	nop
 8001138:	20000081 	.word	0x20000081
 800113c:	40010000 	.word	0x40010000

08001140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001142:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001144:	f7ff fc36 	bl	80009b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <LoopForever+0x6>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	; (8001180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <LoopForever+0xe>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <LoopForever+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800116e:	f000 fd5f 	bl	8001c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f7ff fdcd 	bl	8000d10 <main>

08001176 <LoopForever>:

LoopForever:
  b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   r0, =_estack
 8001178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001184:	080022c8 	.word	0x080022c8
  ldr r2, =_sbss
 8001188:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800118c:	200001e4 	.word	0x200001e4

08001190 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <STM_SetPinGPIO>:
#include "stm_core.h"

bool STM_SetPinGPIO(GPIO_TypeDef *pgpio, uint32_t bitnum, eIoPortModes mode)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	4613      	mov	r3, r2
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint32_t enr_mask = 0; // hodnota do xxENR registru
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
	uint32_t rstr_mask = 0; // hodnota do xxRSTR registru
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
	switch((uint32_t)pgpio) // detekce, ktery GPIO
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4a97      	ldr	r2, [pc, #604]	; (800140c <STM_SetPinGPIO+0x278>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d034      	beq.n	800121c <STM_SetPinGPIO+0x88>
 80011b2:	4a96      	ldr	r2, [pc, #600]	; (800140c <STM_SetPinGPIO+0x278>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d836      	bhi.n	8001226 <STM_SetPinGPIO+0x92>
 80011b8:	4a95      	ldr	r2, [pc, #596]	; (8001410 <STM_SetPinGPIO+0x27c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d029      	beq.n	8001212 <STM_SetPinGPIO+0x7e>
 80011be:	4a94      	ldr	r2, [pc, #592]	; (8001410 <STM_SetPinGPIO+0x27c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d830      	bhi.n	8001226 <STM_SetPinGPIO+0x92>
 80011c4:	4a93      	ldr	r2, [pc, #588]	; (8001414 <STM_SetPinGPIO+0x280>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01e      	beq.n	8001208 <STM_SetPinGPIO+0x74>
 80011ca:	4a92      	ldr	r2, [pc, #584]	; (8001414 <STM_SetPinGPIO+0x280>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d82a      	bhi.n	8001226 <STM_SetPinGPIO+0x92>
 80011d0:	4a91      	ldr	r2, [pc, #580]	; (8001418 <STM_SetPinGPIO+0x284>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <STM_SetPinGPIO+0x6a>
 80011d6:	4a90      	ldr	r2, [pc, #576]	; (8001418 <STM_SetPinGPIO+0x284>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d824      	bhi.n	8001226 <STM_SetPinGPIO+0x92>
 80011dc:	4a8f      	ldr	r2, [pc, #572]	; (800141c <STM_SetPinGPIO+0x288>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d003      	beq.n	80011ea <STM_SetPinGPIO+0x56>
 80011e2:	4a8f      	ldr	r2, [pc, #572]	; (8001420 <STM_SetPinGPIO+0x28c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d005      	beq.n	80011f4 <STM_SetPinGPIO+0x60>
 80011e8:	e01d      	b.n	8001226 <STM_SetPinGPIO+0x92>
	{
		case (uint32_t)GPIOA:
				enr_mask = RCC_AHB1ENR_GPIOAEN;
 80011ea:	2301      	movs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOARST;
 80011ee:	2301      	movs	r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
			break;
 80011f2:	e018      	b.n	8001226 <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOB:
				enr_mask = RCC_AHB1ENR_GPIOBEN;
 80011f4:	2302      	movs	r3, #2
 80011f6:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
			break;
 80011fc:	e013      	b.n	8001226 <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOC:
				enr_mask = RCC_AHB1ENR_GPIOCEN;
 80011fe:	2304      	movs	r3, #4
 8001200:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 8001202:	2304      	movs	r3, #4
 8001204:	613b      	str	r3, [r7, #16]
			break;
 8001206:	e00e      	b.n	8001226 <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOD:
				enr_mask = RCC_AHB1ENR_GPIODEN;
 8001208:	2308      	movs	r3, #8
 800120a:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIODRST;
 800120c:	2308      	movs	r3, #8
 800120e:	613b      	str	r3, [r7, #16]
			break;
 8001210:	e009      	b.n	8001226 <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOE:
				enr_mask = RCC_AHB1ENR_GPIOEEN;
 8001212:	2310      	movs	r3, #16
 8001214:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOERST;
 8001216:	2310      	movs	r3, #16
 8001218:	613b      	str	r3, [r7, #16]
			break;
 800121a:	e004      	b.n	8001226 <STM_SetPinGPIO+0x92>
			rstr_mask = RCC_AHB1RSTR_GPIOGRST;
			break;
	#endif

		case (uint32_t)GPIOH:
				enr_mask = RCC_AHB1ENR_GPIOHEN;
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	617b      	str	r3, [r7, #20]
				rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	613b      	str	r3, [r7, #16]
				break;
 8001224:	bf00      	nop
	}


	if ((enr_mask == 0) || (rstr_mask == 0)) // nevybran GPIO
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <STM_SetPinGPIO+0x9e>
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <STM_SetPinGPIO+0xa2>
	return false; // vrat priznak chyby
 8001232:	2300      	movs	r3, #0
 8001234:	e0e4      	b.n	8001400 <STM_SetPinGPIO+0x26c>

	if (!(RCC->AHB1ENR & enr_mask)) // inicializace vybraneho
 8001236:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <STM_SetPinGPIO+0x290>)
 8001238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d112      	bne.n	8001268 <STM_SetPinGPIO+0xd4>
	{
	RCC->AHB1ENR |= enr_mask; // povolit hodiny periferie
 8001242:	4b78      	ldr	r3, [pc, #480]	; (8001424 <STM_SetPinGPIO+0x290>)
 8001244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001246:	4977      	ldr	r1, [pc, #476]	; (8001424 <STM_SetPinGPIO+0x290>)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	4313      	orrs	r3, r2
 800124c:	630b      	str	r3, [r1, #48]	; 0x30
	RCC->AHB1RSTR |= rstr_mask; // proved reset periferie
 800124e:	4b75      	ldr	r3, [pc, #468]	; (8001424 <STM_SetPinGPIO+0x290>)
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	4974      	ldr	r1, [pc, #464]	; (8001424 <STM_SetPinGPIO+0x290>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	610b      	str	r3, [r1, #16]
	RCC->AHB1RSTR &= ~rstr_mask; // a konec resetu
 800125a:	4b72      	ldr	r3, [pc, #456]	; (8001424 <STM_SetPinGPIO+0x290>)
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	4970      	ldr	r1, [pc, #448]	; (8001424 <STM_SetPinGPIO+0x290>)
 8001264:	4013      	ands	r3, r2
 8001266:	610b      	str	r3, [r1, #16]
	}
	// pokracovani inicializace konkretniho vystupu

	// nastaveni registru podle typu vystupu/vstupu
	switch(mode)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b07      	cmp	r3, #7
 800126c:	f200 80c5 	bhi.w	80013fa <STM_SetPinGPIO+0x266>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <STM_SetPinGPIO+0xe4>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001299 	.word	0x08001299
 800127c:	08001299 	.word	0x08001299
 8001280:	08001377 	.word	0x08001377
 8001284:	0800135f 	.word	0x0800135f
 8001288:	08001307 	.word	0x08001307
 800128c:	08001333 	.word	0x08001333
 8001290:	0800138d 	.word	0x0800138d
 8001294:	0800138d 	.word	0x0800138d
	{
		case ioPortOutputOC:
		case ioPortOutputPP:
			pgpio->MODER |= 0x01 << (2 * bitnum); // 01 = output
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	0052      	lsls	r2, r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	431a      	orrs	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	601a      	str	r2, [r3, #0]
			pgpio->OSPEEDR |= 0x03 << (2 * bitnum); // 11 = high speed
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	0052      	lsls	r2, r2, #1
 80012b4:	2103      	movs	r1, #3
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	431a      	orrs	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	609a      	str	r2, [r3, #8]
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pu/pd
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	0052      	lsls	r2, r2, #1
 80012c8:	2103      	movs	r1, #3
 80012ca:	fa01 f202 	lsl.w	r2, r1, r2
 80012ce:	43d2      	mvns	r2, r2
 80012d0:	401a      	ands	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	60da      	str	r2, [r3, #12]
			if (mode == ioPortOutputOC) // open collector (drain) ?
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d109      	bne.n	80012f0 <STM_SetPinGPIO+0x15c>
				pgpio->OTYPER |= 0x01 << bitnum; // 1 = OC/Open drain
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2101      	movs	r1, #1
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	431a      	orrs	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	605a      	str	r2, [r3, #4]
			else
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
			break;
 80012ee:	e086      	b.n	80013fe <STM_SetPinGPIO+0x26a>
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2101      	movs	r1, #1
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	43d2      	mvns	r2, r2
 80012fe:	401a      	ands	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
			break;
 8001304:	e07b      	b.n	80013fe <STM_SetPinGPIO+0x26a>
		case ioPortInputPU: // moder bits 00 = input
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // clear bits
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	0052      	lsls	r2, r2, #1
 800130e:	2103      	movs	r1, #3
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	43d2      	mvns	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	60da      	str	r2, [r3, #12]
			pgpio->PUPDR |= 0x01 << (2 * bitnum); // 01 = pull-up
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	0052      	lsls	r2, r2, #1
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	431a      	orrs	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	60da      	str	r2, [r3, #12]
			break;
 8001330:	e065      	b.n	80013fe <STM_SetPinGPIO+0x26a>
		case ioPortInputPD:
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // clear bits
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	0052      	lsls	r2, r2, #1
 800133a:	2103      	movs	r1, #3
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	43d2      	mvns	r2, r2
 8001342:	401a      	ands	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	60da      	str	r2, [r3, #12]
			pgpio->PUPDR |= 0x02 << (2 * bitnum); // 10 = pull-down
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	0052      	lsls	r2, r2, #1
 8001350:	2102      	movs	r1, #2
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	431a      	orrs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	60da      	str	r2, [r3, #12]
			break;
 800135c:	e04f      	b.n	80013fe <STM_SetPinGPIO+0x26a>
		case ioPortInputFloat: // 00 = input mode, nothing to do
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/dn
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	0052      	lsls	r2, r2, #1
 8001366:	2103      	movs	r1, #3
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	43d2      	mvns	r2, r2
 800136e:	401a      	ands	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	60da      	str	r2, [r3, #12]
			break;
 8001374:	e043      	b.n	80013fe <STM_SetPinGPIO+0x26a>
		case ioPortAnalog:
			pgpio->MODER |= 0x03 << (2 * bitnum); // 11 - analog mode
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	0052      	lsls	r2, r2, #1
 800137e:	2103      	movs	r1, #3
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	601a      	str	r2, [r3, #0]
			break;
 800138a:	e038      	b.n	80013fe <STM_SetPinGPIO+0x26a>
	// other modes
	// Alternative modes
		case ioPortAlternatePP:
		case ioPortAlternateOC:
			pgpio->MODER |= 0x02 << (2 * bitnum); // set bits
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	0052      	lsls	r2, r2, #1
 8001394:	2102      	movs	r1, #2
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	431a      	orrs	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	601a      	str	r2, [r3, #0]
			if (mode == ioPortAlternateOC)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b07      	cmp	r3, #7
 80013a4:	d109      	bne.n	80013ba <STM_SetPinGPIO+0x226>
				pgpio->OTYPER |= 0x01 << bitnum; // 1 = open-drain
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2101      	movs	r1, #1
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	fa01 f202 	lsl.w	r2, r1, r2
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	e009      	b.n	80013ce <STM_SetPinGPIO+0x23a>
			else
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2101      	movs	r1, #1
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	43d2      	mvns	r2, r2
 80013c8:	401a      	ands	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	605a      	str	r2, [r3, #4]
			pgpio->OSPEEDR |= 0x03 << (2 * bitnum); // high-speed = 11
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	2103      	movs	r1, #3
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	431a      	orrs	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	609a      	str	r2, [r3, #8]
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/pull-down
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	0052      	lsls	r2, r2, #1
 80013ea:	2103      	movs	r1, #3
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	43d2      	mvns	r2, r2
 80013f2:	401a      	ands	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	60da      	str	r2, [r3, #12]
	// don't forget set AFR registers !!!
			break;
 80013f8:	e001      	b.n	80013fe <STM_SetPinGPIO+0x26a>
		default: // unknown mode ?
			return false; // return "fail"
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <STM_SetPinGPIO+0x26c>
	}
	return true; // return "OK"
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40021c00 	.word	0x40021c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40020800 	.word	0x40020800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	40023800 	.word	0x40023800

08001428 <STM_SetAFGPIO>:

bool STM_SetAFGPIO(GPIO_TypeDef *pgpio, uint32_t bitnum, uint32_t afValue)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
pgpio->AFR[(bitnum < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitnum & 0x07))); // vynuluj AF bity
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b07      	cmp	r3, #7
 8001438:	bf8c      	ite	hi
 800143a:	2301      	movhi	r3, #1
 800143c:	2300      	movls	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3208      	adds	r2, #8
 8001446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f002 0207 	and.w	r2, r2, #7
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	210f      	movs	r1, #15
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	43d2      	mvns	r2, r2
 800145a:	4611      	mov	r1, r2
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	2a07      	cmp	r2, #7
 8001460:	bf8c      	ite	hi
 8001462:	2201      	movhi	r2, #1
 8001464:	2200      	movls	r2, #0
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	4019      	ands	r1, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3208      	adds	r2, #8
 800146e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
pgpio->AFR[(bitnum < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitnum & 0x07))); // nastav AF bity
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b07      	cmp	r3, #7
 8001476:	bf8c      	ite	hi
 8001478:	2301      	movhi	r3, #1
 800147a:	2300      	movls	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3208      	adds	r2, #8
 8001484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 010f 	and.w	r1, r3, #15
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	2907      	cmp	r1, #7
 800149e:	bf8c      	ite	hi
 80014a0:	2101      	movhi	r1, #1
 80014a2:	2100      	movls	r1, #0
 80014a4:	b2c9      	uxtb	r1, r1
 80014a6:	4608      	mov	r0, r1
 80014a8:	ea42 0103 	orr.w	r1, r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f100 0208 	add.w	r2, r0, #8
 80014b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
return true;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <GPIOWrite>:

void GPIOWrite(GPIO_TypeDef *pgpio, uint32_t bitnum, bool state)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4613      	mov	r3, r2
 80014d0:	71fb      	strb	r3, [r7, #7]
	if (state==true)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <GPIOWrite+0x28>
		pgpio->ODR |= (state << bitnum);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	79f9      	ldrb	r1, [r7, #7]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	fa01 f202 	lsl.w	r2, r1, r2
 80014e4:	431a      	orrs	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	615a      	str	r2, [r3, #20]
	else
		pgpio->ODR &= ~(1 << bitnum);
}
 80014ea:	e009      	b.n	8001500 <GPIOWrite+0x3c>
		pgpio->ODR &= ~(1 << bitnum);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	2101      	movs	r1, #1
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	43d2      	mvns	r2, r2
 80014fa:	401a      	ands	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	615a      	str	r2, [r3, #20]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <GPIOToggle>:

void GPIOToggle(GPIO_TypeDef *pgpio, uint32_t bitnum)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	if (pgpio->ODR & 1 << bitnum)
		pgpio->ODR &= ~(1 << bitnum);
	else
		pgpio->ODR |= 1 << bitnum;
#elif TOGGLE_MODE == 2
	pgpio->ODR ^= 1 << bitnum;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2101      	movs	r1, #1
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	405a      	eors	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	615a      	str	r2, [r3, #20]
#elif TOGGLE_MODE == 3
#else
#error TOGGLE_MODE not set
#endif
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <GPIORead>:

bool GPIORead(GPIO_TypeDef *pgpio, uint32_t bitnum)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	return !(pgpio->IDR &(1<<bitnum));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2101      	movs	r1, #1
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <Usart2Send>:
#include "stm_usart.h"


int Usart2Send(char c)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
while(!(USART2->SR & USART_SR_TXE))
 800156e:	bf00      	nop
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <Usart2Send+0x2c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f9      	beq.n	8001570 <Usart2Send+0xc>
; // cekej dokud neni volny TDR
USART2->DR = c; // zapis do TDR k odeslani
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <Usart2Send+0x2c>)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	6053      	str	r3, [r2, #4]
return c;
 8001582:	79fb      	ldrb	r3, [r7, #7]
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40004400 	.word	0x40004400

08001594 <Usart2Recv>:

int Usart2Recv(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
while(!(USART2->SR & USART_SR_RXNE)) // cekej dokud neprijde
 8001598:	bf00      	nop
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <Usart2Recv+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f9      	beq.n	800159a <Usart2Recv+0x6>
;
return USART2->DR; // vycti a vrat jako hodnotu
 80015a6:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <Usart2Recv+0x20>)
 80015a8:	685b      	ldr	r3, [r3, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40004400 	.word	0x40004400

080015b8 <IsUsart2Recv>:

bool IsUsart2Recv(void) // priznak, ze je neco v bufferu
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
return (USART2->SR & USART_SR_RXNE) != 0;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <IsUsart2Recv+0x20>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf14      	ite	ne
 80015c8:	2301      	movne	r3, #1
 80015ca:	2300      	moveq	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
// podminka vynuti true/false vysledek
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40004400 	.word	0x40004400

080015dc <__io_putchar>:

// addon for CubeIDE with new structure of syscalls.c
int __io_putchar(int ch) { return Usart2Send(ch); }
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ffbb 	bl	8001564 <Usart2Send>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <__io_getchar>:
int __io_getchar(void) { return Usart2Recv(); }
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	f7ff ffca 	bl	8001594 <Usart2Recv>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <Usart2Init>:
txt++;
}
}

void Usart2Init(int baudSpeed)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	STM_SetPinGPIO(GPIOA, 2, ioPortAlternatePP); // USART2 Tx
 8001610:	2206      	movs	r2, #6
 8001612:	2102      	movs	r1, #2
 8001614:	4828      	ldr	r0, [pc, #160]	; (80016b8 <Usart2Init+0xb0>)
 8001616:	f7ff fdbd 	bl	8001194 <STM_SetPinGPIO>
		STM_SetAFGPIO(GPIOA, 2, 7); // AF = 07
 800161a:	2207      	movs	r2, #7
 800161c:	2102      	movs	r1, #2
 800161e:	4826      	ldr	r0, [pc, #152]	; (80016b8 <Usart2Init+0xb0>)
 8001620:	f7ff ff02 	bl	8001428 <STM_SetAFGPIO>
		STM_SetPinGPIO(GPIOA, 3, ioPortAlternatePP); // USART2 Rx
 8001624:	2206      	movs	r2, #6
 8001626:	2103      	movs	r1, #3
 8001628:	4823      	ldr	r0, [pc, #140]	; (80016b8 <Usart2Init+0xb0>)
 800162a:	f7ff fdb3 	bl	8001194 <STM_SetPinGPIO>
		STM_SetAFGPIO(GPIOA, 3, 7); // AF = 07
 800162e:	2207      	movs	r2, #7
 8001630:	2103      	movs	r1, #3
 8001632:	4821      	ldr	r0, [pc, #132]	; (80016b8 <Usart2Init+0xb0>)
 8001634:	f7ff fef8 	bl	8001428 <STM_SetAFGPIO>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) // neni povolen USART2
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <Usart2Init+0xb4>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <Usart2Init+0x60>
		{
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <Usart2Init+0xb4>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <Usart2Init+0xb4>)
 800164a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <Usart2Init+0xb4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <Usart2Init+0xb4>)
 8001656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165a:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <Usart2Init+0xb4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a16      	ldr	r2, [pc, #88]	; (80016bc <Usart2Init+0xb4>)
 8001662:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001666:	6213      	str	r3, [r2, #32]
		}
		USART2->CR1 = USART_CR1_RE | USART_CR1_TE; // potreba povoleni prijmu a vysilani
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <Usart2Init+0xb8>)
 800166a:	220c      	movs	r2, #12
 800166c:	60da      	str	r2, [r3, #12]
		USART2->CR2 = 0; // nic specialniho
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <Usart2Init+0xb8>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
		USART2->CR3 = 0; // nic specialniho
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <Usart2Init+0xb8>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
		//TODO doplnit vypocet BRR podle pozadovaneho a podle clocku
		USART2->BRR = 0x1A1; // rychlost 38400 pri 16MHz - spocitano predem
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <Usart2Init+0xb8>)
 800167c:	f240 12a1 	movw	r2, #417	; 0x1a1
 8001680:	609a      	str	r2, [r3, #8]
		USART2->CR1 |= USART_CR1_UE; // az na zaver povolen blok USARTu
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <Usart2Init+0xb8>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <Usart2Init+0xb8>)
 8001688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800168c:	60d3      	str	r3, [r2, #12]

		// zrusit bufferovani vystupu i vstupu
		setvbuf(stdout, NULL, _IONBF, 0);
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <Usart2Init+0xbc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6898      	ldr	r0, [r3, #8]
 8001694:	2300      	movs	r3, #0
 8001696:	2202      	movs	r2, #2
 8001698:	2100      	movs	r1, #0
 800169a:	f000 f983 	bl	80019a4 <setvbuf>
		setvbuf(stdin, NULL, _IONBF, 0);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <Usart2Init+0xbc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6858      	ldr	r0, [r3, #4]
 80016a4:	2300      	movs	r3, #0
 80016a6:	2202      	movs	r2, #2
 80016a8:	2100      	movs	r1, #0
 80016aa:	f000 f97b 	bl	80019a4 <setvbuf>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40004400 	.word	0x40004400
 80016c4:	2000005c 	.word	0x2000005c

080016c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016da:	f7ff ff8d 	bl	80015f8 <__io_getchar>
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
  }

  return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e009      	b.n	8001728 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf1      	blt.n	8001714 <_write+0x12>
  }
  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001762:	605a      	str	r2, [r3, #4]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f000 fa26 	bl	8001c24 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20020000 	.word	0x20020000
 8001804:	00000400 	.word	0x00000400
 8001808:	20000094 	.word	0x20000094
 800180c:	200001e8 	.word	0x200001e8

08001810 <std>:
 8001810:	2300      	movs	r3, #0
 8001812:	b510      	push	{r4, lr}
 8001814:	4604      	mov	r4, r0
 8001816:	e9c0 3300 	strd	r3, r3, [r0]
 800181a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800181e:	6083      	str	r3, [r0, #8]
 8001820:	8181      	strh	r1, [r0, #12]
 8001822:	6643      	str	r3, [r0, #100]	; 0x64
 8001824:	81c2      	strh	r2, [r0, #14]
 8001826:	6183      	str	r3, [r0, #24]
 8001828:	4619      	mov	r1, r3
 800182a:	2208      	movs	r2, #8
 800182c:	305c      	adds	r0, #92	; 0x5c
 800182e:	f000 f9aa 	bl	8001b86 <memset>
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <std+0x58>)
 8001834:	6263      	str	r3, [r4, #36]	; 0x24
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <std+0x5c>)
 8001838:	62a3      	str	r3, [r4, #40]	; 0x28
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <std+0x60>)
 800183c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <std+0x64>)
 8001840:	6323      	str	r3, [r4, #48]	; 0x30
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <std+0x68>)
 8001844:	6224      	str	r4, [r4, #32]
 8001846:	429c      	cmp	r4, r3
 8001848:	d006      	beq.n	8001858 <std+0x48>
 800184a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800184e:	4294      	cmp	r4, r2
 8001850:	d002      	beq.n	8001858 <std+0x48>
 8001852:	33d0      	adds	r3, #208	; 0xd0
 8001854:	429c      	cmp	r4, r3
 8001856:	d105      	bne.n	8001864 <std+0x54>
 8001858:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800185c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001860:	f000 ba0a 	b.w	8001c78 <__retarget_lock_init_recursive>
 8001864:	bd10      	pop	{r4, pc}
 8001866:	bf00      	nop
 8001868:	08001b01 	.word	0x08001b01
 800186c:	08001b23 	.word	0x08001b23
 8001870:	08001b5b 	.word	0x08001b5b
 8001874:	08001b7f 	.word	0x08001b7f
 8001878:	20000098 	.word	0x20000098

0800187c <stdio_exit_handler>:
 800187c:	4a02      	ldr	r2, [pc, #8]	; (8001888 <stdio_exit_handler+0xc>)
 800187e:	4903      	ldr	r1, [pc, #12]	; (800188c <stdio_exit_handler+0x10>)
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <stdio_exit_handler+0x14>)
 8001882:	f000 b869 	b.w	8001958 <_fwalk_sglue>
 8001886:	bf00      	nop
 8001888:	20000004 	.word	0x20000004
 800188c:	08001f8d 	.word	0x08001f8d
 8001890:	20000010 	.word	0x20000010

08001894 <cleanup_stdio>:
 8001894:	6841      	ldr	r1, [r0, #4]
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <cleanup_stdio+0x34>)
 8001898:	4299      	cmp	r1, r3
 800189a:	b510      	push	{r4, lr}
 800189c:	4604      	mov	r4, r0
 800189e:	d001      	beq.n	80018a4 <cleanup_stdio+0x10>
 80018a0:	f000 fb74 	bl	8001f8c <_fflush_r>
 80018a4:	68a1      	ldr	r1, [r4, #8]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <cleanup_stdio+0x38>)
 80018a8:	4299      	cmp	r1, r3
 80018aa:	d002      	beq.n	80018b2 <cleanup_stdio+0x1e>
 80018ac:	4620      	mov	r0, r4
 80018ae:	f000 fb6d 	bl	8001f8c <_fflush_r>
 80018b2:	68e1      	ldr	r1, [r4, #12]
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <cleanup_stdio+0x3c>)
 80018b6:	4299      	cmp	r1, r3
 80018b8:	d004      	beq.n	80018c4 <cleanup_stdio+0x30>
 80018ba:	4620      	mov	r0, r4
 80018bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018c0:	f000 bb64 	b.w	8001f8c <_fflush_r>
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	bf00      	nop
 80018c8:	20000098 	.word	0x20000098
 80018cc:	20000100 	.word	0x20000100
 80018d0:	20000168 	.word	0x20000168

080018d4 <global_stdio_init.part.0>:
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <global_stdio_init.part.0+0x30>)
 80018d8:	4c0b      	ldr	r4, [pc, #44]	; (8001908 <global_stdio_init.part.0+0x34>)
 80018da:	4a0c      	ldr	r2, [pc, #48]	; (800190c <global_stdio_init.part.0+0x38>)
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4620      	mov	r0, r4
 80018e0:	2200      	movs	r2, #0
 80018e2:	2104      	movs	r1, #4
 80018e4:	f7ff ff94 	bl	8001810 <std>
 80018e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80018ec:	2201      	movs	r2, #1
 80018ee:	2109      	movs	r1, #9
 80018f0:	f7ff ff8e 	bl	8001810 <std>
 80018f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80018f8:	2202      	movs	r2, #2
 80018fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018fe:	2112      	movs	r1, #18
 8001900:	f7ff bf86 	b.w	8001810 <std>
 8001904:	200001d0 	.word	0x200001d0
 8001908:	20000098 	.word	0x20000098
 800190c:	0800187d 	.word	0x0800187d

08001910 <__sfp_lock_acquire>:
 8001910:	4801      	ldr	r0, [pc, #4]	; (8001918 <__sfp_lock_acquire+0x8>)
 8001912:	f000 b9b2 	b.w	8001c7a <__retarget_lock_acquire_recursive>
 8001916:	bf00      	nop
 8001918:	200001d9 	.word	0x200001d9

0800191c <__sfp_lock_release>:
 800191c:	4801      	ldr	r0, [pc, #4]	; (8001924 <__sfp_lock_release+0x8>)
 800191e:	f000 b9ad 	b.w	8001c7c <__retarget_lock_release_recursive>
 8001922:	bf00      	nop
 8001924:	200001d9 	.word	0x200001d9

08001928 <__sinit>:
 8001928:	b510      	push	{r4, lr}
 800192a:	4604      	mov	r4, r0
 800192c:	f7ff fff0 	bl	8001910 <__sfp_lock_acquire>
 8001930:	6a23      	ldr	r3, [r4, #32]
 8001932:	b11b      	cbz	r3, 800193c <__sinit+0x14>
 8001934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001938:	f7ff bff0 	b.w	800191c <__sfp_lock_release>
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__sinit+0x28>)
 800193e:	6223      	str	r3, [r4, #32]
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__sinit+0x2c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f5      	bne.n	8001934 <__sinit+0xc>
 8001948:	f7ff ffc4 	bl	80018d4 <global_stdio_init.part.0>
 800194c:	e7f2      	b.n	8001934 <__sinit+0xc>
 800194e:	bf00      	nop
 8001950:	08001895 	.word	0x08001895
 8001954:	200001d0 	.word	0x200001d0

08001958 <_fwalk_sglue>:
 8001958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800195c:	4607      	mov	r7, r0
 800195e:	4688      	mov	r8, r1
 8001960:	4614      	mov	r4, r2
 8001962:	2600      	movs	r6, #0
 8001964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001968:	f1b9 0901 	subs.w	r9, r9, #1
 800196c:	d505      	bpl.n	800197a <_fwalk_sglue+0x22>
 800196e:	6824      	ldr	r4, [r4, #0]
 8001970:	2c00      	cmp	r4, #0
 8001972:	d1f7      	bne.n	8001964 <_fwalk_sglue+0xc>
 8001974:	4630      	mov	r0, r6
 8001976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800197a:	89ab      	ldrh	r3, [r5, #12]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d907      	bls.n	8001990 <_fwalk_sglue+0x38>
 8001980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001984:	3301      	adds	r3, #1
 8001986:	d003      	beq.n	8001990 <_fwalk_sglue+0x38>
 8001988:	4629      	mov	r1, r5
 800198a:	4638      	mov	r0, r7
 800198c:	47c0      	blx	r8
 800198e:	4306      	orrs	r6, r0
 8001990:	3568      	adds	r5, #104	; 0x68
 8001992:	e7e9      	b.n	8001968 <_fwalk_sglue+0x10>

08001994 <getchar>:
 8001994:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <getchar+0xc>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	6841      	ldr	r1, [r0, #4]
 800199a:	f000 bb1f 	b.w	8001fdc <_getc_r>
 800199e:	bf00      	nop
 80019a0:	2000005c 	.word	0x2000005c

080019a4 <setvbuf>:
 80019a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80019a8:	461d      	mov	r5, r3
 80019aa:	4b54      	ldr	r3, [pc, #336]	; (8001afc <setvbuf+0x158>)
 80019ac:	681f      	ldr	r7, [r3, #0]
 80019ae:	4604      	mov	r4, r0
 80019b0:	460e      	mov	r6, r1
 80019b2:	4690      	mov	r8, r2
 80019b4:	b127      	cbz	r7, 80019c0 <setvbuf+0x1c>
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	b913      	cbnz	r3, 80019c0 <setvbuf+0x1c>
 80019ba:	4638      	mov	r0, r7
 80019bc:	f7ff ffb4 	bl	8001928 <__sinit>
 80019c0:	f1b8 0f02 	cmp.w	r8, #2
 80019c4:	d006      	beq.n	80019d4 <setvbuf+0x30>
 80019c6:	f1b8 0f01 	cmp.w	r8, #1
 80019ca:	f200 8094 	bhi.w	8001af6 <setvbuf+0x152>
 80019ce:	2d00      	cmp	r5, #0
 80019d0:	f2c0 8091 	blt.w	8001af6 <setvbuf+0x152>
 80019d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019d6:	07da      	lsls	r2, r3, #31
 80019d8:	d405      	bmi.n	80019e6 <setvbuf+0x42>
 80019da:	89a3      	ldrh	r3, [r4, #12]
 80019dc:	059b      	lsls	r3, r3, #22
 80019de:	d402      	bmi.n	80019e6 <setvbuf+0x42>
 80019e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019e2:	f000 f94a 	bl	8001c7a <__retarget_lock_acquire_recursive>
 80019e6:	4621      	mov	r1, r4
 80019e8:	4638      	mov	r0, r7
 80019ea:	f000 facf 	bl	8001f8c <_fflush_r>
 80019ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019f0:	b141      	cbz	r1, 8001a04 <setvbuf+0x60>
 80019f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019f6:	4299      	cmp	r1, r3
 80019f8:	d002      	beq.n	8001a00 <setvbuf+0x5c>
 80019fa:	4638      	mov	r0, r7
 80019fc:	f000 f940 	bl	8001c80 <_free_r>
 8001a00:	2300      	movs	r3, #0
 8001a02:	6363      	str	r3, [r4, #52]	; 0x34
 8001a04:	2300      	movs	r3, #0
 8001a06:	61a3      	str	r3, [r4, #24]
 8001a08:	6063      	str	r3, [r4, #4]
 8001a0a:	89a3      	ldrh	r3, [r4, #12]
 8001a0c:	0618      	lsls	r0, r3, #24
 8001a0e:	d503      	bpl.n	8001a18 <setvbuf+0x74>
 8001a10:	6921      	ldr	r1, [r4, #16]
 8001a12:	4638      	mov	r0, r7
 8001a14:	f000 f934 	bl	8001c80 <_free_r>
 8001a18:	89a3      	ldrh	r3, [r4, #12]
 8001a1a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001a1e:	f023 0303 	bic.w	r3, r3, #3
 8001a22:	f1b8 0f02 	cmp.w	r8, #2
 8001a26:	81a3      	strh	r3, [r4, #12]
 8001a28:	d05f      	beq.n	8001aea <setvbuf+0x146>
 8001a2a:	ab01      	add	r3, sp, #4
 8001a2c:	466a      	mov	r2, sp
 8001a2e:	4621      	mov	r1, r4
 8001a30:	4638      	mov	r0, r7
 8001a32:	f000 fafe 	bl	8002032 <__swhatbuf_r>
 8001a36:	89a3      	ldrh	r3, [r4, #12]
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	81a0      	strh	r0, [r4, #12]
 8001a3c:	bb2d      	cbnz	r5, 8001a8a <setvbuf+0xe6>
 8001a3e:	9d00      	ldr	r5, [sp, #0]
 8001a40:	4628      	mov	r0, r5
 8001a42:	f000 f969 	bl	8001d18 <malloc>
 8001a46:	4606      	mov	r6, r0
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d150      	bne.n	8001aee <setvbuf+0x14a>
 8001a4c:	f8dd 9000 	ldr.w	r9, [sp]
 8001a50:	45a9      	cmp	r9, r5
 8001a52:	d13e      	bne.n	8001ad2 <setvbuf+0x12e>
 8001a54:	f04f 35ff 	mov.w	r5, #4294967295
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60a2      	str	r2, [r4, #8]
 8001a5c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001a60:	6022      	str	r2, [r4, #0]
 8001a62:	6122      	str	r2, [r4, #16]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a6a:	6162      	str	r2, [r4, #20]
 8001a6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	07d1      	lsls	r1, r2, #31
 8001a74:	81a3      	strh	r3, [r4, #12]
 8001a76:	d404      	bmi.n	8001a82 <setvbuf+0xde>
 8001a78:	059b      	lsls	r3, r3, #22
 8001a7a:	d402      	bmi.n	8001a82 <setvbuf+0xde>
 8001a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a7e:	f000 f8fd 	bl	8001c7c <__retarget_lock_release_recursive>
 8001a82:	4628      	mov	r0, r5
 8001a84:	b003      	add	sp, #12
 8001a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a8a:	2e00      	cmp	r6, #0
 8001a8c:	d0d8      	beq.n	8001a40 <setvbuf+0x9c>
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	b913      	cbnz	r3, 8001a98 <setvbuf+0xf4>
 8001a92:	4638      	mov	r0, r7
 8001a94:	f7ff ff48 	bl	8001928 <__sinit>
 8001a98:	f1b8 0f01 	cmp.w	r8, #1
 8001a9c:	bf08      	it	eq
 8001a9e:	89a3      	ldrheq	r3, [r4, #12]
 8001aa0:	6026      	str	r6, [r4, #0]
 8001aa2:	bf04      	itt	eq
 8001aa4:	f043 0301 	orreq.w	r3, r3, #1
 8001aa8:	81a3      	strheq	r3, [r4, #12]
 8001aaa:	89a3      	ldrh	r3, [r4, #12]
 8001aac:	f013 0208 	ands.w	r2, r3, #8
 8001ab0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001ab4:	d01d      	beq.n	8001af2 <setvbuf+0x14e>
 8001ab6:	07da      	lsls	r2, r3, #31
 8001ab8:	bf41      	itttt	mi
 8001aba:	2200      	movmi	r2, #0
 8001abc:	426d      	negmi	r5, r5
 8001abe:	60a2      	strmi	r2, [r4, #8]
 8001ac0:	61a5      	strmi	r5, [r4, #24]
 8001ac2:	bf58      	it	pl
 8001ac4:	60a5      	strpl	r5, [r4, #8]
 8001ac6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001ac8:	f015 0501 	ands.w	r5, r5, #1
 8001acc:	d0d4      	beq.n	8001a78 <setvbuf+0xd4>
 8001ace:	2500      	movs	r5, #0
 8001ad0:	e7d7      	b.n	8001a82 <setvbuf+0xde>
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	f000 f920 	bl	8001d18 <malloc>
 8001ad8:	4606      	mov	r6, r0
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d0ba      	beq.n	8001a54 <setvbuf+0xb0>
 8001ade:	89a3      	ldrh	r3, [r4, #12]
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	81a3      	strh	r3, [r4, #12]
 8001ae6:	464d      	mov	r5, r9
 8001ae8:	e7d1      	b.n	8001a8e <setvbuf+0xea>
 8001aea:	2500      	movs	r5, #0
 8001aec:	e7b4      	b.n	8001a58 <setvbuf+0xb4>
 8001aee:	46a9      	mov	r9, r5
 8001af0:	e7f5      	b.n	8001ade <setvbuf+0x13a>
 8001af2:	60a2      	str	r2, [r4, #8]
 8001af4:	e7e7      	b.n	8001ac6 <setvbuf+0x122>
 8001af6:	f04f 35ff 	mov.w	r5, #4294967295
 8001afa:	e7c2      	b.n	8001a82 <setvbuf+0xde>
 8001afc:	2000005c 	.word	0x2000005c

08001b00 <__sread>:
 8001b00:	b510      	push	{r4, lr}
 8001b02:	460c      	mov	r4, r1
 8001b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b08:	f000 f868 	bl	8001bdc <_read_r>
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	bfab      	itete	ge
 8001b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b12:	89a3      	ldrhlt	r3, [r4, #12]
 8001b14:	181b      	addge	r3, r3, r0
 8001b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b1a:	bfac      	ite	ge
 8001b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b1e:	81a3      	strhlt	r3, [r4, #12]
 8001b20:	bd10      	pop	{r4, pc}

08001b22 <__swrite>:
 8001b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b26:	461f      	mov	r7, r3
 8001b28:	898b      	ldrh	r3, [r1, #12]
 8001b2a:	05db      	lsls	r3, r3, #23
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	4616      	mov	r6, r2
 8001b32:	d505      	bpl.n	8001b40 <__swrite+0x1e>
 8001b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f000 f83c 	bl	8001bb8 <_lseek_r>
 8001b40:	89a3      	ldrh	r3, [r4, #12]
 8001b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b4a:	81a3      	strh	r3, [r4, #12]
 8001b4c:	4632      	mov	r2, r6
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4628      	mov	r0, r5
 8001b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b56:	f000 b853 	b.w	8001c00 <_write_r>

08001b5a <__sseek>:
 8001b5a:	b510      	push	{r4, lr}
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b62:	f000 f829 	bl	8001bb8 <_lseek_r>
 8001b66:	1c43      	adds	r3, r0, #1
 8001b68:	89a3      	ldrh	r3, [r4, #12]
 8001b6a:	bf15      	itete	ne
 8001b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b76:	81a3      	strheq	r3, [r4, #12]
 8001b78:	bf18      	it	ne
 8001b7a:	81a3      	strhne	r3, [r4, #12]
 8001b7c:	bd10      	pop	{r4, pc}

08001b7e <__sclose>:
 8001b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b82:	f000 b809 	b.w	8001b98 <_close_r>

08001b86 <memset>:
 8001b86:	4402      	add	r2, r0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d100      	bne.n	8001b90 <memset+0xa>
 8001b8e:	4770      	bx	lr
 8001b90:	f803 1b01 	strb.w	r1, [r3], #1
 8001b94:	e7f9      	b.n	8001b8a <memset+0x4>
	...

08001b98 <_close_r>:
 8001b98:	b538      	push	{r3, r4, r5, lr}
 8001b9a:	4d06      	ldr	r5, [pc, #24]	; (8001bb4 <_close_r+0x1c>)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	602b      	str	r3, [r5, #0]
 8001ba4:	f7ff fdc9 	bl	800173a <_close>
 8001ba8:	1c43      	adds	r3, r0, #1
 8001baa:	d102      	bne.n	8001bb2 <_close_r+0x1a>
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	b103      	cbz	r3, 8001bb2 <_close_r+0x1a>
 8001bb0:	6023      	str	r3, [r4, #0]
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
 8001bb4:	200001d4 	.word	0x200001d4

08001bb8 <_lseek_r>:
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4d07      	ldr	r5, [pc, #28]	; (8001bd8 <_lseek_r+0x20>)
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	4608      	mov	r0, r1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	602a      	str	r2, [r5, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f7ff fdde 	bl	8001788 <_lseek>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d102      	bne.n	8001bd6 <_lseek_r+0x1e>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	b103      	cbz	r3, 8001bd6 <_lseek_r+0x1e>
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	200001d4 	.word	0x200001d4

08001bdc <_read_r>:
 8001bdc:	b538      	push	{r3, r4, r5, lr}
 8001bde:	4d07      	ldr	r5, [pc, #28]	; (8001bfc <_read_r+0x20>)
 8001be0:	4604      	mov	r4, r0
 8001be2:	4608      	mov	r0, r1
 8001be4:	4611      	mov	r1, r2
 8001be6:	2200      	movs	r2, #0
 8001be8:	602a      	str	r2, [r5, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f7ff fd6c 	bl	80016c8 <_read>
 8001bf0:	1c43      	adds	r3, r0, #1
 8001bf2:	d102      	bne.n	8001bfa <_read_r+0x1e>
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	b103      	cbz	r3, 8001bfa <_read_r+0x1e>
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	bd38      	pop	{r3, r4, r5, pc}
 8001bfc:	200001d4 	.word	0x200001d4

08001c00 <_write_r>:
 8001c00:	b538      	push	{r3, r4, r5, lr}
 8001c02:	4d07      	ldr	r5, [pc, #28]	; (8001c20 <_write_r+0x20>)
 8001c04:	4604      	mov	r4, r0
 8001c06:	4608      	mov	r0, r1
 8001c08:	4611      	mov	r1, r2
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	602a      	str	r2, [r5, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff fd77 	bl	8001702 <_write>
 8001c14:	1c43      	adds	r3, r0, #1
 8001c16:	d102      	bne.n	8001c1e <_write_r+0x1e>
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	b103      	cbz	r3, 8001c1e <_write_r+0x1e>
 8001c1c:	6023      	str	r3, [r4, #0]
 8001c1e:	bd38      	pop	{r3, r4, r5, pc}
 8001c20:	200001d4 	.word	0x200001d4

08001c24 <__errno>:
 8001c24:	4b01      	ldr	r3, [pc, #4]	; (8001c2c <__errno+0x8>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000005c 	.word	0x2000005c

08001c30 <__libc_init_array>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	4d0d      	ldr	r5, [pc, #52]	; (8001c68 <__libc_init_array+0x38>)
 8001c34:	4c0d      	ldr	r4, [pc, #52]	; (8001c6c <__libc_init_array+0x3c>)
 8001c36:	1b64      	subs	r4, r4, r5
 8001c38:	10a4      	asrs	r4, r4, #2
 8001c3a:	2600      	movs	r6, #0
 8001c3c:	42a6      	cmp	r6, r4
 8001c3e:	d109      	bne.n	8001c54 <__libc_init_array+0x24>
 8001c40:	4d0b      	ldr	r5, [pc, #44]	; (8001c70 <__libc_init_array+0x40>)
 8001c42:	4c0c      	ldr	r4, [pc, #48]	; (8001c74 <__libc_init_array+0x44>)
 8001c44:	f000 fb28 	bl	8002298 <_init>
 8001c48:	1b64      	subs	r4, r4, r5
 8001c4a:	10a4      	asrs	r4, r4, #2
 8001c4c:	2600      	movs	r6, #0
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d105      	bne.n	8001c5e <__libc_init_array+0x2e>
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
 8001c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c58:	4798      	blx	r3
 8001c5a:	3601      	adds	r6, #1
 8001c5c:	e7ee      	b.n	8001c3c <__libc_init_array+0xc>
 8001c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c62:	4798      	blx	r3
 8001c64:	3601      	adds	r6, #1
 8001c66:	e7f2      	b.n	8001c4e <__libc_init_array+0x1e>
 8001c68:	080022c0 	.word	0x080022c0
 8001c6c:	080022c0 	.word	0x080022c0
 8001c70:	080022c0 	.word	0x080022c0
 8001c74:	080022c4 	.word	0x080022c4

08001c78 <__retarget_lock_init_recursive>:
 8001c78:	4770      	bx	lr

08001c7a <__retarget_lock_acquire_recursive>:
 8001c7a:	4770      	bx	lr

08001c7c <__retarget_lock_release_recursive>:
 8001c7c:	4770      	bx	lr
	...

08001c80 <_free_r>:
 8001c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c82:	2900      	cmp	r1, #0
 8001c84:	d044      	beq.n	8001d10 <_free_r+0x90>
 8001c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c8a:	9001      	str	r0, [sp, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8001c92:	bfb8      	it	lt
 8001c94:	18e4      	addlt	r4, r4, r3
 8001c96:	f000 f8e7 	bl	8001e68 <__malloc_lock>
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <_free_r+0x94>)
 8001c9c:	9801      	ldr	r0, [sp, #4]
 8001c9e:	6813      	ldr	r3, [r2, #0]
 8001ca0:	b933      	cbnz	r3, 8001cb0 <_free_r+0x30>
 8001ca2:	6063      	str	r3, [r4, #4]
 8001ca4:	6014      	str	r4, [r2, #0]
 8001ca6:	b003      	add	sp, #12
 8001ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001cac:	f000 b8e2 	b.w	8001e74 <__malloc_unlock>
 8001cb0:	42a3      	cmp	r3, r4
 8001cb2:	d908      	bls.n	8001cc6 <_free_r+0x46>
 8001cb4:	6825      	ldr	r5, [r4, #0]
 8001cb6:	1961      	adds	r1, r4, r5
 8001cb8:	428b      	cmp	r3, r1
 8001cba:	bf01      	itttt	eq
 8001cbc:	6819      	ldreq	r1, [r3, #0]
 8001cbe:	685b      	ldreq	r3, [r3, #4]
 8001cc0:	1949      	addeq	r1, r1, r5
 8001cc2:	6021      	streq	r1, [r4, #0]
 8001cc4:	e7ed      	b.n	8001ca2 <_free_r+0x22>
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	b10b      	cbz	r3, 8001cd0 <_free_r+0x50>
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	d9fa      	bls.n	8001cc6 <_free_r+0x46>
 8001cd0:	6811      	ldr	r1, [r2, #0]
 8001cd2:	1855      	adds	r5, r2, r1
 8001cd4:	42a5      	cmp	r5, r4
 8001cd6:	d10b      	bne.n	8001cf0 <_free_r+0x70>
 8001cd8:	6824      	ldr	r4, [r4, #0]
 8001cda:	4421      	add	r1, r4
 8001cdc:	1854      	adds	r4, r2, r1
 8001cde:	42a3      	cmp	r3, r4
 8001ce0:	6011      	str	r1, [r2, #0]
 8001ce2:	d1e0      	bne.n	8001ca6 <_free_r+0x26>
 8001ce4:	681c      	ldr	r4, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	6053      	str	r3, [r2, #4]
 8001cea:	440c      	add	r4, r1
 8001cec:	6014      	str	r4, [r2, #0]
 8001cee:	e7da      	b.n	8001ca6 <_free_r+0x26>
 8001cf0:	d902      	bls.n	8001cf8 <_free_r+0x78>
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	6003      	str	r3, [r0, #0]
 8001cf6:	e7d6      	b.n	8001ca6 <_free_r+0x26>
 8001cf8:	6825      	ldr	r5, [r4, #0]
 8001cfa:	1961      	adds	r1, r4, r5
 8001cfc:	428b      	cmp	r3, r1
 8001cfe:	bf04      	itt	eq
 8001d00:	6819      	ldreq	r1, [r3, #0]
 8001d02:	685b      	ldreq	r3, [r3, #4]
 8001d04:	6063      	str	r3, [r4, #4]
 8001d06:	bf04      	itt	eq
 8001d08:	1949      	addeq	r1, r1, r5
 8001d0a:	6021      	streq	r1, [r4, #0]
 8001d0c:	6054      	str	r4, [r2, #4]
 8001d0e:	e7ca      	b.n	8001ca6 <_free_r+0x26>
 8001d10:	b003      	add	sp, #12
 8001d12:	bd30      	pop	{r4, r5, pc}
 8001d14:	200001dc 	.word	0x200001dc

08001d18 <malloc>:
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <malloc+0xc>)
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	f000 b823 	b.w	8001d68 <_malloc_r>
 8001d22:	bf00      	nop
 8001d24:	2000005c 	.word	0x2000005c

08001d28 <sbrk_aligned>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	4e0e      	ldr	r6, [pc, #56]	; (8001d64 <sbrk_aligned+0x3c>)
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	6831      	ldr	r1, [r6, #0]
 8001d30:	4605      	mov	r5, r0
 8001d32:	b911      	cbnz	r1, 8001d3a <sbrk_aligned+0x12>
 8001d34:	f000 fa1a 	bl	800216c <_sbrk_r>
 8001d38:	6030      	str	r0, [r6, #0]
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f000 fa15 	bl	800216c <_sbrk_r>
 8001d42:	1c43      	adds	r3, r0, #1
 8001d44:	d00a      	beq.n	8001d5c <sbrk_aligned+0x34>
 8001d46:	1cc4      	adds	r4, r0, #3
 8001d48:	f024 0403 	bic.w	r4, r4, #3
 8001d4c:	42a0      	cmp	r0, r4
 8001d4e:	d007      	beq.n	8001d60 <sbrk_aligned+0x38>
 8001d50:	1a21      	subs	r1, r4, r0
 8001d52:	4628      	mov	r0, r5
 8001d54:	f000 fa0a 	bl	800216c <_sbrk_r>
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d101      	bne.n	8001d60 <sbrk_aligned+0x38>
 8001d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8001d60:	4620      	mov	r0, r4
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
 8001d64:	200001e0 	.word	0x200001e0

08001d68 <_malloc_r>:
 8001d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d6c:	1ccd      	adds	r5, r1, #3
 8001d6e:	f025 0503 	bic.w	r5, r5, #3
 8001d72:	3508      	adds	r5, #8
 8001d74:	2d0c      	cmp	r5, #12
 8001d76:	bf38      	it	cc
 8001d78:	250c      	movcc	r5, #12
 8001d7a:	2d00      	cmp	r5, #0
 8001d7c:	4607      	mov	r7, r0
 8001d7e:	db01      	blt.n	8001d84 <_malloc_r+0x1c>
 8001d80:	42a9      	cmp	r1, r5
 8001d82:	d905      	bls.n	8001d90 <_malloc_r+0x28>
 8001d84:	230c      	movs	r3, #12
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	2600      	movs	r6, #0
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001e64 <_malloc_r+0xfc>
 8001d94:	f000 f868 	bl	8001e68 <__malloc_lock>
 8001d98:	f8d8 3000 	ldr.w	r3, [r8]
 8001d9c:	461c      	mov	r4, r3
 8001d9e:	bb5c      	cbnz	r4, 8001df8 <_malloc_r+0x90>
 8001da0:	4629      	mov	r1, r5
 8001da2:	4638      	mov	r0, r7
 8001da4:	f7ff ffc0 	bl	8001d28 <sbrk_aligned>
 8001da8:	1c43      	adds	r3, r0, #1
 8001daa:	4604      	mov	r4, r0
 8001dac:	d155      	bne.n	8001e5a <_malloc_r+0xf2>
 8001dae:	f8d8 4000 	ldr.w	r4, [r8]
 8001db2:	4626      	mov	r6, r4
 8001db4:	2e00      	cmp	r6, #0
 8001db6:	d145      	bne.n	8001e44 <_malloc_r+0xdc>
 8001db8:	2c00      	cmp	r4, #0
 8001dba:	d048      	beq.n	8001e4e <_malloc_r+0xe6>
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	4631      	mov	r1, r6
 8001dc0:	4638      	mov	r0, r7
 8001dc2:	eb04 0903 	add.w	r9, r4, r3
 8001dc6:	f000 f9d1 	bl	800216c <_sbrk_r>
 8001dca:	4581      	cmp	r9, r0
 8001dcc:	d13f      	bne.n	8001e4e <_malloc_r+0xe6>
 8001dce:	6821      	ldr	r1, [r4, #0]
 8001dd0:	1a6d      	subs	r5, r5, r1
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	4638      	mov	r0, r7
 8001dd6:	f7ff ffa7 	bl	8001d28 <sbrk_aligned>
 8001dda:	3001      	adds	r0, #1
 8001ddc:	d037      	beq.n	8001e4e <_malloc_r+0xe6>
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	442b      	add	r3, r5
 8001de2:	6023      	str	r3, [r4, #0]
 8001de4:	f8d8 3000 	ldr.w	r3, [r8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d038      	beq.n	8001e5e <_malloc_r+0xf6>
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	42a2      	cmp	r2, r4
 8001df0:	d12b      	bne.n	8001e4a <_malloc_r+0xe2>
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e00f      	b.n	8001e18 <_malloc_r+0xb0>
 8001df8:	6822      	ldr	r2, [r4, #0]
 8001dfa:	1b52      	subs	r2, r2, r5
 8001dfc:	d41f      	bmi.n	8001e3e <_malloc_r+0xd6>
 8001dfe:	2a0b      	cmp	r2, #11
 8001e00:	d917      	bls.n	8001e32 <_malloc_r+0xca>
 8001e02:	1961      	adds	r1, r4, r5
 8001e04:	42a3      	cmp	r3, r4
 8001e06:	6025      	str	r5, [r4, #0]
 8001e08:	bf18      	it	ne
 8001e0a:	6059      	strne	r1, [r3, #4]
 8001e0c:	6863      	ldr	r3, [r4, #4]
 8001e0e:	bf08      	it	eq
 8001e10:	f8c8 1000 	streq.w	r1, [r8]
 8001e14:	5162      	str	r2, [r4, r5]
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	4638      	mov	r0, r7
 8001e1a:	f104 060b 	add.w	r6, r4, #11
 8001e1e:	f000 f829 	bl	8001e74 <__malloc_unlock>
 8001e22:	f026 0607 	bic.w	r6, r6, #7
 8001e26:	1d23      	adds	r3, r4, #4
 8001e28:	1af2      	subs	r2, r6, r3
 8001e2a:	d0ae      	beq.n	8001d8a <_malloc_r+0x22>
 8001e2c:	1b9b      	subs	r3, r3, r6
 8001e2e:	50a3      	str	r3, [r4, r2]
 8001e30:	e7ab      	b.n	8001d8a <_malloc_r+0x22>
 8001e32:	42a3      	cmp	r3, r4
 8001e34:	6862      	ldr	r2, [r4, #4]
 8001e36:	d1dd      	bne.n	8001df4 <_malloc_r+0x8c>
 8001e38:	f8c8 2000 	str.w	r2, [r8]
 8001e3c:	e7ec      	b.n	8001e18 <_malloc_r+0xb0>
 8001e3e:	4623      	mov	r3, r4
 8001e40:	6864      	ldr	r4, [r4, #4]
 8001e42:	e7ac      	b.n	8001d9e <_malloc_r+0x36>
 8001e44:	4634      	mov	r4, r6
 8001e46:	6876      	ldr	r6, [r6, #4]
 8001e48:	e7b4      	b.n	8001db4 <_malloc_r+0x4c>
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	e7cc      	b.n	8001de8 <_malloc_r+0x80>
 8001e4e:	230c      	movs	r3, #12
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	4638      	mov	r0, r7
 8001e54:	f000 f80e 	bl	8001e74 <__malloc_unlock>
 8001e58:	e797      	b.n	8001d8a <_malloc_r+0x22>
 8001e5a:	6025      	str	r5, [r4, #0]
 8001e5c:	e7dc      	b.n	8001e18 <_malloc_r+0xb0>
 8001e5e:	605b      	str	r3, [r3, #4]
 8001e60:	deff      	udf	#255	; 0xff
 8001e62:	bf00      	nop
 8001e64:	200001dc 	.word	0x200001dc

08001e68 <__malloc_lock>:
 8001e68:	4801      	ldr	r0, [pc, #4]	; (8001e70 <__malloc_lock+0x8>)
 8001e6a:	f7ff bf06 	b.w	8001c7a <__retarget_lock_acquire_recursive>
 8001e6e:	bf00      	nop
 8001e70:	200001d8 	.word	0x200001d8

08001e74 <__malloc_unlock>:
 8001e74:	4801      	ldr	r0, [pc, #4]	; (8001e7c <__malloc_unlock+0x8>)
 8001e76:	f7ff bf01 	b.w	8001c7c <__retarget_lock_release_recursive>
 8001e7a:	bf00      	nop
 8001e7c:	200001d8 	.word	0x200001d8

08001e80 <__sflush_r>:
 8001e80:	898a      	ldrh	r2, [r1, #12]
 8001e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e86:	4605      	mov	r5, r0
 8001e88:	0710      	lsls	r0, r2, #28
 8001e8a:	460c      	mov	r4, r1
 8001e8c:	d458      	bmi.n	8001f40 <__sflush_r+0xc0>
 8001e8e:	684b      	ldr	r3, [r1, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	dc05      	bgt.n	8001ea0 <__sflush_r+0x20>
 8001e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	dc02      	bgt.n	8001ea0 <__sflush_r+0x20>
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ea2:	2e00      	cmp	r6, #0
 8001ea4:	d0f9      	beq.n	8001e9a <__sflush_r+0x1a>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001eac:	682f      	ldr	r7, [r5, #0]
 8001eae:	6a21      	ldr	r1, [r4, #32]
 8001eb0:	602b      	str	r3, [r5, #0]
 8001eb2:	d032      	beq.n	8001f1a <__sflush_r+0x9a>
 8001eb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	075a      	lsls	r2, r3, #29
 8001eba:	d505      	bpl.n	8001ec8 <__sflush_r+0x48>
 8001ebc:	6863      	ldr	r3, [r4, #4]
 8001ebe:	1ac0      	subs	r0, r0, r3
 8001ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ec2:	b10b      	cbz	r3, 8001ec8 <__sflush_r+0x48>
 8001ec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ec6:	1ac0      	subs	r0, r0, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	4602      	mov	r2, r0
 8001ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ece:	6a21      	ldr	r1, [r4, #32]
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	47b0      	blx	r6
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	89a3      	ldrh	r3, [r4, #12]
 8001ed8:	d106      	bne.n	8001ee8 <__sflush_r+0x68>
 8001eda:	6829      	ldr	r1, [r5, #0]
 8001edc:	291d      	cmp	r1, #29
 8001ede:	d82b      	bhi.n	8001f38 <__sflush_r+0xb8>
 8001ee0:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <__sflush_r+0x108>)
 8001ee2:	410a      	asrs	r2, r1
 8001ee4:	07d6      	lsls	r6, r2, #31
 8001ee6:	d427      	bmi.n	8001f38 <__sflush_r+0xb8>
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6062      	str	r2, [r4, #4]
 8001eec:	04d9      	lsls	r1, r3, #19
 8001eee:	6922      	ldr	r2, [r4, #16]
 8001ef0:	6022      	str	r2, [r4, #0]
 8001ef2:	d504      	bpl.n	8001efe <__sflush_r+0x7e>
 8001ef4:	1c42      	adds	r2, r0, #1
 8001ef6:	d101      	bne.n	8001efc <__sflush_r+0x7c>
 8001ef8:	682b      	ldr	r3, [r5, #0]
 8001efa:	b903      	cbnz	r3, 8001efe <__sflush_r+0x7e>
 8001efc:	6560      	str	r0, [r4, #84]	; 0x54
 8001efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f00:	602f      	str	r7, [r5, #0]
 8001f02:	2900      	cmp	r1, #0
 8001f04:	d0c9      	beq.n	8001e9a <__sflush_r+0x1a>
 8001f06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f0a:	4299      	cmp	r1, r3
 8001f0c:	d002      	beq.n	8001f14 <__sflush_r+0x94>
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f7ff feb6 	bl	8001c80 <_free_r>
 8001f14:	2000      	movs	r0, #0
 8001f16:	6360      	str	r0, [r4, #52]	; 0x34
 8001f18:	e7c0      	b.n	8001e9c <__sflush_r+0x1c>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	47b0      	blx	r6
 8001f20:	1c41      	adds	r1, r0, #1
 8001f22:	d1c8      	bne.n	8001eb6 <__sflush_r+0x36>
 8001f24:	682b      	ldr	r3, [r5, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0c5      	beq.n	8001eb6 <__sflush_r+0x36>
 8001f2a:	2b1d      	cmp	r3, #29
 8001f2c:	d001      	beq.n	8001f32 <__sflush_r+0xb2>
 8001f2e:	2b16      	cmp	r3, #22
 8001f30:	d101      	bne.n	8001f36 <__sflush_r+0xb6>
 8001f32:	602f      	str	r7, [r5, #0]
 8001f34:	e7b1      	b.n	8001e9a <__sflush_r+0x1a>
 8001f36:	89a3      	ldrh	r3, [r4, #12]
 8001f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f3c:	81a3      	strh	r3, [r4, #12]
 8001f3e:	e7ad      	b.n	8001e9c <__sflush_r+0x1c>
 8001f40:	690f      	ldr	r7, [r1, #16]
 8001f42:	2f00      	cmp	r7, #0
 8001f44:	d0a9      	beq.n	8001e9a <__sflush_r+0x1a>
 8001f46:	0793      	lsls	r3, r2, #30
 8001f48:	680e      	ldr	r6, [r1, #0]
 8001f4a:	bf08      	it	eq
 8001f4c:	694b      	ldreq	r3, [r1, #20]
 8001f4e:	600f      	str	r7, [r1, #0]
 8001f50:	bf18      	it	ne
 8001f52:	2300      	movne	r3, #0
 8001f54:	eba6 0807 	sub.w	r8, r6, r7
 8001f58:	608b      	str	r3, [r1, #8]
 8001f5a:	f1b8 0f00 	cmp.w	r8, #0
 8001f5e:	dd9c      	ble.n	8001e9a <__sflush_r+0x1a>
 8001f60:	6a21      	ldr	r1, [r4, #32]
 8001f62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f64:	4643      	mov	r3, r8
 8001f66:	463a      	mov	r2, r7
 8001f68:	4628      	mov	r0, r5
 8001f6a:	47b0      	blx	r6
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	dc06      	bgt.n	8001f7e <__sflush_r+0xfe>
 8001f70:	89a3      	ldrh	r3, [r4, #12]
 8001f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f76:	81a3      	strh	r3, [r4, #12]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	e78e      	b.n	8001e9c <__sflush_r+0x1c>
 8001f7e:	4407      	add	r7, r0
 8001f80:	eba8 0800 	sub.w	r8, r8, r0
 8001f84:	e7e9      	b.n	8001f5a <__sflush_r+0xda>
 8001f86:	bf00      	nop
 8001f88:	dfbffffe 	.word	0xdfbffffe

08001f8c <_fflush_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	690b      	ldr	r3, [r1, #16]
 8001f90:	4605      	mov	r5, r0
 8001f92:	460c      	mov	r4, r1
 8001f94:	b913      	cbnz	r3, 8001f9c <_fflush_r+0x10>
 8001f96:	2500      	movs	r5, #0
 8001f98:	4628      	mov	r0, r5
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}
 8001f9c:	b118      	cbz	r0, 8001fa6 <_fflush_r+0x1a>
 8001f9e:	6a03      	ldr	r3, [r0, #32]
 8001fa0:	b90b      	cbnz	r3, 8001fa6 <_fflush_r+0x1a>
 8001fa2:	f7ff fcc1 	bl	8001928 <__sinit>
 8001fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f3      	beq.n	8001f96 <_fflush_r+0xa>
 8001fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fb0:	07d0      	lsls	r0, r2, #31
 8001fb2:	d404      	bmi.n	8001fbe <_fflush_r+0x32>
 8001fb4:	0599      	lsls	r1, r3, #22
 8001fb6:	d402      	bmi.n	8001fbe <_fflush_r+0x32>
 8001fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fba:	f7ff fe5e 	bl	8001c7a <__retarget_lock_acquire_recursive>
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	f7ff ff5d 	bl	8001e80 <__sflush_r>
 8001fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fc8:	07da      	lsls	r2, r3, #31
 8001fca:	4605      	mov	r5, r0
 8001fcc:	d4e4      	bmi.n	8001f98 <_fflush_r+0xc>
 8001fce:	89a3      	ldrh	r3, [r4, #12]
 8001fd0:	059b      	lsls	r3, r3, #22
 8001fd2:	d4e1      	bmi.n	8001f98 <_fflush_r+0xc>
 8001fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fd6:	f7ff fe51 	bl	8001c7c <__retarget_lock_release_recursive>
 8001fda:	e7dd      	b.n	8001f98 <_fflush_r+0xc>

08001fdc <_getc_r>:
 8001fdc:	b538      	push	{r3, r4, r5, lr}
 8001fde:	460c      	mov	r4, r1
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	b118      	cbz	r0, 8001fec <_getc_r+0x10>
 8001fe4:	6a03      	ldr	r3, [r0, #32]
 8001fe6:	b90b      	cbnz	r3, 8001fec <_getc_r+0x10>
 8001fe8:	f7ff fc9e 	bl	8001928 <__sinit>
 8001fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fee:	07d8      	lsls	r0, r3, #31
 8001ff0:	d405      	bmi.n	8001ffe <_getc_r+0x22>
 8001ff2:	89a3      	ldrh	r3, [r4, #12]
 8001ff4:	0599      	lsls	r1, r3, #22
 8001ff6:	d402      	bmi.n	8001ffe <_getc_r+0x22>
 8001ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ffa:	f7ff fe3e 	bl	8001c7a <__retarget_lock_acquire_recursive>
 8001ffe:	6863      	ldr	r3, [r4, #4]
 8002000:	3b01      	subs	r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	6063      	str	r3, [r4, #4]
 8002006:	da0f      	bge.n	8002028 <_getc_r+0x4c>
 8002008:	4628      	mov	r0, r5
 800200a:	4621      	mov	r1, r4
 800200c:	f000 f873 	bl	80020f6 <__srget_r>
 8002010:	4605      	mov	r5, r0
 8002012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002014:	07da      	lsls	r2, r3, #31
 8002016:	d405      	bmi.n	8002024 <_getc_r+0x48>
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	059b      	lsls	r3, r3, #22
 800201c:	d402      	bmi.n	8002024 <_getc_r+0x48>
 800201e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002020:	f7ff fe2c 	bl	8001c7c <__retarget_lock_release_recursive>
 8002024:	4628      	mov	r0, r5
 8002026:	bd38      	pop	{r3, r4, r5, pc}
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	6022      	str	r2, [r4, #0]
 800202e:	781d      	ldrb	r5, [r3, #0]
 8002030:	e7ef      	b.n	8002012 <_getc_r+0x36>

08002032 <__swhatbuf_r>:
 8002032:	b570      	push	{r4, r5, r6, lr}
 8002034:	460c      	mov	r4, r1
 8002036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203a:	2900      	cmp	r1, #0
 800203c:	b096      	sub	sp, #88	; 0x58
 800203e:	4615      	mov	r5, r2
 8002040:	461e      	mov	r6, r3
 8002042:	da0d      	bge.n	8002060 <__swhatbuf_r+0x2e>
 8002044:	89a3      	ldrh	r3, [r4, #12]
 8002046:	f013 0f80 	tst.w	r3, #128	; 0x80
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	bf0c      	ite	eq
 8002050:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002054:	2340      	movne	r3, #64	; 0x40
 8002056:	2000      	movs	r0, #0
 8002058:	6031      	str	r1, [r6, #0]
 800205a:	602b      	str	r3, [r5, #0]
 800205c:	b016      	add	sp, #88	; 0x58
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	466a      	mov	r2, sp
 8002062:	f000 f861 	bl	8002128 <_fstat_r>
 8002066:	2800      	cmp	r0, #0
 8002068:	dbec      	blt.n	8002044 <__swhatbuf_r+0x12>
 800206a:	9901      	ldr	r1, [sp, #4]
 800206c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002070:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002074:	4259      	negs	r1, r3
 8002076:	4159      	adcs	r1, r3
 8002078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207c:	e7eb      	b.n	8002056 <__swhatbuf_r+0x24>

0800207e <__smakebuf_r>:
 800207e:	898b      	ldrh	r3, [r1, #12]
 8002080:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002082:	079d      	lsls	r5, r3, #30
 8002084:	4606      	mov	r6, r0
 8002086:	460c      	mov	r4, r1
 8002088:	d507      	bpl.n	800209a <__smakebuf_r+0x1c>
 800208a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800208e:	6023      	str	r3, [r4, #0]
 8002090:	6123      	str	r3, [r4, #16]
 8002092:	2301      	movs	r3, #1
 8002094:	6163      	str	r3, [r4, #20]
 8002096:	b002      	add	sp, #8
 8002098:	bd70      	pop	{r4, r5, r6, pc}
 800209a:	ab01      	add	r3, sp, #4
 800209c:	466a      	mov	r2, sp
 800209e:	f7ff ffc8 	bl	8002032 <__swhatbuf_r>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4605      	mov	r5, r0
 80020a6:	4630      	mov	r0, r6
 80020a8:	f7ff fe5e 	bl	8001d68 <_malloc_r>
 80020ac:	b948      	cbnz	r0, 80020c2 <__smakebuf_r+0x44>
 80020ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020b2:	059a      	lsls	r2, r3, #22
 80020b4:	d4ef      	bmi.n	8002096 <__smakebuf_r+0x18>
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	81a3      	strh	r3, [r4, #12]
 80020c0:	e7e3      	b.n	800208a <__smakebuf_r+0xc>
 80020c2:	89a3      	ldrh	r3, [r4, #12]
 80020c4:	6020      	str	r0, [r4, #0]
 80020c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ca:	81a3      	strh	r3, [r4, #12]
 80020cc:	9b00      	ldr	r3, [sp, #0]
 80020ce:	6163      	str	r3, [r4, #20]
 80020d0:	9b01      	ldr	r3, [sp, #4]
 80020d2:	6120      	str	r0, [r4, #16]
 80020d4:	b15b      	cbz	r3, 80020ee <__smakebuf_r+0x70>
 80020d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020da:	4630      	mov	r0, r6
 80020dc:	f000 f836 	bl	800214c <_isatty_r>
 80020e0:	b128      	cbz	r0, 80020ee <__smakebuf_r+0x70>
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	f023 0303 	bic.w	r3, r3, #3
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	81a3      	strh	r3, [r4, #12]
 80020ee:	89a3      	ldrh	r3, [r4, #12]
 80020f0:	431d      	orrs	r5, r3
 80020f2:	81a5      	strh	r5, [r4, #12]
 80020f4:	e7cf      	b.n	8002096 <__smakebuf_r+0x18>

080020f6 <__srget_r>:
 80020f6:	b538      	push	{r3, r4, r5, lr}
 80020f8:	460c      	mov	r4, r1
 80020fa:	4605      	mov	r5, r0
 80020fc:	b118      	cbz	r0, 8002106 <__srget_r+0x10>
 80020fe:	6a03      	ldr	r3, [r0, #32]
 8002100:	b90b      	cbnz	r3, 8002106 <__srget_r+0x10>
 8002102:	f7ff fc11 	bl	8001928 <__sinit>
 8002106:	4621      	mov	r1, r4
 8002108:	4628      	mov	r0, r5
 800210a:	f000 f84d 	bl	80021a8 <__srefill_r>
 800210e:	b938      	cbnz	r0, 8002120 <__srget_r+0x2a>
 8002110:	6863      	ldr	r3, [r4, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6063      	str	r3, [r4, #4]
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	6022      	str	r2, [r4, #0]
 800211c:	7818      	ldrb	r0, [r3, #0]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	e7fb      	b.n	800211e <__srget_r+0x28>
	...

08002128 <_fstat_r>:
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4d07      	ldr	r5, [pc, #28]	; (8002148 <_fstat_r+0x20>)
 800212c:	2300      	movs	r3, #0
 800212e:	4604      	mov	r4, r0
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	602b      	str	r3, [r5, #0]
 8002136:	f7ff fb0c 	bl	8001752 <_fstat>
 800213a:	1c43      	adds	r3, r0, #1
 800213c:	d102      	bne.n	8002144 <_fstat_r+0x1c>
 800213e:	682b      	ldr	r3, [r5, #0]
 8002140:	b103      	cbz	r3, 8002144 <_fstat_r+0x1c>
 8002142:	6023      	str	r3, [r4, #0]
 8002144:	bd38      	pop	{r3, r4, r5, pc}
 8002146:	bf00      	nop
 8002148:	200001d4 	.word	0x200001d4

0800214c <_isatty_r>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	4d06      	ldr	r5, [pc, #24]	; (8002168 <_isatty_r+0x1c>)
 8002150:	2300      	movs	r3, #0
 8002152:	4604      	mov	r4, r0
 8002154:	4608      	mov	r0, r1
 8002156:	602b      	str	r3, [r5, #0]
 8002158:	f7ff fb0b 	bl	8001772 <_isatty>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	d102      	bne.n	8002166 <_isatty_r+0x1a>
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	b103      	cbz	r3, 8002166 <_isatty_r+0x1a>
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	200001d4 	.word	0x200001d4

0800216c <_sbrk_r>:
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4d06      	ldr	r5, [pc, #24]	; (8002188 <_sbrk_r+0x1c>)
 8002170:	2300      	movs	r3, #0
 8002172:	4604      	mov	r4, r0
 8002174:	4608      	mov	r0, r1
 8002176:	602b      	str	r3, [r5, #0]
 8002178:	f7ff fb14 	bl	80017a4 <_sbrk>
 800217c:	1c43      	adds	r3, r0, #1
 800217e:	d102      	bne.n	8002186 <_sbrk_r+0x1a>
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	b103      	cbz	r3, 8002186 <_sbrk_r+0x1a>
 8002184:	6023      	str	r3, [r4, #0]
 8002186:	bd38      	pop	{r3, r4, r5, pc}
 8002188:	200001d4 	.word	0x200001d4

0800218c <lflush>:
 800218c:	898b      	ldrh	r3, [r1, #12]
 800218e:	f003 0309 	and.w	r3, r3, #9
 8002192:	2b09      	cmp	r3, #9
 8002194:	d103      	bne.n	800219e <lflush+0x12>
 8002196:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <lflush+0x18>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f7ff bef7 	b.w	8001f8c <_fflush_r>
 800219e:	2000      	movs	r0, #0
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	2000005c 	.word	0x2000005c

080021a8 <__srefill_r>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	460c      	mov	r4, r1
 80021ac:	4605      	mov	r5, r0
 80021ae:	b118      	cbz	r0, 80021b8 <__srefill_r+0x10>
 80021b0:	6a03      	ldr	r3, [r0, #32]
 80021b2:	b90b      	cbnz	r3, 80021b8 <__srefill_r+0x10>
 80021b4:	f7ff fbb8 	bl	8001928 <__sinit>
 80021b8:	2300      	movs	r3, #0
 80021ba:	6063      	str	r3, [r4, #4]
 80021bc:	89a3      	ldrh	r3, [r4, #12]
 80021be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021c2:	069e      	lsls	r6, r3, #26
 80021c4:	d502      	bpl.n	80021cc <__srefill_r+0x24>
 80021c6:	f04f 30ff 	mov.w	r0, #4294967295
 80021ca:	e05c      	b.n	8002286 <__srefill_r+0xde>
 80021cc:	0758      	lsls	r0, r3, #29
 80021ce:	d448      	bmi.n	8002262 <__srefill_r+0xba>
 80021d0:	06d9      	lsls	r1, r3, #27
 80021d2:	d405      	bmi.n	80021e0 <__srefill_r+0x38>
 80021d4:	2309      	movs	r3, #9
 80021d6:	602b      	str	r3, [r5, #0]
 80021d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80021dc:	81a3      	strh	r3, [r4, #12]
 80021de:	e7f2      	b.n	80021c6 <__srefill_r+0x1e>
 80021e0:	071a      	lsls	r2, r3, #28
 80021e2:	d50b      	bpl.n	80021fc <__srefill_r+0x54>
 80021e4:	4621      	mov	r1, r4
 80021e6:	4628      	mov	r0, r5
 80021e8:	f7ff fed0 	bl	8001f8c <_fflush_r>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	d1ea      	bne.n	80021c6 <__srefill_r+0x1e>
 80021f0:	89a3      	ldrh	r3, [r4, #12]
 80021f2:	60a0      	str	r0, [r4, #8]
 80021f4:	f023 0308 	bic.w	r3, r3, #8
 80021f8:	81a3      	strh	r3, [r4, #12]
 80021fa:	61a0      	str	r0, [r4, #24]
 80021fc:	89a3      	ldrh	r3, [r4, #12]
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	81a3      	strh	r3, [r4, #12]
 8002204:	6923      	ldr	r3, [r4, #16]
 8002206:	b91b      	cbnz	r3, 8002210 <__srefill_r+0x68>
 8002208:	4621      	mov	r1, r4
 800220a:	4628      	mov	r0, r5
 800220c:	f7ff ff37 	bl	800207e <__smakebuf_r>
 8002210:	89a6      	ldrh	r6, [r4, #12]
 8002212:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002216:	07b3      	lsls	r3, r6, #30
 8002218:	d00f      	beq.n	800223a <__srefill_r+0x92>
 800221a:	2301      	movs	r3, #1
 800221c:	4a1b      	ldr	r2, [pc, #108]	; (800228c <__srefill_r+0xe4>)
 800221e:	491c      	ldr	r1, [pc, #112]	; (8002290 <__srefill_r+0xe8>)
 8002220:	481c      	ldr	r0, [pc, #112]	; (8002294 <__srefill_r+0xec>)
 8002222:	81a3      	strh	r3, [r4, #12]
 8002224:	f006 0609 	and.w	r6, r6, #9
 8002228:	f7ff fb96 	bl	8001958 <_fwalk_sglue>
 800222c:	2e09      	cmp	r6, #9
 800222e:	81a7      	strh	r7, [r4, #12]
 8002230:	d103      	bne.n	800223a <__srefill_r+0x92>
 8002232:	4621      	mov	r1, r4
 8002234:	4628      	mov	r0, r5
 8002236:	f7ff fe23 	bl	8001e80 <__sflush_r>
 800223a:	6922      	ldr	r2, [r4, #16]
 800223c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800223e:	6963      	ldr	r3, [r4, #20]
 8002240:	6a21      	ldr	r1, [r4, #32]
 8002242:	6022      	str	r2, [r4, #0]
 8002244:	4628      	mov	r0, r5
 8002246:	47b0      	blx	r6
 8002248:	2800      	cmp	r0, #0
 800224a:	6060      	str	r0, [r4, #4]
 800224c:	dc1c      	bgt.n	8002288 <__srefill_r+0xe0>
 800224e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002252:	bf17      	itett	ne
 8002254:	2200      	movne	r2, #0
 8002256:	f043 0320 	orreq.w	r3, r3, #32
 800225a:	6062      	strne	r2, [r4, #4]
 800225c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002260:	e7bc      	b.n	80021dc <__srefill_r+0x34>
 8002262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002264:	2900      	cmp	r1, #0
 8002266:	d0cd      	beq.n	8002204 <__srefill_r+0x5c>
 8002268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800226c:	4299      	cmp	r1, r3
 800226e:	d002      	beq.n	8002276 <__srefill_r+0xce>
 8002270:	4628      	mov	r0, r5
 8002272:	f7ff fd05 	bl	8001c80 <_free_r>
 8002276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002278:	6063      	str	r3, [r4, #4]
 800227a:	2000      	movs	r0, #0
 800227c:	6360      	str	r0, [r4, #52]	; 0x34
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0c0      	beq.n	8002204 <__srefill_r+0x5c>
 8002282:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002284:	6023      	str	r3, [r4, #0]
 8002286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002288:	2000      	movs	r0, #0
 800228a:	e7fc      	b.n	8002286 <__srefill_r+0xde>
 800228c:	20000004 	.word	0x20000004
 8002290:	0800218d 	.word	0x0800218d
 8002294:	20000010 	.word	0x20000010

08002298 <_init>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	bf00      	nop
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr

080022a4 <_fini>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	bf00      	nop
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr
