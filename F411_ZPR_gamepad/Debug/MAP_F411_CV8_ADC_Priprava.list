
MAP_F411_CV8_ADC_Priprava.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bec  08001bec  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001bec  08001bec  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bec  08001bec  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001c54  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001c54  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000028bb  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000095e  00000000  00000000  0002298e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  000232f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014a  00000000  00000000  000234d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fd8b  00000000  00000000  0002361a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002918  00000000  00000000  000333a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00056418  00000000  00000000  00035cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000de8  00000000  00000000  0008c0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0008cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001b84 	.word	0x08001b84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001b84 	.word	0x08001b84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <SystemInit+0x20>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <SystemInit+0x20>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b087      	sub	sp, #28
 80002a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	2302      	movs	r3, #2
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	2302      	movs	r3, #2
 80002bc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002be:	4b34      	ldr	r3, [pc, #208]	; (8000390 <SystemCoreClockUpdate+0xec>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	f003 030c 	and.w	r3, r3, #12
 80002c6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	2b08      	cmp	r3, #8
 80002cc:	d011      	beq.n	80002f2 <SystemCoreClockUpdate+0x4e>
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	2b08      	cmp	r3, #8
 80002d2:	d844      	bhi.n	800035e <SystemCoreClockUpdate+0xba>
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d003      	beq.n	80002e2 <SystemCoreClockUpdate+0x3e>
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d004      	beq.n	80002ea <SystemCoreClockUpdate+0x46>
 80002e0:	e03d      	b.n	800035e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80002e2:	4b2c      	ldr	r3, [pc, #176]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 80002e4:	4a2c      	ldr	r2, [pc, #176]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 80002e6:	601a      	str	r2, [r3, #0]
      break;
 80002e8:	e03d      	b.n	8000366 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80002ea:	4b2a      	ldr	r3, [pc, #168]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 80002ec:	4a2b      	ldr	r2, [pc, #172]	; (800039c <SystemCoreClockUpdate+0xf8>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	e039      	b.n	8000366 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80002f2:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SystemCoreClockUpdate+0xec>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	0d9b      	lsrs	r3, r3, #22
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000306:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d00c      	beq.n	8000328 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800030e:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemCoreClockUpdate+0xf8>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	fbb2 f3f3 	udiv	r3, r2, r3
 8000316:	4a1e      	ldr	r2, [pc, #120]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000318:	6852      	ldr	r2, [r2, #4]
 800031a:	0992      	lsrs	r2, r2, #6
 800031c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	617b      	str	r3, [r7, #20]
 8000326:	e00b      	b.n	8000340 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000332:	6852      	ldr	r2, [r2, #4]
 8000334:	0992      	lsrs	r2, r2, #6
 8000336:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800033a:	fb02 f303 	mul.w	r3, r2, r3
 800033e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	0c1b      	lsrs	r3, r3, #16
 8000346:	f003 0303 	and.w	r3, r3, #3
 800034a:	3301      	adds	r3, #1
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	fbb2 f3f3 	udiv	r3, r2, r3
 8000358:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 800035a:	6013      	str	r3, [r2, #0]
      break;
 800035c:	e003      	b.n	8000366 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800035e:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 8000362:	601a      	str	r2, [r3, #0]
      break;
 8000364:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	091b      	lsrs	r3, r3, #4
 800036c:	f003 030f 	and.w	r3, r3, #15
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <SystemCoreClockUpdate+0xfc>)
 8000372:	5cd3      	ldrb	r3, [r2, r3]
 8000374:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	fa22 f303 	lsr.w	r3, r2, r3
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	371c      	adds	r7, #28
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40023800 	.word	0x40023800
 8000394:	20000000 	.word	0x20000000
 8000398:	00f42400 	.word	0x00f42400
 800039c:	017d7840 	.word	0x017d7840
 80003a0:	08001ba8 	.word	0x08001ba8

080003a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	6039      	str	r1, [r7, #0]
 80003ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	db0a      	blt.n	80003ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	490c      	ldr	r1, [pc, #48]	; (80003f0 <__NVIC_SetPriority+0x4c>)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	0112      	lsls	r2, r2, #4
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003cc:	e00a      	b.n	80003e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4908      	ldr	r1, [pc, #32]	; (80003f4 <__NVIC_SetPriority+0x50>)
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 030f 	and.w	r3, r3, #15
 80003da:	3b04      	subs	r3, #4
 80003dc:	0112      	lsls	r2, r2, #4
 80003de:	b2d2      	uxtb	r2, r2
 80003e0:	440b      	add	r3, r1
 80003e2:	761a      	strb	r2, [r3, #24]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000e100 	.word	0xe000e100
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ffc2 	bl	80003a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <SysTick_Handler>:
#include "stm_usart.h"

volatile uint32_t _ticks = 0;

void SysTick_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	_ticks++;
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SysTick_Handler+0x18>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	4a03      	ldr	r2, [pc, #12]	; (8000454 <SysTick_Handler+0x18>)
 8000448:	6013      	str	r3, [r2, #0]
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	2000007c 	.word	0x2000007c

08000458 <main>:



int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0

	SystemCoreClockUpdate();
 800045e:	f7ff ff21 	bl	80002a4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock /1000 -1);
 8000462:	4b3b      	ldr	r3, [pc, #236]	; (8000550 <main+0xf8>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a3b      	ldr	r2, [pc, #236]	; (8000554 <main+0xfc>)
 8000468:	fba2 2303 	umull	r2, r3, r2, r3
 800046c:	099b      	lsrs	r3, r3, #6
 800046e:	3b01      	subs	r3, #1
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ffc1 	bl	80003f8 <SysTick_Config>

	Usart2Init(38400);
 8000476:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 800047a:	f000 fa91 	bl	80009a0 <Usart2Init>

	STM_SetPinGPIO(GPIOA, 0, ioPortAnalog);
 800047e:	2202      	movs	r2, #2
 8000480:	2100      	movs	r1, #0
 8000482:	4835      	ldr	r0, [pc, #212]	; (8000558 <main+0x100>)
 8000484:	f000 f8a0 	bl	80005c8 <STM_SetPinGPIO>

	if (!(RCC->APB2ENR & RCC_APB2ENR_ADC1EN))
 8000488:	4b34      	ldr	r3, [pc, #208]	; (800055c <main+0x104>)
 800048a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800048c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <main+0x60>
	{
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000494:	4b31      	ldr	r3, [pc, #196]	; (800055c <main+0x104>)
 8000496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000498:	4a30      	ldr	r2, [pc, #192]	; (800055c <main+0x104>)
 800049a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800049e:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 80004a0:	4b2e      	ldr	r3, [pc, #184]	; (800055c <main+0x104>)
 80004a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a4:	4a2d      	ldr	r2, [pc, #180]	; (800055c <main+0x104>)
 80004a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004aa:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 80004ac:	4b2b      	ldr	r3, [pc, #172]	; (800055c <main+0x104>)
 80004ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b0:	4a2a      	ldr	r2, [pc, #168]	; (800055c <main+0x104>)
 80004b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b6:	6253      	str	r3, [r2, #36]	; 0x24
	}

	ADC1->CR1 = 0 // RES = 00 = 12bitu
 80004b8:	4b29      	ldr	r3, [pc, #164]	; (8000560 <main+0x108>)
 80004ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004be:	605a      	str	r2, [r3, #4]
	| ADC_CR1_SCAN;
	ADC1->CR2 = 0; // ALIGN = 0 = right align
 80004c0:	4b27      	ldr	r3, [pc, #156]	; (8000560 <main+0x108>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
	ADC1->SMPR1 = 0;
 80004c6:	4b26      	ldr	r3, [pc, #152]	; (8000560 <main+0x108>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
	ADC1->SMPR2 = 2; // 010 pro ch0 = 28 cyklu
 80004cc:	4b24      	ldr	r3, [pc, #144]	; (8000560 <main+0x108>)
 80004ce:	2202      	movs	r2, #2
 80004d0:	611a      	str	r2, [r3, #16]
	// stejne jako ADC_SMPR2_SMP0_1
	ADC1->SQR1 = 0; // L = 0000 = 1 konverze
 80004d2:	4b23      	ldr	r3, [pc, #140]	; (8000560 <main+0x108>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 = 0;
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <main+0x108>)
 80004da:	2200      	movs	r2, #0
 80004dc:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR3 = 0; // SQ1 = 00000 = AD kanal 0
 80004de:	4b20      	ldr	r3, [pc, #128]	; (8000560 <main+0x108>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
	ADC->CCR = 0; // neni tepl. sens, neni vbat
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <main+0x10c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
	// ADCPRE = 00 = APB2 / 2

	ADC1->CR2 |= ADC_CR2_ADON; // zapnuti AD
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <main+0x108>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <main+0x108>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6093      	str	r3, [r2, #8]


	STM_SetPinGPIO(RGB_RED, ioPortOutputPP);
 80004f6:	2200      	movs	r2, #0
 80004f8:	210f      	movs	r1, #15
 80004fa:	481b      	ldr	r0, [pc, #108]	; (8000568 <main+0x110>)
 80004fc:	f000 f864 	bl	80005c8 <STM_SetPinGPIO>
	uint32_t tm = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
	uint16_t w = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	807b      	strh	r3, [r7, #2]
	while(1)
	{
		if(_ticks >= tm)
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <main+0x114>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d8fa      	bhi.n	8000508 <main+0xb0>
		{
			tm = _ticks + 100;
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <main+0x114>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3364      	adds	r3, #100	; 0x64
 8000518:	607b      	str	r3, [r7, #4]
			GPIOToggle(RGB_RED);
 800051a:	210f      	movs	r1, #15
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <main+0x110>)
 800051e:	f000 f9eb 	bl	80008f8 <GPIOToggle>

			ADC1->CR2 |= ADC_CR2_SWSTART;		//spousteni prevodu
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <main+0x108>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <main+0x108>)
 8000528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800052c:	6093      	str	r3, [r2, #8]

			while(!(ADC1->SR & ADC_SR_EOC))
 800052e:	bf00      	nop
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <main+0x108>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f9      	beq.n	8000530 <main+0xd8>
				;
			w = ADC1->DR;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <main+0x108>)
 800053e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000540:	807b      	strh	r3, [r7, #2]
			printf("%04x = %d\n",w,w);
 8000542:	887b      	ldrh	r3, [r7, #2]
 8000544:	887a      	ldrh	r2, [r7, #2]
 8000546:	4619      	mov	r1, r3
 8000548:	4809      	ldr	r0, [pc, #36]	; (8000570 <main+0x118>)
 800054a:	f000 fbef 	bl	8000d2c <iprintf>
		if(_ticks >= tm)
 800054e:	e7db      	b.n	8000508 <main+0xb0>
 8000550:	20000000 	.word	0x20000000
 8000554:	10624dd3 	.word	0x10624dd3
 8000558:	40020000 	.word	0x40020000
 800055c:	40023800 	.word	0x40023800
 8000560:	40012000 	.word	0x40012000
 8000564:	40012300 	.word	0x40012300
 8000568:	40020400 	.word	0x40020400
 800056c:	2000007c 	.word	0x2000007c
 8000570:	08001b9c 	.word	0x08001b9c

08000574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000576:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000578:	f7ff fe82 	bl	8000280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	; (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a2:	f000 fd1b 	bl	8000fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff ff57 	bl	8000458 <main>

080005aa <LoopForever>:

LoopForever:
  b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   r0, =_estack
 80005ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005b8:	08001bf4 	.word	0x08001bf4
  ldr r2, =_sbss
 80005bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005c0:	200001d0 	.word	0x200001d0

080005c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC_IRQHandler>
	...

080005c8 <STM_SetPinGPIO>:
#include "stm_core.h"

bool STM_SetPinGPIO(GPIO_TypeDef *pgpio, uint32_t bitnum, eIoPortModes mode)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	4613      	mov	r3, r2
 80005d4:	71fb      	strb	r3, [r7, #7]
	uint32_t enr_mask = 0; // hodnota do xxENR registru
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
	uint32_t rstr_mask = 0; // hodnota do xxRSTR registru
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
	switch((uint32_t)pgpio) // detekce, ktery GPIO
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4a97      	ldr	r2, [pc, #604]	; (8000840 <STM_SetPinGPIO+0x278>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d034      	beq.n	8000650 <STM_SetPinGPIO+0x88>
 80005e6:	4a96      	ldr	r2, [pc, #600]	; (8000840 <STM_SetPinGPIO+0x278>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d836      	bhi.n	800065a <STM_SetPinGPIO+0x92>
 80005ec:	4a95      	ldr	r2, [pc, #596]	; (8000844 <STM_SetPinGPIO+0x27c>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d029      	beq.n	8000646 <STM_SetPinGPIO+0x7e>
 80005f2:	4a94      	ldr	r2, [pc, #592]	; (8000844 <STM_SetPinGPIO+0x27c>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d830      	bhi.n	800065a <STM_SetPinGPIO+0x92>
 80005f8:	4a93      	ldr	r2, [pc, #588]	; (8000848 <STM_SetPinGPIO+0x280>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d01e      	beq.n	800063c <STM_SetPinGPIO+0x74>
 80005fe:	4a92      	ldr	r2, [pc, #584]	; (8000848 <STM_SetPinGPIO+0x280>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d82a      	bhi.n	800065a <STM_SetPinGPIO+0x92>
 8000604:	4a91      	ldr	r2, [pc, #580]	; (800084c <STM_SetPinGPIO+0x284>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d013      	beq.n	8000632 <STM_SetPinGPIO+0x6a>
 800060a:	4a90      	ldr	r2, [pc, #576]	; (800084c <STM_SetPinGPIO+0x284>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d824      	bhi.n	800065a <STM_SetPinGPIO+0x92>
 8000610:	4a8f      	ldr	r2, [pc, #572]	; (8000850 <STM_SetPinGPIO+0x288>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d003      	beq.n	800061e <STM_SetPinGPIO+0x56>
 8000616:	4a8f      	ldr	r2, [pc, #572]	; (8000854 <STM_SetPinGPIO+0x28c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d005      	beq.n	8000628 <STM_SetPinGPIO+0x60>
 800061c:	e01d      	b.n	800065a <STM_SetPinGPIO+0x92>
	{
		case (uint32_t)GPIOA:
				enr_mask = RCC_AHB1ENR_GPIOAEN;
 800061e:	2301      	movs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOARST;
 8000622:	2301      	movs	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
			break;
 8000626:	e018      	b.n	800065a <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOB:
				enr_mask = RCC_AHB1ENR_GPIOBEN;
 8000628:	2302      	movs	r3, #2
 800062a:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
			break;
 8000630:	e013      	b.n	800065a <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOC:
				enr_mask = RCC_AHB1ENR_GPIOCEN;
 8000632:	2304      	movs	r3, #4
 8000634:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 8000636:	2304      	movs	r3, #4
 8000638:	613b      	str	r3, [r7, #16]
			break;
 800063a:	e00e      	b.n	800065a <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOD:
				enr_mask = RCC_AHB1ENR_GPIODEN;
 800063c:	2308      	movs	r3, #8
 800063e:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIODRST;
 8000640:	2308      	movs	r3, #8
 8000642:	613b      	str	r3, [r7, #16]
			break;
 8000644:	e009      	b.n	800065a <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOE:
				enr_mask = RCC_AHB1ENR_GPIOEEN;
 8000646:	2310      	movs	r3, #16
 8000648:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOERST;
 800064a:	2310      	movs	r3, #16
 800064c:	613b      	str	r3, [r7, #16]
			break;
 800064e:	e004      	b.n	800065a <STM_SetPinGPIO+0x92>
			rstr_mask = RCC_AHB1RSTR_GPIOGRST;
			break;
	#endif

		case (uint32_t)GPIOH:
				enr_mask = RCC_AHB1ENR_GPIOHEN;
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	617b      	str	r3, [r7, #20]
				rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	613b      	str	r3, [r7, #16]
				break;
 8000658:	bf00      	nop
	}


	if ((enr_mask == 0) || (rstr_mask == 0)) // nevybran GPIO
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <STM_SetPinGPIO+0x9e>
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <STM_SetPinGPIO+0xa2>
	return false; // vrat priznak chyby
 8000666:	2300      	movs	r3, #0
 8000668:	e0e4      	b.n	8000834 <STM_SetPinGPIO+0x26c>

	if (!(RCC->AHB1ENR & enr_mask)) // inicializace vybraneho
 800066a:	4b7b      	ldr	r3, [pc, #492]	; (8000858 <STM_SetPinGPIO+0x290>)
 800066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	4013      	ands	r3, r2
 8000672:	2b00      	cmp	r3, #0
 8000674:	d112      	bne.n	800069c <STM_SetPinGPIO+0xd4>
	{
	RCC->AHB1ENR |= enr_mask; // povolit hodiny periferie
 8000676:	4b78      	ldr	r3, [pc, #480]	; (8000858 <STM_SetPinGPIO+0x290>)
 8000678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067a:	4977      	ldr	r1, [pc, #476]	; (8000858 <STM_SetPinGPIO+0x290>)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	4313      	orrs	r3, r2
 8000680:	630b      	str	r3, [r1, #48]	; 0x30
	RCC->AHB1RSTR |= rstr_mask; // proved reset periferie
 8000682:	4b75      	ldr	r3, [pc, #468]	; (8000858 <STM_SetPinGPIO+0x290>)
 8000684:	691a      	ldr	r2, [r3, #16]
 8000686:	4974      	ldr	r1, [pc, #464]	; (8000858 <STM_SetPinGPIO+0x290>)
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	4313      	orrs	r3, r2
 800068c:	610b      	str	r3, [r1, #16]
	RCC->AHB1RSTR &= ~rstr_mask; // a konec resetu
 800068e:	4b72      	ldr	r3, [pc, #456]	; (8000858 <STM_SetPinGPIO+0x290>)
 8000690:	691a      	ldr	r2, [r3, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	43db      	mvns	r3, r3
 8000696:	4970      	ldr	r1, [pc, #448]	; (8000858 <STM_SetPinGPIO+0x290>)
 8000698:	4013      	ands	r3, r2
 800069a:	610b      	str	r3, [r1, #16]
	}
	// pokracovani inicializace konkretniho vystupu

	// nastaveni registru podle typu vystupu/vstupu
	switch(mode)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	f200 80c5 	bhi.w	800082e <STM_SetPinGPIO+0x266>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <STM_SetPinGPIO+0xe4>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006cd 	.word	0x080006cd
 80006b4:	080007ab 	.word	0x080007ab
 80006b8:	08000793 	.word	0x08000793
 80006bc:	0800073b 	.word	0x0800073b
 80006c0:	08000767 	.word	0x08000767
 80006c4:	080007c1 	.word	0x080007c1
 80006c8:	080007c1 	.word	0x080007c1
	{
		case ioPortOutputOC:
		case ioPortOutputPP:
			pgpio->MODER |= 0x01 << (2 * bitnum); // 01 = output
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	431a      	orrs	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	601a      	str	r2, [r3, #0]
			pgpio->OSPEEDR |= 0x03 << (2 * bitnum); // 11 = high speed
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	2103      	movs	r1, #3
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	431a      	orrs	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	609a      	str	r2, [r3, #8]
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pu/pd
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	2103      	movs	r1, #3
 80006fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000702:	43d2      	mvns	r2, r2
 8000704:	401a      	ands	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	60da      	str	r2, [r3, #12]
			if (mode == ioPortOutputOC) // open collector (drain) ?
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d109      	bne.n	8000724 <STM_SetPinGPIO+0x15c>
				pgpio->OTYPER |= 0x01 << bitnum; // 1 = OC/Open drain
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2101      	movs	r1, #1
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	431a      	orrs	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	605a      	str	r2, [r3, #4]
			else
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
			break;
 8000722:	e086      	b.n	8000832 <STM_SetPinGPIO+0x26a>
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	2101      	movs	r1, #1
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	43d2      	mvns	r2, r2
 8000732:	401a      	ands	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	605a      	str	r2, [r3, #4]
			break;
 8000738:	e07b      	b.n	8000832 <STM_SetPinGPIO+0x26a>
		case ioPortInputPU: // moder bits 00 = input
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // clear bits
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	0052      	lsls	r2, r2, #1
 8000742:	2103      	movs	r1, #3
 8000744:	fa01 f202 	lsl.w	r2, r1, r2
 8000748:	43d2      	mvns	r2, r2
 800074a:	401a      	ands	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	60da      	str	r2, [r3, #12]
			pgpio->PUPDR |= 0x01 << (2 * bitnum); // 01 = pull-up
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	fa01 f202 	lsl.w	r2, r1, r2
 800075e:	431a      	orrs	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	60da      	str	r2, [r3, #12]
			break;
 8000764:	e065      	b.n	8000832 <STM_SetPinGPIO+0x26a>
		case ioPortInputPD:
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // clear bits
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	0052      	lsls	r2, r2, #1
 800076e:	2103      	movs	r1, #3
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	43d2      	mvns	r2, r2
 8000776:	401a      	ands	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	60da      	str	r2, [r3, #12]
			pgpio->PUPDR |= 0x02 << (2 * bitnum); // 10 = pull-down
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	431a      	orrs	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	60da      	str	r2, [r3, #12]
			break;
 8000790:	e04f      	b.n	8000832 <STM_SetPinGPIO+0x26a>
		case ioPortInputFloat: // 00 = input mode, nothing to do
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/dn
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	0052      	lsls	r2, r2, #1
 800079a:	2103      	movs	r1, #3
 800079c:	fa01 f202 	lsl.w	r2, r1, r2
 80007a0:	43d2      	mvns	r2, r2
 80007a2:	401a      	ands	r2, r3
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	60da      	str	r2, [r3, #12]
			break;
 80007a8:	e043      	b.n	8000832 <STM_SetPinGPIO+0x26a>
		case ioPortAnalog:
			pgpio->MODER |= 0x03 << (2 * bitnum); // 11 - analog mode
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	2103      	movs	r1, #3
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	431a      	orrs	r2, r3
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	601a      	str	r2, [r3, #0]
			break;
 80007be:	e038      	b.n	8000832 <STM_SetPinGPIO+0x26a>
	// other modes
	// Alternative modes
		case ioPortAlternatePP:
		case ioPortAlternateOC:
			pgpio->MODER |= 0x02 << (2 * bitnum); // set bits
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	2102      	movs	r1, #2
 80007ca:	fa01 f202 	lsl.w	r2, r1, r2
 80007ce:	431a      	orrs	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	601a      	str	r2, [r3, #0]
			if (mode == ioPortAlternateOC)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	d109      	bne.n	80007ee <STM_SetPinGPIO+0x226>
				pgpio->OTYPER |= 0x01 << bitnum; // 1 = open-drain
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2101      	movs	r1, #1
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	fa01 f202 	lsl.w	r2, r1, r2
 80007e6:	431a      	orrs	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	e009      	b.n	8000802 <STM_SetPinGPIO+0x23a>
			else
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2101      	movs	r1, #1
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	43d2      	mvns	r2, r2
 80007fc:	401a      	ands	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	605a      	str	r2, [r3, #4]
			pgpio->OSPEEDR |= 0x03 << (2 * bitnum); // high-speed = 11
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	0052      	lsls	r2, r2, #1
 800080a:	2103      	movs	r1, #3
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	431a      	orrs	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	609a      	str	r2, [r3, #8]
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/pull-down
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	2103      	movs	r1, #3
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	43d2      	mvns	r2, r2
 8000826:	401a      	ands	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	60da      	str	r2, [r3, #12]
	// don't forget set AFR registers !!!
			break;
 800082c:	e001      	b.n	8000832 <STM_SetPinGPIO+0x26a>
		default: // unknown mode ?
			return false; // return "fail"
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <STM_SetPinGPIO+0x26c>
	}
	return true; // return "OK"
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	371c      	adds	r7, #28
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	40021c00 	.word	0x40021c00
 8000844:	40021000 	.word	0x40021000
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40020800 	.word	0x40020800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400
 8000858:	40023800 	.word	0x40023800

0800085c <STM_SetAFGPIO>:

bool STM_SetAFGPIO(GPIO_TypeDef *pgpio, uint32_t bitnum, uint32_t afValue)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
pgpio->AFR[(bitnum < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitnum & 0x07))); // vynuluj AF bity
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2b07      	cmp	r3, #7
 800086c:	bf8c      	ite	hi
 800086e:	2301      	movhi	r3, #1
 8000870:	2300      	movls	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3208      	adds	r2, #8
 800087a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f002 0207 	and.w	r2, r2, #7
 8000884:	0092      	lsls	r2, r2, #2
 8000886:	210f      	movs	r1, #15
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	43d2      	mvns	r2, r2
 800088e:	4611      	mov	r1, r2
 8000890:	68ba      	ldr	r2, [r7, #8]
 8000892:	2a07      	cmp	r2, #7
 8000894:	bf8c      	ite	hi
 8000896:	2201      	movhi	r2, #1
 8000898:	2200      	movls	r2, #0
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	4019      	ands	r1, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3208      	adds	r2, #8
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
pgpio->AFR[(bitnum < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitnum & 0x07))); // nastav AF bity
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	bf8c      	ite	hi
 80008ac:	2301      	movhi	r3, #1
 80008ae:	2300      	movls	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3208      	adds	r2, #8
 80008b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f003 010f 	and.w	r1, r3, #15
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	2907      	cmp	r1, #7
 80008d2:	bf8c      	ite	hi
 80008d4:	2101      	movhi	r1, #1
 80008d6:	2100      	movls	r1, #0
 80008d8:	b2c9      	uxtb	r1, r1
 80008da:	4608      	mov	r0, r1
 80008dc:	ea42 0103 	orr.w	r1, r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f100 0208 	add.w	r2, r0, #8
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
return true;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <GPIOToggle>:
	else
		pgpio->ODR &= ~(1 << bitnum);
}

void GPIOToggle(GPIO_TypeDef *pgpio, uint32_t bitnum)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	if (pgpio->ODR & 1 << bitnum)
		pgpio->ODR &= ~(1 << bitnum);
	else
		pgpio->ODR |= 1 << bitnum;
#elif TOGGLE_MODE == 2
	pgpio->ODR ^= 1 << bitnum;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	2101      	movs	r1, #1
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	405a      	eors	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	615a      	str	r2, [r3, #20]
#elif TOGGLE_MODE == 3
#else
#error TOGGLE_MODE not set
#endif
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <Usart2Send>:
#include "stm_usart.h"


int Usart2Send(char c)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
while(!(USART2->SR & USART_SR_TXE))
 800092a:	bf00      	nop
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <Usart2Send+0x2c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0f9      	beq.n	800092c <Usart2Send+0xc>
; // cekej dokud neni volny TDR
USART2->DR = c; // zapis do TDR k odeslani
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <Usart2Send+0x2c>)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	6053      	str	r3, [r2, #4]
return c;
 800093e:	79fb      	ldrb	r3, [r7, #7]
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40004400 	.word	0x40004400

08000950 <Usart2Recv>:

int Usart2Recv(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
while(!(USART2->SR & USART_SR_RXNE)) // cekej dokud neprijde
 8000954:	bf00      	nop
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <Usart2Recv+0x20>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0f9      	beq.n	8000956 <Usart2Recv+0x6>
;
return USART2->DR; // vycti a vrat jako hodnotu
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <Usart2Recv+0x20>)
 8000964:	685b      	ldr	r3, [r3, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	40004400 	.word	0x40004400

08000974 <__io_putchar>:
return (USART2->SR & USART_SR_RXNE) != 0;
// podminka vynuti true/false vysledek
}

// addon for CubeIDE with new structure of syscalls.c
int __io_putchar(int ch) { return Usart2Send(ch); }
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffcd 	bl	8000920 <Usart2Send>
 8000986:	4603      	mov	r3, r0
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <__io_getchar>:
int __io_getchar(void) { return Usart2Recv(); }
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
 8000994:	f7ff ffdc 	bl	8000950 <Usart2Recv>
 8000998:	4603      	mov	r3, r0
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <Usart2Init>:
txt++;
}
}

void Usart2Init(int baudSpeed)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	STM_SetPinGPIO(GPIOA, 2, ioPortAlternatePP); // USART2 Tx
 80009a8:	2206      	movs	r2, #6
 80009aa:	2102      	movs	r1, #2
 80009ac:	4828      	ldr	r0, [pc, #160]	; (8000a50 <Usart2Init+0xb0>)
 80009ae:	f7ff fe0b 	bl	80005c8 <STM_SetPinGPIO>
		STM_SetAFGPIO(GPIOA, 2, 7); // AF = 07
 80009b2:	2207      	movs	r2, #7
 80009b4:	2102      	movs	r1, #2
 80009b6:	4826      	ldr	r0, [pc, #152]	; (8000a50 <Usart2Init+0xb0>)
 80009b8:	f7ff ff50 	bl	800085c <STM_SetAFGPIO>
		STM_SetPinGPIO(GPIOA, 3, ioPortAlternatePP); // USART2 Rx
 80009bc:	2206      	movs	r2, #6
 80009be:	2103      	movs	r1, #3
 80009c0:	4823      	ldr	r0, [pc, #140]	; (8000a50 <Usart2Init+0xb0>)
 80009c2:	f7ff fe01 	bl	80005c8 <STM_SetPinGPIO>
		STM_SetAFGPIO(GPIOA, 3, 7); // AF = 07
 80009c6:	2207      	movs	r2, #7
 80009c8:	2103      	movs	r1, #3
 80009ca:	4821      	ldr	r0, [pc, #132]	; (8000a50 <Usart2Init+0xb0>)
 80009cc:	f7ff ff46 	bl	800085c <STM_SetAFGPIO>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) // neni povolen USART2
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <Usart2Init+0xb4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d111      	bne.n	8000a00 <Usart2Init+0x60>
		{
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <Usart2Init+0xb4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <Usart2Init+0xb4>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <Usart2Init+0xb4>)
 80009ea:	6a1b      	ldr	r3, [r3, #32]
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <Usart2Init+0xb4>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f2:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <Usart2Init+0xb4>)
 80009f6:	6a1b      	ldr	r3, [r3, #32]
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <Usart2Init+0xb4>)
 80009fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80009fe:	6213      	str	r3, [r2, #32]
		}
		USART2->CR1 = USART_CR1_RE | USART_CR1_TE; // potreba povoleni prijmu a vysilani
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <Usart2Init+0xb8>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	60da      	str	r2, [r3, #12]
		USART2->CR2 = 0; // nic specialniho
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <Usart2Init+0xb8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
		USART2->CR3 = 0; // nic specialniho
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <Usart2Init+0xb8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
		//TODO doplnit vypocet BRR podle pozadovaneho a podle clocku
		USART2->BRR = 0x1A1; // rychlost 38400 pri 16MHz - spocitano predem
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <Usart2Init+0xb8>)
 8000a14:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000a18:	609a      	str	r2, [r3, #8]
		USART2->CR1 |= USART_CR1_UE; // az na zaver povolen blok USARTu
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <Usart2Init+0xb8>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <Usart2Init+0xb8>)
 8000a20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a24:	60d3      	str	r3, [r2, #12]

		// zrusit bufferovani vystupu i vstupu
		setvbuf(stdout, NULL, _IONBF, 0);
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <Usart2Init+0xbc>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6898      	ldr	r0, [r3, #8]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2202      	movs	r2, #2
 8000a30:	2100      	movs	r1, #0
 8000a32:	f000 f98d 	bl	8000d50 <setvbuf>
		setvbuf(stdin, NULL, _IONBF, 0);
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <Usart2Init+0xbc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6858      	ldr	r0, [r3, #4]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	2202      	movs	r2, #2
 8000a40:	2100      	movs	r1, #0
 8000a42:	f000 f985 	bl	8000d50 <setvbuf>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	2000005c 	.word	0x2000005c

08000a60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a72:	f7ff ff8d 	bl	8000990 <__io_getchar>
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
  }

  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
  }
  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afa:	605a      	str	r2, [r3, #4]
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_isatty>:

int _isatty(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f000 fa30 	bl	8000fd0 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20020000 	.word	0x20020000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000080 	.word	0x20000080
 8000ba4:	200001d0 	.word	0x200001d0

08000ba8 <std>:
 8000ba8:	2300      	movs	r3, #0
 8000baa:	b510      	push	{r4, lr}
 8000bac:	4604      	mov	r4, r0
 8000bae:	e9c0 3300 	strd	r3, r3, [r0]
 8000bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bb6:	6083      	str	r3, [r0, #8]
 8000bb8:	8181      	strh	r1, [r0, #12]
 8000bba:	6643      	str	r3, [r0, #100]	; 0x64
 8000bbc:	81c2      	strh	r2, [r0, #14]
 8000bbe:	6183      	str	r3, [r0, #24]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	305c      	adds	r0, #92	; 0x5c
 8000bc6:	f000 f9b4 	bl	8000f32 <memset>
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <std+0x58>)
 8000bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <std+0x5c>)
 8000bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <std+0x60>)
 8000bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <std+0x64>)
 8000bd8:	6323      	str	r3, [r4, #48]	; 0x30
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <std+0x68>)
 8000bdc:	6224      	str	r4, [r4, #32]
 8000bde:	429c      	cmp	r4, r3
 8000be0:	d006      	beq.n	8000bf0 <std+0x48>
 8000be2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000be6:	4294      	cmp	r4, r2
 8000be8:	d002      	beq.n	8000bf0 <std+0x48>
 8000bea:	33d0      	adds	r3, #208	; 0xd0
 8000bec:	429c      	cmp	r4, r3
 8000bee:	d105      	bne.n	8000bfc <std+0x54>
 8000bf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bf8:	f000 ba14 	b.w	8001024 <__retarget_lock_init_recursive>
 8000bfc:	bd10      	pop	{r4, pc}
 8000bfe:	bf00      	nop
 8000c00:	08000ead 	.word	0x08000ead
 8000c04:	08000ecf 	.word	0x08000ecf
 8000c08:	08000f07 	.word	0x08000f07
 8000c0c:	08000f2b 	.word	0x08000f2b
 8000c10:	20000084 	.word	0x20000084

08000c14 <stdio_exit_handler>:
 8000c14:	4a02      	ldr	r2, [pc, #8]	; (8000c20 <stdio_exit_handler+0xc>)
 8000c16:	4903      	ldr	r1, [pc, #12]	; (8000c24 <stdio_exit_handler+0x10>)
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <stdio_exit_handler+0x14>)
 8000c1a:	f000 b869 	b.w	8000cf0 <_fwalk_sglue>
 8000c1e:	bf00      	nop
 8000c20:	20000004 	.word	0x20000004
 8000c24:	080018e1 	.word	0x080018e1
 8000c28:	20000010 	.word	0x20000010

08000c2c <cleanup_stdio>:
 8000c2c:	6841      	ldr	r1, [r0, #4]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <cleanup_stdio+0x34>)
 8000c30:	4299      	cmp	r1, r3
 8000c32:	b510      	push	{r4, lr}
 8000c34:	4604      	mov	r4, r0
 8000c36:	d001      	beq.n	8000c3c <cleanup_stdio+0x10>
 8000c38:	f000 fe52 	bl	80018e0 <_fflush_r>
 8000c3c:	68a1      	ldr	r1, [r4, #8]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <cleanup_stdio+0x38>)
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d002      	beq.n	8000c4a <cleanup_stdio+0x1e>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f000 fe4b 	bl	80018e0 <_fflush_r>
 8000c4a:	68e1      	ldr	r1, [r4, #12]
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <cleanup_stdio+0x3c>)
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	d004      	beq.n	8000c5c <cleanup_stdio+0x30>
 8000c52:	4620      	mov	r0, r4
 8000c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c58:	f000 be42 	b.w	80018e0 <_fflush_r>
 8000c5c:	bd10      	pop	{r4, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000084 	.word	0x20000084
 8000c64:	200000ec 	.word	0x200000ec
 8000c68:	20000154 	.word	0x20000154

08000c6c <global_stdio_init.part.0>:
 8000c6c:	b510      	push	{r4, lr}
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <global_stdio_init.part.0+0x30>)
 8000c70:	4c0b      	ldr	r4, [pc, #44]	; (8000ca0 <global_stdio_init.part.0+0x34>)
 8000c72:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <global_stdio_init.part.0+0x38>)
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	4620      	mov	r0, r4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	f7ff ff94 	bl	8000ba8 <std>
 8000c80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000c84:	2201      	movs	r2, #1
 8000c86:	2109      	movs	r1, #9
 8000c88:	f7ff ff8e 	bl	8000ba8 <std>
 8000c8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c90:	2202      	movs	r2, #2
 8000c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c96:	2112      	movs	r1, #18
 8000c98:	f7ff bf86 	b.w	8000ba8 <std>
 8000c9c:	200001bc 	.word	0x200001bc
 8000ca0:	20000084 	.word	0x20000084
 8000ca4:	08000c15 	.word	0x08000c15

08000ca8 <__sfp_lock_acquire>:
 8000ca8:	4801      	ldr	r0, [pc, #4]	; (8000cb0 <__sfp_lock_acquire+0x8>)
 8000caa:	f000 b9bc 	b.w	8001026 <__retarget_lock_acquire_recursive>
 8000cae:	bf00      	nop
 8000cb0:	200001c5 	.word	0x200001c5

08000cb4 <__sfp_lock_release>:
 8000cb4:	4801      	ldr	r0, [pc, #4]	; (8000cbc <__sfp_lock_release+0x8>)
 8000cb6:	f000 b9b7 	b.w	8001028 <__retarget_lock_release_recursive>
 8000cba:	bf00      	nop
 8000cbc:	200001c5 	.word	0x200001c5

08000cc0 <__sinit>:
 8000cc0:	b510      	push	{r4, lr}
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff fff0 	bl	8000ca8 <__sfp_lock_acquire>
 8000cc8:	6a23      	ldr	r3, [r4, #32]
 8000cca:	b11b      	cbz	r3, 8000cd4 <__sinit+0x14>
 8000ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cd0:	f7ff bff0 	b.w	8000cb4 <__sfp_lock_release>
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__sinit+0x28>)
 8000cd6:	6223      	str	r3, [r4, #32]
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__sinit+0x2c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f5      	bne.n	8000ccc <__sinit+0xc>
 8000ce0:	f7ff ffc4 	bl	8000c6c <global_stdio_init.part.0>
 8000ce4:	e7f2      	b.n	8000ccc <__sinit+0xc>
 8000ce6:	bf00      	nop
 8000ce8:	08000c2d 	.word	0x08000c2d
 8000cec:	200001bc 	.word	0x200001bc

08000cf0 <_fwalk_sglue>:
 8000cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cf4:	4607      	mov	r7, r0
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	2600      	movs	r6, #0
 8000cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d00:	f1b9 0901 	subs.w	r9, r9, #1
 8000d04:	d505      	bpl.n	8000d12 <_fwalk_sglue+0x22>
 8000d06:	6824      	ldr	r4, [r4, #0]
 8000d08:	2c00      	cmp	r4, #0
 8000d0a:	d1f7      	bne.n	8000cfc <_fwalk_sglue+0xc>
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d12:	89ab      	ldrh	r3, [r5, #12]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d907      	bls.n	8000d28 <_fwalk_sglue+0x38>
 8000d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	d003      	beq.n	8000d28 <_fwalk_sglue+0x38>
 8000d20:	4629      	mov	r1, r5
 8000d22:	4638      	mov	r0, r7
 8000d24:	47c0      	blx	r8
 8000d26:	4306      	orrs	r6, r0
 8000d28:	3568      	adds	r5, #104	; 0x68
 8000d2a:	e7e9      	b.n	8000d00 <_fwalk_sglue+0x10>

08000d2c <iprintf>:
 8000d2c:	b40f      	push	{r0, r1, r2, r3}
 8000d2e:	b507      	push	{r0, r1, r2, lr}
 8000d30:	4906      	ldr	r1, [pc, #24]	; (8000d4c <iprintf+0x20>)
 8000d32:	ab04      	add	r3, sp, #16
 8000d34:	6808      	ldr	r0, [r1, #0]
 8000d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d3a:	6881      	ldr	r1, [r0, #8]
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	f000 fa9f 	bl	8001280 <_vfiprintf_r>
 8000d42:	b003      	add	sp, #12
 8000d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d48:	b004      	add	sp, #16
 8000d4a:	4770      	bx	lr
 8000d4c:	2000005c 	.word	0x2000005c

08000d50 <setvbuf>:
 8000d50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000d54:	461d      	mov	r5, r3
 8000d56:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <setvbuf+0x158>)
 8000d58:	681f      	ldr	r7, [r3, #0]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	460e      	mov	r6, r1
 8000d5e:	4690      	mov	r8, r2
 8000d60:	b127      	cbz	r7, 8000d6c <setvbuf+0x1c>
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	b913      	cbnz	r3, 8000d6c <setvbuf+0x1c>
 8000d66:	4638      	mov	r0, r7
 8000d68:	f7ff ffaa 	bl	8000cc0 <__sinit>
 8000d6c:	f1b8 0f02 	cmp.w	r8, #2
 8000d70:	d006      	beq.n	8000d80 <setvbuf+0x30>
 8000d72:	f1b8 0f01 	cmp.w	r8, #1
 8000d76:	f200 8094 	bhi.w	8000ea2 <setvbuf+0x152>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	f2c0 8091 	blt.w	8000ea2 <setvbuf+0x152>
 8000d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d82:	07da      	lsls	r2, r3, #31
 8000d84:	d405      	bmi.n	8000d92 <setvbuf+0x42>
 8000d86:	89a3      	ldrh	r3, [r4, #12]
 8000d88:	059b      	lsls	r3, r3, #22
 8000d8a:	d402      	bmi.n	8000d92 <setvbuf+0x42>
 8000d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d8e:	f000 f94a 	bl	8001026 <__retarget_lock_acquire_recursive>
 8000d92:	4621      	mov	r1, r4
 8000d94:	4638      	mov	r0, r7
 8000d96:	f000 fda3 	bl	80018e0 <_fflush_r>
 8000d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d9c:	b141      	cbz	r1, 8000db0 <setvbuf+0x60>
 8000d9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d002      	beq.n	8000dac <setvbuf+0x5c>
 8000da6:	4638      	mov	r0, r7
 8000da8:	f000 f940 	bl	800102c <_free_r>
 8000dac:	2300      	movs	r3, #0
 8000dae:	6363      	str	r3, [r4, #52]	; 0x34
 8000db0:	2300      	movs	r3, #0
 8000db2:	61a3      	str	r3, [r4, #24]
 8000db4:	6063      	str	r3, [r4, #4]
 8000db6:	89a3      	ldrh	r3, [r4, #12]
 8000db8:	0618      	lsls	r0, r3, #24
 8000dba:	d503      	bpl.n	8000dc4 <setvbuf+0x74>
 8000dbc:	6921      	ldr	r1, [r4, #16]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	f000 f934 	bl	800102c <_free_r>
 8000dc4:	89a3      	ldrh	r3, [r4, #12]
 8000dc6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8000dca:	f023 0303 	bic.w	r3, r3, #3
 8000dce:	f1b8 0f02 	cmp.w	r8, #2
 8000dd2:	81a3      	strh	r3, [r4, #12]
 8000dd4:	d05f      	beq.n	8000e96 <setvbuf+0x146>
 8000dd6:	ab01      	add	r3, sp, #4
 8000dd8:	466a      	mov	r2, sp
 8000dda:	4621      	mov	r1, r4
 8000ddc:	4638      	mov	r0, r7
 8000dde:	f000 fda7 	bl	8001930 <__swhatbuf_r>
 8000de2:	89a3      	ldrh	r3, [r4, #12]
 8000de4:	4318      	orrs	r0, r3
 8000de6:	81a0      	strh	r0, [r4, #12]
 8000de8:	bb2d      	cbnz	r5, 8000e36 <setvbuf+0xe6>
 8000dea:	9d00      	ldr	r5, [sp, #0]
 8000dec:	4628      	mov	r0, r5
 8000dee:	f000 f969 	bl	80010c4 <malloc>
 8000df2:	4606      	mov	r6, r0
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d150      	bne.n	8000e9a <setvbuf+0x14a>
 8000df8:	f8dd 9000 	ldr.w	r9, [sp]
 8000dfc:	45a9      	cmp	r9, r5
 8000dfe:	d13e      	bne.n	8000e7e <setvbuf+0x12e>
 8000e00:	f04f 35ff 	mov.w	r5, #4294967295
 8000e04:	2200      	movs	r2, #0
 8000e06:	60a2      	str	r2, [r4, #8]
 8000e08:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8000e0c:	6022      	str	r2, [r4, #0]
 8000e0e:	6122      	str	r2, [r4, #16]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e16:	6162      	str	r2, [r4, #20]
 8000e18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	07d1      	lsls	r1, r2, #31
 8000e20:	81a3      	strh	r3, [r4, #12]
 8000e22:	d404      	bmi.n	8000e2e <setvbuf+0xde>
 8000e24:	059b      	lsls	r3, r3, #22
 8000e26:	d402      	bmi.n	8000e2e <setvbuf+0xde>
 8000e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e2a:	f000 f8fd 	bl	8001028 <__retarget_lock_release_recursive>
 8000e2e:	4628      	mov	r0, r5
 8000e30:	b003      	add	sp, #12
 8000e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d0d8      	beq.n	8000dec <setvbuf+0x9c>
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	b913      	cbnz	r3, 8000e44 <setvbuf+0xf4>
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f7ff ff3e 	bl	8000cc0 <__sinit>
 8000e44:	f1b8 0f01 	cmp.w	r8, #1
 8000e48:	bf08      	it	eq
 8000e4a:	89a3      	ldrheq	r3, [r4, #12]
 8000e4c:	6026      	str	r6, [r4, #0]
 8000e4e:	bf04      	itt	eq
 8000e50:	f043 0301 	orreq.w	r3, r3, #1
 8000e54:	81a3      	strheq	r3, [r4, #12]
 8000e56:	89a3      	ldrh	r3, [r4, #12]
 8000e58:	f013 0208 	ands.w	r2, r3, #8
 8000e5c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8000e60:	d01d      	beq.n	8000e9e <setvbuf+0x14e>
 8000e62:	07da      	lsls	r2, r3, #31
 8000e64:	bf41      	itttt	mi
 8000e66:	2200      	movmi	r2, #0
 8000e68:	426d      	negmi	r5, r5
 8000e6a:	60a2      	strmi	r2, [r4, #8]
 8000e6c:	61a5      	strmi	r5, [r4, #24]
 8000e6e:	bf58      	it	pl
 8000e70:	60a5      	strpl	r5, [r4, #8]
 8000e72:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8000e74:	f015 0501 	ands.w	r5, r5, #1
 8000e78:	d0d4      	beq.n	8000e24 <setvbuf+0xd4>
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	e7d7      	b.n	8000e2e <setvbuf+0xde>
 8000e7e:	4648      	mov	r0, r9
 8000e80:	f000 f920 	bl	80010c4 <malloc>
 8000e84:	4606      	mov	r6, r0
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d0ba      	beq.n	8000e00 <setvbuf+0xb0>
 8000e8a:	89a3      	ldrh	r3, [r4, #12]
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	81a3      	strh	r3, [r4, #12]
 8000e92:	464d      	mov	r5, r9
 8000e94:	e7d1      	b.n	8000e3a <setvbuf+0xea>
 8000e96:	2500      	movs	r5, #0
 8000e98:	e7b4      	b.n	8000e04 <setvbuf+0xb4>
 8000e9a:	46a9      	mov	r9, r5
 8000e9c:	e7f5      	b.n	8000e8a <setvbuf+0x13a>
 8000e9e:	60a2      	str	r2, [r4, #8]
 8000ea0:	e7e7      	b.n	8000e72 <setvbuf+0x122>
 8000ea2:	f04f 35ff 	mov.w	r5, #4294967295
 8000ea6:	e7c2      	b.n	8000e2e <setvbuf+0xde>
 8000ea8:	2000005c 	.word	0x2000005c

08000eac <__sread>:
 8000eac:	b510      	push	{r4, lr}
 8000eae:	460c      	mov	r4, r1
 8000eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb4:	f000 f868 	bl	8000f88 <_read_r>
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	bfab      	itete	ge
 8000ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8000ec0:	181b      	addge	r3, r3, r0
 8000ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ec6:	bfac      	ite	ge
 8000ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eca:	81a3      	strhlt	r3, [r4, #12]
 8000ecc:	bd10      	pop	{r4, pc}

08000ece <__swrite>:
 8000ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed2:	461f      	mov	r7, r3
 8000ed4:	898b      	ldrh	r3, [r1, #12]
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	4605      	mov	r5, r0
 8000eda:	460c      	mov	r4, r1
 8000edc:	4616      	mov	r6, r2
 8000ede:	d505      	bpl.n	8000eec <__swrite+0x1e>
 8000ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f000 f83c 	bl	8000f64 <_lseek_r>
 8000eec:	89a3      	ldrh	r3, [r4, #12]
 8000eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ef6:	81a3      	strh	r3, [r4, #12]
 8000ef8:	4632      	mov	r2, r6
 8000efa:	463b      	mov	r3, r7
 8000efc:	4628      	mov	r0, r5
 8000efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f02:	f000 b853 	b.w	8000fac <_write_r>

08000f06 <__sseek>:
 8000f06:	b510      	push	{r4, lr}
 8000f08:	460c      	mov	r4, r1
 8000f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f0e:	f000 f829 	bl	8000f64 <_lseek_r>
 8000f12:	1c43      	adds	r3, r0, #1
 8000f14:	89a3      	ldrh	r3, [r4, #12]
 8000f16:	bf15      	itete	ne
 8000f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f22:	81a3      	strheq	r3, [r4, #12]
 8000f24:	bf18      	it	ne
 8000f26:	81a3      	strhne	r3, [r4, #12]
 8000f28:	bd10      	pop	{r4, pc}

08000f2a <__sclose>:
 8000f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2e:	f000 b809 	b.w	8000f44 <_close_r>

08000f32 <memset>:
 8000f32:	4402      	add	r2, r0
 8000f34:	4603      	mov	r3, r0
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d100      	bne.n	8000f3c <memset+0xa>
 8000f3a:	4770      	bx	lr
 8000f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8000f40:	e7f9      	b.n	8000f36 <memset+0x4>
	...

08000f44 <_close_r>:
 8000f44:	b538      	push	{r3, r4, r5, lr}
 8000f46:	4d06      	ldr	r5, [pc, #24]	; (8000f60 <_close_r+0x1c>)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	602b      	str	r3, [r5, #0]
 8000f50:	f7ff fdbf 	bl	8000ad2 <_close>
 8000f54:	1c43      	adds	r3, r0, #1
 8000f56:	d102      	bne.n	8000f5e <_close_r+0x1a>
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	b103      	cbz	r3, 8000f5e <_close_r+0x1a>
 8000f5c:	6023      	str	r3, [r4, #0]
 8000f5e:	bd38      	pop	{r3, r4, r5, pc}
 8000f60:	200001c0 	.word	0x200001c0

08000f64 <_lseek_r>:
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d07      	ldr	r5, [pc, #28]	; (8000f84 <_lseek_r+0x20>)
 8000f68:	4604      	mov	r4, r0
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	2200      	movs	r2, #0
 8000f70:	602a      	str	r2, [r5, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	f7ff fdd4 	bl	8000b20 <_lseek>
 8000f78:	1c43      	adds	r3, r0, #1
 8000f7a:	d102      	bne.n	8000f82 <_lseek_r+0x1e>
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	b103      	cbz	r3, 8000f82 <_lseek_r+0x1e>
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
 8000f84:	200001c0 	.word	0x200001c0

08000f88 <_read_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4d07      	ldr	r5, [pc, #28]	; (8000fa8 <_read_r+0x20>)
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4611      	mov	r1, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	602a      	str	r2, [r5, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f7ff fd62 	bl	8000a60 <_read>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_read_r+0x1e>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_read_r+0x1e>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	200001c0 	.word	0x200001c0

08000fac <_write_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d07      	ldr	r5, [pc, #28]	; (8000fcc <_write_r+0x20>)
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	602a      	str	r2, [r5, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f7ff fd6d 	bl	8000a9a <_write>
 8000fc0:	1c43      	adds	r3, r0, #1
 8000fc2:	d102      	bne.n	8000fca <_write_r+0x1e>
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	b103      	cbz	r3, 8000fca <_write_r+0x1e>
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	200001c0 	.word	0x200001c0

08000fd0 <__errno>:
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <__errno+0x8>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000005c 	.word	0x2000005c

08000fdc <__libc_init_array>:
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	4d0d      	ldr	r5, [pc, #52]	; (8001014 <__libc_init_array+0x38>)
 8000fe0:	4c0d      	ldr	r4, [pc, #52]	; (8001018 <__libc_init_array+0x3c>)
 8000fe2:	1b64      	subs	r4, r4, r5
 8000fe4:	10a4      	asrs	r4, r4, #2
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	42a6      	cmp	r6, r4
 8000fea:	d109      	bne.n	8001000 <__libc_init_array+0x24>
 8000fec:	4d0b      	ldr	r5, [pc, #44]	; (800101c <__libc_init_array+0x40>)
 8000fee:	4c0c      	ldr	r4, [pc, #48]	; (8001020 <__libc_init_array+0x44>)
 8000ff0:	f000 fdc8 	bl	8001b84 <_init>
 8000ff4:	1b64      	subs	r4, r4, r5
 8000ff6:	10a4      	asrs	r4, r4, #2
 8000ff8:	2600      	movs	r6, #0
 8000ffa:	42a6      	cmp	r6, r4
 8000ffc:	d105      	bne.n	800100a <__libc_init_array+0x2e>
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	f855 3b04 	ldr.w	r3, [r5], #4
 8001004:	4798      	blx	r3
 8001006:	3601      	adds	r6, #1
 8001008:	e7ee      	b.n	8000fe8 <__libc_init_array+0xc>
 800100a:	f855 3b04 	ldr.w	r3, [r5], #4
 800100e:	4798      	blx	r3
 8001010:	3601      	adds	r6, #1
 8001012:	e7f2      	b.n	8000ffa <__libc_init_array+0x1e>
 8001014:	08001bec 	.word	0x08001bec
 8001018:	08001bec 	.word	0x08001bec
 800101c:	08001bec 	.word	0x08001bec
 8001020:	08001bf0 	.word	0x08001bf0

08001024 <__retarget_lock_init_recursive>:
 8001024:	4770      	bx	lr

08001026 <__retarget_lock_acquire_recursive>:
 8001026:	4770      	bx	lr

08001028 <__retarget_lock_release_recursive>:
 8001028:	4770      	bx	lr
	...

0800102c <_free_r>:
 800102c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800102e:	2900      	cmp	r1, #0
 8001030:	d044      	beq.n	80010bc <_free_r+0x90>
 8001032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001036:	9001      	str	r0, [sp, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	f1a1 0404 	sub.w	r4, r1, #4
 800103e:	bfb8      	it	lt
 8001040:	18e4      	addlt	r4, r4, r3
 8001042:	f000 f8e7 	bl	8001214 <__malloc_lock>
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <_free_r+0x94>)
 8001048:	9801      	ldr	r0, [sp, #4]
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	b933      	cbnz	r3, 800105c <_free_r+0x30>
 800104e:	6063      	str	r3, [r4, #4]
 8001050:	6014      	str	r4, [r2, #0]
 8001052:	b003      	add	sp, #12
 8001054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001058:	f000 b8e2 	b.w	8001220 <__malloc_unlock>
 800105c:	42a3      	cmp	r3, r4
 800105e:	d908      	bls.n	8001072 <_free_r+0x46>
 8001060:	6825      	ldr	r5, [r4, #0]
 8001062:	1961      	adds	r1, r4, r5
 8001064:	428b      	cmp	r3, r1
 8001066:	bf01      	itttt	eq
 8001068:	6819      	ldreq	r1, [r3, #0]
 800106a:	685b      	ldreq	r3, [r3, #4]
 800106c:	1949      	addeq	r1, r1, r5
 800106e:	6021      	streq	r1, [r4, #0]
 8001070:	e7ed      	b.n	800104e <_free_r+0x22>
 8001072:	461a      	mov	r2, r3
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	b10b      	cbz	r3, 800107c <_free_r+0x50>
 8001078:	42a3      	cmp	r3, r4
 800107a:	d9fa      	bls.n	8001072 <_free_r+0x46>
 800107c:	6811      	ldr	r1, [r2, #0]
 800107e:	1855      	adds	r5, r2, r1
 8001080:	42a5      	cmp	r5, r4
 8001082:	d10b      	bne.n	800109c <_free_r+0x70>
 8001084:	6824      	ldr	r4, [r4, #0]
 8001086:	4421      	add	r1, r4
 8001088:	1854      	adds	r4, r2, r1
 800108a:	42a3      	cmp	r3, r4
 800108c:	6011      	str	r1, [r2, #0]
 800108e:	d1e0      	bne.n	8001052 <_free_r+0x26>
 8001090:	681c      	ldr	r4, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	6053      	str	r3, [r2, #4]
 8001096:	440c      	add	r4, r1
 8001098:	6014      	str	r4, [r2, #0]
 800109a:	e7da      	b.n	8001052 <_free_r+0x26>
 800109c:	d902      	bls.n	80010a4 <_free_r+0x78>
 800109e:	230c      	movs	r3, #12
 80010a0:	6003      	str	r3, [r0, #0]
 80010a2:	e7d6      	b.n	8001052 <_free_r+0x26>
 80010a4:	6825      	ldr	r5, [r4, #0]
 80010a6:	1961      	adds	r1, r4, r5
 80010a8:	428b      	cmp	r3, r1
 80010aa:	bf04      	itt	eq
 80010ac:	6819      	ldreq	r1, [r3, #0]
 80010ae:	685b      	ldreq	r3, [r3, #4]
 80010b0:	6063      	str	r3, [r4, #4]
 80010b2:	bf04      	itt	eq
 80010b4:	1949      	addeq	r1, r1, r5
 80010b6:	6021      	streq	r1, [r4, #0]
 80010b8:	6054      	str	r4, [r2, #4]
 80010ba:	e7ca      	b.n	8001052 <_free_r+0x26>
 80010bc:	b003      	add	sp, #12
 80010be:	bd30      	pop	{r4, r5, pc}
 80010c0:	200001c8 	.word	0x200001c8

080010c4 <malloc>:
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <malloc+0xc>)
 80010c6:	4601      	mov	r1, r0
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f000 b823 	b.w	8001114 <_malloc_r>
 80010ce:	bf00      	nop
 80010d0:	2000005c 	.word	0x2000005c

080010d4 <sbrk_aligned>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	4e0e      	ldr	r6, [pc, #56]	; (8001110 <sbrk_aligned+0x3c>)
 80010d8:	460c      	mov	r4, r1
 80010da:	6831      	ldr	r1, [r6, #0]
 80010dc:	4605      	mov	r5, r0
 80010de:	b911      	cbnz	r1, 80010e6 <sbrk_aligned+0x12>
 80010e0:	f000 fd40 	bl	8001b64 <_sbrk_r>
 80010e4:	6030      	str	r0, [r6, #0]
 80010e6:	4621      	mov	r1, r4
 80010e8:	4628      	mov	r0, r5
 80010ea:	f000 fd3b 	bl	8001b64 <_sbrk_r>
 80010ee:	1c43      	adds	r3, r0, #1
 80010f0:	d00a      	beq.n	8001108 <sbrk_aligned+0x34>
 80010f2:	1cc4      	adds	r4, r0, #3
 80010f4:	f024 0403 	bic.w	r4, r4, #3
 80010f8:	42a0      	cmp	r0, r4
 80010fa:	d007      	beq.n	800110c <sbrk_aligned+0x38>
 80010fc:	1a21      	subs	r1, r4, r0
 80010fe:	4628      	mov	r0, r5
 8001100:	f000 fd30 	bl	8001b64 <_sbrk_r>
 8001104:	3001      	adds	r0, #1
 8001106:	d101      	bne.n	800110c <sbrk_aligned+0x38>
 8001108:	f04f 34ff 	mov.w	r4, #4294967295
 800110c:	4620      	mov	r0, r4
 800110e:	bd70      	pop	{r4, r5, r6, pc}
 8001110:	200001cc 	.word	0x200001cc

08001114 <_malloc_r>:
 8001114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001118:	1ccd      	adds	r5, r1, #3
 800111a:	f025 0503 	bic.w	r5, r5, #3
 800111e:	3508      	adds	r5, #8
 8001120:	2d0c      	cmp	r5, #12
 8001122:	bf38      	it	cc
 8001124:	250c      	movcc	r5, #12
 8001126:	2d00      	cmp	r5, #0
 8001128:	4607      	mov	r7, r0
 800112a:	db01      	blt.n	8001130 <_malloc_r+0x1c>
 800112c:	42a9      	cmp	r1, r5
 800112e:	d905      	bls.n	800113c <_malloc_r+0x28>
 8001130:	230c      	movs	r3, #12
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	2600      	movs	r6, #0
 8001136:	4630      	mov	r0, r6
 8001138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800113c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001210 <_malloc_r+0xfc>
 8001140:	f000 f868 	bl	8001214 <__malloc_lock>
 8001144:	f8d8 3000 	ldr.w	r3, [r8]
 8001148:	461c      	mov	r4, r3
 800114a:	bb5c      	cbnz	r4, 80011a4 <_malloc_r+0x90>
 800114c:	4629      	mov	r1, r5
 800114e:	4638      	mov	r0, r7
 8001150:	f7ff ffc0 	bl	80010d4 <sbrk_aligned>
 8001154:	1c43      	adds	r3, r0, #1
 8001156:	4604      	mov	r4, r0
 8001158:	d155      	bne.n	8001206 <_malloc_r+0xf2>
 800115a:	f8d8 4000 	ldr.w	r4, [r8]
 800115e:	4626      	mov	r6, r4
 8001160:	2e00      	cmp	r6, #0
 8001162:	d145      	bne.n	80011f0 <_malloc_r+0xdc>
 8001164:	2c00      	cmp	r4, #0
 8001166:	d048      	beq.n	80011fa <_malloc_r+0xe6>
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	4631      	mov	r1, r6
 800116c:	4638      	mov	r0, r7
 800116e:	eb04 0903 	add.w	r9, r4, r3
 8001172:	f000 fcf7 	bl	8001b64 <_sbrk_r>
 8001176:	4581      	cmp	r9, r0
 8001178:	d13f      	bne.n	80011fa <_malloc_r+0xe6>
 800117a:	6821      	ldr	r1, [r4, #0]
 800117c:	1a6d      	subs	r5, r5, r1
 800117e:	4629      	mov	r1, r5
 8001180:	4638      	mov	r0, r7
 8001182:	f7ff ffa7 	bl	80010d4 <sbrk_aligned>
 8001186:	3001      	adds	r0, #1
 8001188:	d037      	beq.n	80011fa <_malloc_r+0xe6>
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	442b      	add	r3, r5
 800118e:	6023      	str	r3, [r4, #0]
 8001190:	f8d8 3000 	ldr.w	r3, [r8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d038      	beq.n	800120a <_malloc_r+0xf6>
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	42a2      	cmp	r2, r4
 800119c:	d12b      	bne.n	80011f6 <_malloc_r+0xe2>
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	e00f      	b.n	80011c4 <_malloc_r+0xb0>
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	1b52      	subs	r2, r2, r5
 80011a8:	d41f      	bmi.n	80011ea <_malloc_r+0xd6>
 80011aa:	2a0b      	cmp	r2, #11
 80011ac:	d917      	bls.n	80011de <_malloc_r+0xca>
 80011ae:	1961      	adds	r1, r4, r5
 80011b0:	42a3      	cmp	r3, r4
 80011b2:	6025      	str	r5, [r4, #0]
 80011b4:	bf18      	it	ne
 80011b6:	6059      	strne	r1, [r3, #4]
 80011b8:	6863      	ldr	r3, [r4, #4]
 80011ba:	bf08      	it	eq
 80011bc:	f8c8 1000 	streq.w	r1, [r8]
 80011c0:	5162      	str	r2, [r4, r5]
 80011c2:	604b      	str	r3, [r1, #4]
 80011c4:	4638      	mov	r0, r7
 80011c6:	f104 060b 	add.w	r6, r4, #11
 80011ca:	f000 f829 	bl	8001220 <__malloc_unlock>
 80011ce:	f026 0607 	bic.w	r6, r6, #7
 80011d2:	1d23      	adds	r3, r4, #4
 80011d4:	1af2      	subs	r2, r6, r3
 80011d6:	d0ae      	beq.n	8001136 <_malloc_r+0x22>
 80011d8:	1b9b      	subs	r3, r3, r6
 80011da:	50a3      	str	r3, [r4, r2]
 80011dc:	e7ab      	b.n	8001136 <_malloc_r+0x22>
 80011de:	42a3      	cmp	r3, r4
 80011e0:	6862      	ldr	r2, [r4, #4]
 80011e2:	d1dd      	bne.n	80011a0 <_malloc_r+0x8c>
 80011e4:	f8c8 2000 	str.w	r2, [r8]
 80011e8:	e7ec      	b.n	80011c4 <_malloc_r+0xb0>
 80011ea:	4623      	mov	r3, r4
 80011ec:	6864      	ldr	r4, [r4, #4]
 80011ee:	e7ac      	b.n	800114a <_malloc_r+0x36>
 80011f0:	4634      	mov	r4, r6
 80011f2:	6876      	ldr	r6, [r6, #4]
 80011f4:	e7b4      	b.n	8001160 <_malloc_r+0x4c>
 80011f6:	4613      	mov	r3, r2
 80011f8:	e7cc      	b.n	8001194 <_malloc_r+0x80>
 80011fa:	230c      	movs	r3, #12
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4638      	mov	r0, r7
 8001200:	f000 f80e 	bl	8001220 <__malloc_unlock>
 8001204:	e797      	b.n	8001136 <_malloc_r+0x22>
 8001206:	6025      	str	r5, [r4, #0]
 8001208:	e7dc      	b.n	80011c4 <_malloc_r+0xb0>
 800120a:	605b      	str	r3, [r3, #4]
 800120c:	deff      	udf	#255	; 0xff
 800120e:	bf00      	nop
 8001210:	200001c8 	.word	0x200001c8

08001214 <__malloc_lock>:
 8001214:	4801      	ldr	r0, [pc, #4]	; (800121c <__malloc_lock+0x8>)
 8001216:	f7ff bf06 	b.w	8001026 <__retarget_lock_acquire_recursive>
 800121a:	bf00      	nop
 800121c:	200001c4 	.word	0x200001c4

08001220 <__malloc_unlock>:
 8001220:	4801      	ldr	r0, [pc, #4]	; (8001228 <__malloc_unlock+0x8>)
 8001222:	f7ff bf01 	b.w	8001028 <__retarget_lock_release_recursive>
 8001226:	bf00      	nop
 8001228:	200001c4 	.word	0x200001c4

0800122c <__sfputc_r>:
 800122c:	6893      	ldr	r3, [r2, #8]
 800122e:	3b01      	subs	r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	b410      	push	{r4}
 8001234:	6093      	str	r3, [r2, #8]
 8001236:	da08      	bge.n	800124a <__sfputc_r+0x1e>
 8001238:	6994      	ldr	r4, [r2, #24]
 800123a:	42a3      	cmp	r3, r4
 800123c:	db01      	blt.n	8001242 <__sfputc_r+0x16>
 800123e:	290a      	cmp	r1, #10
 8001240:	d103      	bne.n	800124a <__sfputc_r+0x1e>
 8001242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001246:	f000 bbd5 	b.w	80019f4 <__swbuf_r>
 800124a:	6813      	ldr	r3, [r2, #0]
 800124c:	1c58      	adds	r0, r3, #1
 800124e:	6010      	str	r0, [r2, #0]
 8001250:	7019      	strb	r1, [r3, #0]
 8001252:	4608      	mov	r0, r1
 8001254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001258:	4770      	bx	lr

0800125a <__sfputs_r>:
 800125a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125c:	4606      	mov	r6, r0
 800125e:	460f      	mov	r7, r1
 8001260:	4614      	mov	r4, r2
 8001262:	18d5      	adds	r5, r2, r3
 8001264:	42ac      	cmp	r4, r5
 8001266:	d101      	bne.n	800126c <__sfputs_r+0x12>
 8001268:	2000      	movs	r0, #0
 800126a:	e007      	b.n	800127c <__sfputs_r+0x22>
 800126c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001270:	463a      	mov	r2, r7
 8001272:	4630      	mov	r0, r6
 8001274:	f7ff ffda 	bl	800122c <__sfputc_r>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d1f3      	bne.n	8001264 <__sfputs_r+0xa>
 800127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001280 <_vfiprintf_r>:
 8001280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001284:	460d      	mov	r5, r1
 8001286:	b09d      	sub	sp, #116	; 0x74
 8001288:	4614      	mov	r4, r2
 800128a:	4698      	mov	r8, r3
 800128c:	4606      	mov	r6, r0
 800128e:	b118      	cbz	r0, 8001298 <_vfiprintf_r+0x18>
 8001290:	6a03      	ldr	r3, [r0, #32]
 8001292:	b90b      	cbnz	r3, 8001298 <_vfiprintf_r+0x18>
 8001294:	f7ff fd14 	bl	8000cc0 <__sinit>
 8001298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800129a:	07d9      	lsls	r1, r3, #31
 800129c:	d405      	bmi.n	80012aa <_vfiprintf_r+0x2a>
 800129e:	89ab      	ldrh	r3, [r5, #12]
 80012a0:	059a      	lsls	r2, r3, #22
 80012a2:	d402      	bmi.n	80012aa <_vfiprintf_r+0x2a>
 80012a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012a6:	f7ff febe 	bl	8001026 <__retarget_lock_acquire_recursive>
 80012aa:	89ab      	ldrh	r3, [r5, #12]
 80012ac:	071b      	lsls	r3, r3, #28
 80012ae:	d501      	bpl.n	80012b4 <_vfiprintf_r+0x34>
 80012b0:	692b      	ldr	r3, [r5, #16]
 80012b2:	b99b      	cbnz	r3, 80012dc <_vfiprintf_r+0x5c>
 80012b4:	4629      	mov	r1, r5
 80012b6:	4630      	mov	r0, r6
 80012b8:	f000 fbda 	bl	8001a70 <__swsetup_r>
 80012bc:	b170      	cbz	r0, 80012dc <_vfiprintf_r+0x5c>
 80012be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012c0:	07dc      	lsls	r4, r3, #31
 80012c2:	d504      	bpl.n	80012ce <_vfiprintf_r+0x4e>
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	b01d      	add	sp, #116	; 0x74
 80012ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ce:	89ab      	ldrh	r3, [r5, #12]
 80012d0:	0598      	lsls	r0, r3, #22
 80012d2:	d4f7      	bmi.n	80012c4 <_vfiprintf_r+0x44>
 80012d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012d6:	f7ff fea7 	bl	8001028 <__retarget_lock_release_recursive>
 80012da:	e7f3      	b.n	80012c4 <_vfiprintf_r+0x44>
 80012dc:	2300      	movs	r3, #0
 80012de:	9309      	str	r3, [sp, #36]	; 0x24
 80012e0:	2320      	movs	r3, #32
 80012e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80012ea:	2330      	movs	r3, #48	; 0x30
 80012ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80014a0 <_vfiprintf_r+0x220>
 80012f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012f4:	f04f 0901 	mov.w	r9, #1
 80012f8:	4623      	mov	r3, r4
 80012fa:	469a      	mov	sl, r3
 80012fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001300:	b10a      	cbz	r2, 8001306 <_vfiprintf_r+0x86>
 8001302:	2a25      	cmp	r2, #37	; 0x25
 8001304:	d1f9      	bne.n	80012fa <_vfiprintf_r+0x7a>
 8001306:	ebba 0b04 	subs.w	fp, sl, r4
 800130a:	d00b      	beq.n	8001324 <_vfiprintf_r+0xa4>
 800130c:	465b      	mov	r3, fp
 800130e:	4622      	mov	r2, r4
 8001310:	4629      	mov	r1, r5
 8001312:	4630      	mov	r0, r6
 8001314:	f7ff ffa1 	bl	800125a <__sfputs_r>
 8001318:	3001      	adds	r0, #1
 800131a:	f000 80a9 	beq.w	8001470 <_vfiprintf_r+0x1f0>
 800131e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001320:	445a      	add	r2, fp
 8001322:	9209      	str	r2, [sp, #36]	; 0x24
 8001324:	f89a 3000 	ldrb.w	r3, [sl]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80a1 	beq.w	8001470 <_vfiprintf_r+0x1f0>
 800132e:	2300      	movs	r3, #0
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001338:	f10a 0a01 	add.w	sl, sl, #1
 800133c:	9304      	str	r3, [sp, #16]
 800133e:	9307      	str	r3, [sp, #28]
 8001340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001344:	931a      	str	r3, [sp, #104]	; 0x68
 8001346:	4654      	mov	r4, sl
 8001348:	2205      	movs	r2, #5
 800134a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800134e:	4854      	ldr	r0, [pc, #336]	; (80014a0 <_vfiprintf_r+0x220>)
 8001350:	f7fe ff46 	bl	80001e0 <memchr>
 8001354:	9a04      	ldr	r2, [sp, #16]
 8001356:	b9d8      	cbnz	r0, 8001390 <_vfiprintf_r+0x110>
 8001358:	06d1      	lsls	r1, r2, #27
 800135a:	bf44      	itt	mi
 800135c:	2320      	movmi	r3, #32
 800135e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001362:	0713      	lsls	r3, r2, #28
 8001364:	bf44      	itt	mi
 8001366:	232b      	movmi	r3, #43	; 0x2b
 8001368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800136c:	f89a 3000 	ldrb.w	r3, [sl]
 8001370:	2b2a      	cmp	r3, #42	; 0x2a
 8001372:	d015      	beq.n	80013a0 <_vfiprintf_r+0x120>
 8001374:	9a07      	ldr	r2, [sp, #28]
 8001376:	4654      	mov	r4, sl
 8001378:	2000      	movs	r0, #0
 800137a:	f04f 0c0a 	mov.w	ip, #10
 800137e:	4621      	mov	r1, r4
 8001380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001384:	3b30      	subs	r3, #48	; 0x30
 8001386:	2b09      	cmp	r3, #9
 8001388:	d94d      	bls.n	8001426 <_vfiprintf_r+0x1a6>
 800138a:	b1b0      	cbz	r0, 80013ba <_vfiprintf_r+0x13a>
 800138c:	9207      	str	r2, [sp, #28]
 800138e:	e014      	b.n	80013ba <_vfiprintf_r+0x13a>
 8001390:	eba0 0308 	sub.w	r3, r0, r8
 8001394:	fa09 f303 	lsl.w	r3, r9, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	9304      	str	r3, [sp, #16]
 800139c:	46a2      	mov	sl, r4
 800139e:	e7d2      	b.n	8001346 <_vfiprintf_r+0xc6>
 80013a0:	9b03      	ldr	r3, [sp, #12]
 80013a2:	1d19      	adds	r1, r3, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	9103      	str	r1, [sp, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bfbb      	ittet	lt
 80013ac:	425b      	neglt	r3, r3
 80013ae:	f042 0202 	orrlt.w	r2, r2, #2
 80013b2:	9307      	strge	r3, [sp, #28]
 80013b4:	9307      	strlt	r3, [sp, #28]
 80013b6:	bfb8      	it	lt
 80013b8:	9204      	strlt	r2, [sp, #16]
 80013ba:	7823      	ldrb	r3, [r4, #0]
 80013bc:	2b2e      	cmp	r3, #46	; 0x2e
 80013be:	d10c      	bne.n	80013da <_vfiprintf_r+0x15a>
 80013c0:	7863      	ldrb	r3, [r4, #1]
 80013c2:	2b2a      	cmp	r3, #42	; 0x2a
 80013c4:	d134      	bne.n	8001430 <_vfiprintf_r+0x1b0>
 80013c6:	9b03      	ldr	r3, [sp, #12]
 80013c8:	1d1a      	adds	r2, r3, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	9203      	str	r2, [sp, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfb8      	it	lt
 80013d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80013d6:	3402      	adds	r4, #2
 80013d8:	9305      	str	r3, [sp, #20]
 80013da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80014b0 <_vfiprintf_r+0x230>
 80013de:	7821      	ldrb	r1, [r4, #0]
 80013e0:	2203      	movs	r2, #3
 80013e2:	4650      	mov	r0, sl
 80013e4:	f7fe fefc 	bl	80001e0 <memchr>
 80013e8:	b138      	cbz	r0, 80013fa <_vfiprintf_r+0x17a>
 80013ea:	9b04      	ldr	r3, [sp, #16]
 80013ec:	eba0 000a 	sub.w	r0, r0, sl
 80013f0:	2240      	movs	r2, #64	; 0x40
 80013f2:	4082      	lsls	r2, r0
 80013f4:	4313      	orrs	r3, r2
 80013f6:	3401      	adds	r4, #1
 80013f8:	9304      	str	r3, [sp, #16]
 80013fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013fe:	4829      	ldr	r0, [pc, #164]	; (80014a4 <_vfiprintf_r+0x224>)
 8001400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001404:	2206      	movs	r2, #6
 8001406:	f7fe feeb 	bl	80001e0 <memchr>
 800140a:	2800      	cmp	r0, #0
 800140c:	d03f      	beq.n	800148e <_vfiprintf_r+0x20e>
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <_vfiprintf_r+0x228>)
 8001410:	bb1b      	cbnz	r3, 800145a <_vfiprintf_r+0x1da>
 8001412:	9b03      	ldr	r3, [sp, #12]
 8001414:	3307      	adds	r3, #7
 8001416:	f023 0307 	bic.w	r3, r3, #7
 800141a:	3308      	adds	r3, #8
 800141c:	9303      	str	r3, [sp, #12]
 800141e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001420:	443b      	add	r3, r7
 8001422:	9309      	str	r3, [sp, #36]	; 0x24
 8001424:	e768      	b.n	80012f8 <_vfiprintf_r+0x78>
 8001426:	fb0c 3202 	mla	r2, ip, r2, r3
 800142a:	460c      	mov	r4, r1
 800142c:	2001      	movs	r0, #1
 800142e:	e7a6      	b.n	800137e <_vfiprintf_r+0xfe>
 8001430:	2300      	movs	r3, #0
 8001432:	3401      	adds	r4, #1
 8001434:	9305      	str	r3, [sp, #20]
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 0c0a 	mov.w	ip, #10
 800143c:	4620      	mov	r0, r4
 800143e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001442:	3a30      	subs	r2, #48	; 0x30
 8001444:	2a09      	cmp	r2, #9
 8001446:	d903      	bls.n	8001450 <_vfiprintf_r+0x1d0>
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0c6      	beq.n	80013da <_vfiprintf_r+0x15a>
 800144c:	9105      	str	r1, [sp, #20]
 800144e:	e7c4      	b.n	80013da <_vfiprintf_r+0x15a>
 8001450:	fb0c 2101 	mla	r1, ip, r1, r2
 8001454:	4604      	mov	r4, r0
 8001456:	2301      	movs	r3, #1
 8001458:	e7f0      	b.n	800143c <_vfiprintf_r+0x1bc>
 800145a:	ab03      	add	r3, sp, #12
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	462a      	mov	r2, r5
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <_vfiprintf_r+0x22c>)
 8001462:	a904      	add	r1, sp, #16
 8001464:	4630      	mov	r0, r6
 8001466:	f3af 8000 	nop.w
 800146a:	4607      	mov	r7, r0
 800146c:	1c78      	adds	r0, r7, #1
 800146e:	d1d6      	bne.n	800141e <_vfiprintf_r+0x19e>
 8001470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001472:	07d9      	lsls	r1, r3, #31
 8001474:	d405      	bmi.n	8001482 <_vfiprintf_r+0x202>
 8001476:	89ab      	ldrh	r3, [r5, #12]
 8001478:	059a      	lsls	r2, r3, #22
 800147a:	d402      	bmi.n	8001482 <_vfiprintf_r+0x202>
 800147c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800147e:	f7ff fdd3 	bl	8001028 <__retarget_lock_release_recursive>
 8001482:	89ab      	ldrh	r3, [r5, #12]
 8001484:	065b      	lsls	r3, r3, #25
 8001486:	f53f af1d 	bmi.w	80012c4 <_vfiprintf_r+0x44>
 800148a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800148c:	e71c      	b.n	80012c8 <_vfiprintf_r+0x48>
 800148e:	ab03      	add	r3, sp, #12
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	462a      	mov	r2, r5
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <_vfiprintf_r+0x22c>)
 8001496:	a904      	add	r1, sp, #16
 8001498:	4630      	mov	r0, r6
 800149a:	f000 f879 	bl	8001590 <_printf_i>
 800149e:	e7e4      	b.n	800146a <_vfiprintf_r+0x1ea>
 80014a0:	08001bb8 	.word	0x08001bb8
 80014a4:	08001bc2 	.word	0x08001bc2
 80014a8:	00000000 	.word	0x00000000
 80014ac:	0800125b 	.word	0x0800125b
 80014b0:	08001bbe 	.word	0x08001bbe

080014b4 <_printf_common>:
 80014b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b8:	4616      	mov	r6, r2
 80014ba:	4699      	mov	r9, r3
 80014bc:	688a      	ldr	r2, [r1, #8]
 80014be:	690b      	ldr	r3, [r1, #16]
 80014c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bfb8      	it	lt
 80014c8:	4613      	movlt	r3, r2
 80014ca:	6033      	str	r3, [r6, #0]
 80014cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014d0:	4607      	mov	r7, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	b10a      	cbz	r2, 80014da <_printf_common+0x26>
 80014d6:	3301      	adds	r3, #1
 80014d8:	6033      	str	r3, [r6, #0]
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	0699      	lsls	r1, r3, #26
 80014de:	bf42      	ittt	mi
 80014e0:	6833      	ldrmi	r3, [r6, #0]
 80014e2:	3302      	addmi	r3, #2
 80014e4:	6033      	strmi	r3, [r6, #0]
 80014e6:	6825      	ldr	r5, [r4, #0]
 80014e8:	f015 0506 	ands.w	r5, r5, #6
 80014ec:	d106      	bne.n	80014fc <_printf_common+0x48>
 80014ee:	f104 0a19 	add.w	sl, r4, #25
 80014f2:	68e3      	ldr	r3, [r4, #12]
 80014f4:	6832      	ldr	r2, [r6, #0]
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	42ab      	cmp	r3, r5
 80014fa:	dc26      	bgt.n	800154a <_printf_common+0x96>
 80014fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001500:	1e13      	subs	r3, r2, #0
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	bf18      	it	ne
 8001506:	2301      	movne	r3, #1
 8001508:	0692      	lsls	r2, r2, #26
 800150a:	d42b      	bmi.n	8001564 <_printf_common+0xb0>
 800150c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001510:	4649      	mov	r1, r9
 8001512:	4638      	mov	r0, r7
 8001514:	47c0      	blx	r8
 8001516:	3001      	adds	r0, #1
 8001518:	d01e      	beq.n	8001558 <_printf_common+0xa4>
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	6922      	ldr	r2, [r4, #16]
 800151e:	f003 0306 	and.w	r3, r3, #6
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf02      	ittt	eq
 8001526:	68e5      	ldreq	r5, [r4, #12]
 8001528:	6833      	ldreq	r3, [r6, #0]
 800152a:	1aed      	subeq	r5, r5, r3
 800152c:	68a3      	ldr	r3, [r4, #8]
 800152e:	bf0c      	ite	eq
 8001530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001534:	2500      	movne	r5, #0
 8001536:	4293      	cmp	r3, r2
 8001538:	bfc4      	itt	gt
 800153a:	1a9b      	subgt	r3, r3, r2
 800153c:	18ed      	addgt	r5, r5, r3
 800153e:	2600      	movs	r6, #0
 8001540:	341a      	adds	r4, #26
 8001542:	42b5      	cmp	r5, r6
 8001544:	d11a      	bne.n	800157c <_printf_common+0xc8>
 8001546:	2000      	movs	r0, #0
 8001548:	e008      	b.n	800155c <_printf_common+0xa8>
 800154a:	2301      	movs	r3, #1
 800154c:	4652      	mov	r2, sl
 800154e:	4649      	mov	r1, r9
 8001550:	4638      	mov	r0, r7
 8001552:	47c0      	blx	r8
 8001554:	3001      	adds	r0, #1
 8001556:	d103      	bne.n	8001560 <_printf_common+0xac>
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001560:	3501      	adds	r5, #1
 8001562:	e7c6      	b.n	80014f2 <_printf_common+0x3e>
 8001564:	18e1      	adds	r1, r4, r3
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	2030      	movs	r0, #48	; 0x30
 800156a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800156e:	4422      	add	r2, r4
 8001570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001578:	3302      	adds	r3, #2
 800157a:	e7c7      	b.n	800150c <_printf_common+0x58>
 800157c:	2301      	movs	r3, #1
 800157e:	4622      	mov	r2, r4
 8001580:	4649      	mov	r1, r9
 8001582:	4638      	mov	r0, r7
 8001584:	47c0      	blx	r8
 8001586:	3001      	adds	r0, #1
 8001588:	d0e6      	beq.n	8001558 <_printf_common+0xa4>
 800158a:	3601      	adds	r6, #1
 800158c:	e7d9      	b.n	8001542 <_printf_common+0x8e>
	...

08001590 <_printf_i>:
 8001590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001594:	7e0f      	ldrb	r7, [r1, #24]
 8001596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001598:	2f78      	cmp	r7, #120	; 0x78
 800159a:	4691      	mov	r9, r2
 800159c:	4680      	mov	r8, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	469a      	mov	sl, r3
 80015a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80015a6:	d807      	bhi.n	80015b8 <_printf_i+0x28>
 80015a8:	2f62      	cmp	r7, #98	; 0x62
 80015aa:	d80a      	bhi.n	80015c2 <_printf_i+0x32>
 80015ac:	2f00      	cmp	r7, #0
 80015ae:	f000 80d4 	beq.w	800175a <_printf_i+0x1ca>
 80015b2:	2f58      	cmp	r7, #88	; 0x58
 80015b4:	f000 80c0 	beq.w	8001738 <_printf_i+0x1a8>
 80015b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80015c0:	e03a      	b.n	8001638 <_printf_i+0xa8>
 80015c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80015c6:	2b15      	cmp	r3, #21
 80015c8:	d8f6      	bhi.n	80015b8 <_printf_i+0x28>
 80015ca:	a101      	add	r1, pc, #4	; (adr r1, 80015d0 <_printf_i+0x40>)
 80015cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80015d0:	08001629 	.word	0x08001629
 80015d4:	0800163d 	.word	0x0800163d
 80015d8:	080015b9 	.word	0x080015b9
 80015dc:	080015b9 	.word	0x080015b9
 80015e0:	080015b9 	.word	0x080015b9
 80015e4:	080015b9 	.word	0x080015b9
 80015e8:	0800163d 	.word	0x0800163d
 80015ec:	080015b9 	.word	0x080015b9
 80015f0:	080015b9 	.word	0x080015b9
 80015f4:	080015b9 	.word	0x080015b9
 80015f8:	080015b9 	.word	0x080015b9
 80015fc:	08001741 	.word	0x08001741
 8001600:	08001669 	.word	0x08001669
 8001604:	080016fb 	.word	0x080016fb
 8001608:	080015b9 	.word	0x080015b9
 800160c:	080015b9 	.word	0x080015b9
 8001610:	08001763 	.word	0x08001763
 8001614:	080015b9 	.word	0x080015b9
 8001618:	08001669 	.word	0x08001669
 800161c:	080015b9 	.word	0x080015b9
 8001620:	080015b9 	.word	0x080015b9
 8001624:	08001703 	.word	0x08001703
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	1d1a      	adds	r2, r3, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	602a      	str	r2, [r5, #0]
 8001630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001638:	2301      	movs	r3, #1
 800163a:	e09f      	b.n	800177c <_printf_i+0x1ec>
 800163c:	6820      	ldr	r0, [r4, #0]
 800163e:	682b      	ldr	r3, [r5, #0]
 8001640:	0607      	lsls	r7, r0, #24
 8001642:	f103 0104 	add.w	r1, r3, #4
 8001646:	6029      	str	r1, [r5, #0]
 8001648:	d501      	bpl.n	800164e <_printf_i+0xbe>
 800164a:	681e      	ldr	r6, [r3, #0]
 800164c:	e003      	b.n	8001656 <_printf_i+0xc6>
 800164e:	0646      	lsls	r6, r0, #25
 8001650:	d5fb      	bpl.n	800164a <_printf_i+0xba>
 8001652:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001656:	2e00      	cmp	r6, #0
 8001658:	da03      	bge.n	8001662 <_printf_i+0xd2>
 800165a:	232d      	movs	r3, #45	; 0x2d
 800165c:	4276      	negs	r6, r6
 800165e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001662:	485a      	ldr	r0, [pc, #360]	; (80017cc <_printf_i+0x23c>)
 8001664:	230a      	movs	r3, #10
 8001666:	e012      	b.n	800168e <_printf_i+0xfe>
 8001668:	682b      	ldr	r3, [r5, #0]
 800166a:	6820      	ldr	r0, [r4, #0]
 800166c:	1d19      	adds	r1, r3, #4
 800166e:	6029      	str	r1, [r5, #0]
 8001670:	0605      	lsls	r5, r0, #24
 8001672:	d501      	bpl.n	8001678 <_printf_i+0xe8>
 8001674:	681e      	ldr	r6, [r3, #0]
 8001676:	e002      	b.n	800167e <_printf_i+0xee>
 8001678:	0641      	lsls	r1, r0, #25
 800167a:	d5fb      	bpl.n	8001674 <_printf_i+0xe4>
 800167c:	881e      	ldrh	r6, [r3, #0]
 800167e:	4853      	ldr	r0, [pc, #332]	; (80017cc <_printf_i+0x23c>)
 8001680:	2f6f      	cmp	r7, #111	; 0x6f
 8001682:	bf0c      	ite	eq
 8001684:	2308      	moveq	r3, #8
 8001686:	230a      	movne	r3, #10
 8001688:	2100      	movs	r1, #0
 800168a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800168e:	6865      	ldr	r5, [r4, #4]
 8001690:	60a5      	str	r5, [r4, #8]
 8001692:	2d00      	cmp	r5, #0
 8001694:	bfa2      	ittt	ge
 8001696:	6821      	ldrge	r1, [r4, #0]
 8001698:	f021 0104 	bicge.w	r1, r1, #4
 800169c:	6021      	strge	r1, [r4, #0]
 800169e:	b90e      	cbnz	r6, 80016a4 <_printf_i+0x114>
 80016a0:	2d00      	cmp	r5, #0
 80016a2:	d04b      	beq.n	800173c <_printf_i+0x1ac>
 80016a4:	4615      	mov	r5, r2
 80016a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80016aa:	fb03 6711 	mls	r7, r3, r1, r6
 80016ae:	5dc7      	ldrb	r7, [r0, r7]
 80016b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80016b4:	4637      	mov	r7, r6
 80016b6:	42bb      	cmp	r3, r7
 80016b8:	460e      	mov	r6, r1
 80016ba:	d9f4      	bls.n	80016a6 <_printf_i+0x116>
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d10b      	bne.n	80016d8 <_printf_i+0x148>
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	07de      	lsls	r6, r3, #31
 80016c4:	d508      	bpl.n	80016d8 <_printf_i+0x148>
 80016c6:	6923      	ldr	r3, [r4, #16]
 80016c8:	6861      	ldr	r1, [r4, #4]
 80016ca:	4299      	cmp	r1, r3
 80016cc:	bfde      	ittt	le
 80016ce:	2330      	movle	r3, #48	; 0x30
 80016d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80016d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80016d8:	1b52      	subs	r2, r2, r5
 80016da:	6122      	str	r2, [r4, #16]
 80016dc:	f8cd a000 	str.w	sl, [sp]
 80016e0:	464b      	mov	r3, r9
 80016e2:	aa03      	add	r2, sp, #12
 80016e4:	4621      	mov	r1, r4
 80016e6:	4640      	mov	r0, r8
 80016e8:	f7ff fee4 	bl	80014b4 <_printf_common>
 80016ec:	3001      	adds	r0, #1
 80016ee:	d14a      	bne.n	8001786 <_printf_i+0x1f6>
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	b004      	add	sp, #16
 80016f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	f043 0320 	orr.w	r3, r3, #32
 8001700:	6023      	str	r3, [r4, #0]
 8001702:	4833      	ldr	r0, [pc, #204]	; (80017d0 <_printf_i+0x240>)
 8001704:	2778      	movs	r7, #120	; 0x78
 8001706:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	6829      	ldr	r1, [r5, #0]
 800170e:	061f      	lsls	r7, r3, #24
 8001710:	f851 6b04 	ldr.w	r6, [r1], #4
 8001714:	d402      	bmi.n	800171c <_printf_i+0x18c>
 8001716:	065f      	lsls	r7, r3, #25
 8001718:	bf48      	it	mi
 800171a:	b2b6      	uxthmi	r6, r6
 800171c:	07df      	lsls	r7, r3, #31
 800171e:	bf48      	it	mi
 8001720:	f043 0320 	orrmi.w	r3, r3, #32
 8001724:	6029      	str	r1, [r5, #0]
 8001726:	bf48      	it	mi
 8001728:	6023      	strmi	r3, [r4, #0]
 800172a:	b91e      	cbnz	r6, 8001734 <_printf_i+0x1a4>
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f023 0320 	bic.w	r3, r3, #32
 8001732:	6023      	str	r3, [r4, #0]
 8001734:	2310      	movs	r3, #16
 8001736:	e7a7      	b.n	8001688 <_printf_i+0xf8>
 8001738:	4824      	ldr	r0, [pc, #144]	; (80017cc <_printf_i+0x23c>)
 800173a:	e7e4      	b.n	8001706 <_printf_i+0x176>
 800173c:	4615      	mov	r5, r2
 800173e:	e7bd      	b.n	80016bc <_printf_i+0x12c>
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	6826      	ldr	r6, [r4, #0]
 8001744:	6961      	ldr	r1, [r4, #20]
 8001746:	1d18      	adds	r0, r3, #4
 8001748:	6028      	str	r0, [r5, #0]
 800174a:	0635      	lsls	r5, r6, #24
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	d501      	bpl.n	8001754 <_printf_i+0x1c4>
 8001750:	6019      	str	r1, [r3, #0]
 8001752:	e002      	b.n	800175a <_printf_i+0x1ca>
 8001754:	0670      	lsls	r0, r6, #25
 8001756:	d5fb      	bpl.n	8001750 <_printf_i+0x1c0>
 8001758:	8019      	strh	r1, [r3, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	6123      	str	r3, [r4, #16]
 800175e:	4615      	mov	r5, r2
 8001760:	e7bc      	b.n	80016dc <_printf_i+0x14c>
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	1d1a      	adds	r2, r3, #4
 8001766:	602a      	str	r2, [r5, #0]
 8001768:	681d      	ldr	r5, [r3, #0]
 800176a:	6862      	ldr	r2, [r4, #4]
 800176c:	2100      	movs	r1, #0
 800176e:	4628      	mov	r0, r5
 8001770:	f7fe fd36 	bl	80001e0 <memchr>
 8001774:	b108      	cbz	r0, 800177a <_printf_i+0x1ea>
 8001776:	1b40      	subs	r0, r0, r5
 8001778:	6060      	str	r0, [r4, #4]
 800177a:	6863      	ldr	r3, [r4, #4]
 800177c:	6123      	str	r3, [r4, #16]
 800177e:	2300      	movs	r3, #0
 8001780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001784:	e7aa      	b.n	80016dc <_printf_i+0x14c>
 8001786:	6923      	ldr	r3, [r4, #16]
 8001788:	462a      	mov	r2, r5
 800178a:	4649      	mov	r1, r9
 800178c:	4640      	mov	r0, r8
 800178e:	47d0      	blx	sl
 8001790:	3001      	adds	r0, #1
 8001792:	d0ad      	beq.n	80016f0 <_printf_i+0x160>
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	079b      	lsls	r3, r3, #30
 8001798:	d413      	bmi.n	80017c2 <_printf_i+0x232>
 800179a:	68e0      	ldr	r0, [r4, #12]
 800179c:	9b03      	ldr	r3, [sp, #12]
 800179e:	4298      	cmp	r0, r3
 80017a0:	bfb8      	it	lt
 80017a2:	4618      	movlt	r0, r3
 80017a4:	e7a6      	b.n	80016f4 <_printf_i+0x164>
 80017a6:	2301      	movs	r3, #1
 80017a8:	4632      	mov	r2, r6
 80017aa:	4649      	mov	r1, r9
 80017ac:	4640      	mov	r0, r8
 80017ae:	47d0      	blx	sl
 80017b0:	3001      	adds	r0, #1
 80017b2:	d09d      	beq.n	80016f0 <_printf_i+0x160>
 80017b4:	3501      	adds	r5, #1
 80017b6:	68e3      	ldr	r3, [r4, #12]
 80017b8:	9903      	ldr	r1, [sp, #12]
 80017ba:	1a5b      	subs	r3, r3, r1
 80017bc:	42ab      	cmp	r3, r5
 80017be:	dcf2      	bgt.n	80017a6 <_printf_i+0x216>
 80017c0:	e7eb      	b.n	800179a <_printf_i+0x20a>
 80017c2:	2500      	movs	r5, #0
 80017c4:	f104 0619 	add.w	r6, r4, #25
 80017c8:	e7f5      	b.n	80017b6 <_printf_i+0x226>
 80017ca:	bf00      	nop
 80017cc:	08001bc9 	.word	0x08001bc9
 80017d0:	08001bda 	.word	0x08001bda

080017d4 <__sflush_r>:
 80017d4:	898a      	ldrh	r2, [r1, #12]
 80017d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017da:	4605      	mov	r5, r0
 80017dc:	0710      	lsls	r0, r2, #28
 80017de:	460c      	mov	r4, r1
 80017e0:	d458      	bmi.n	8001894 <__sflush_r+0xc0>
 80017e2:	684b      	ldr	r3, [r1, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dc05      	bgt.n	80017f4 <__sflush_r+0x20>
 80017e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dc02      	bgt.n	80017f4 <__sflush_r+0x20>
 80017ee:	2000      	movs	r0, #0
 80017f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017f6:	2e00      	cmp	r6, #0
 80017f8:	d0f9      	beq.n	80017ee <__sflush_r+0x1a>
 80017fa:	2300      	movs	r3, #0
 80017fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001800:	682f      	ldr	r7, [r5, #0]
 8001802:	6a21      	ldr	r1, [r4, #32]
 8001804:	602b      	str	r3, [r5, #0]
 8001806:	d032      	beq.n	800186e <__sflush_r+0x9a>
 8001808:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800180a:	89a3      	ldrh	r3, [r4, #12]
 800180c:	075a      	lsls	r2, r3, #29
 800180e:	d505      	bpl.n	800181c <__sflush_r+0x48>
 8001810:	6863      	ldr	r3, [r4, #4]
 8001812:	1ac0      	subs	r0, r0, r3
 8001814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001816:	b10b      	cbz	r3, 800181c <__sflush_r+0x48>
 8001818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800181a:	1ac0      	subs	r0, r0, r3
 800181c:	2300      	movs	r3, #0
 800181e:	4602      	mov	r2, r0
 8001820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001822:	6a21      	ldr	r1, [r4, #32]
 8001824:	4628      	mov	r0, r5
 8001826:	47b0      	blx	r6
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	d106      	bne.n	800183c <__sflush_r+0x68>
 800182e:	6829      	ldr	r1, [r5, #0]
 8001830:	291d      	cmp	r1, #29
 8001832:	d82b      	bhi.n	800188c <__sflush_r+0xb8>
 8001834:	4a29      	ldr	r2, [pc, #164]	; (80018dc <__sflush_r+0x108>)
 8001836:	410a      	asrs	r2, r1
 8001838:	07d6      	lsls	r6, r2, #31
 800183a:	d427      	bmi.n	800188c <__sflush_r+0xb8>
 800183c:	2200      	movs	r2, #0
 800183e:	6062      	str	r2, [r4, #4]
 8001840:	04d9      	lsls	r1, r3, #19
 8001842:	6922      	ldr	r2, [r4, #16]
 8001844:	6022      	str	r2, [r4, #0]
 8001846:	d504      	bpl.n	8001852 <__sflush_r+0x7e>
 8001848:	1c42      	adds	r2, r0, #1
 800184a:	d101      	bne.n	8001850 <__sflush_r+0x7c>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	b903      	cbnz	r3, 8001852 <__sflush_r+0x7e>
 8001850:	6560      	str	r0, [r4, #84]	; 0x54
 8001852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001854:	602f      	str	r7, [r5, #0]
 8001856:	2900      	cmp	r1, #0
 8001858:	d0c9      	beq.n	80017ee <__sflush_r+0x1a>
 800185a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800185e:	4299      	cmp	r1, r3
 8001860:	d002      	beq.n	8001868 <__sflush_r+0x94>
 8001862:	4628      	mov	r0, r5
 8001864:	f7ff fbe2 	bl	800102c <_free_r>
 8001868:	2000      	movs	r0, #0
 800186a:	6360      	str	r0, [r4, #52]	; 0x34
 800186c:	e7c0      	b.n	80017f0 <__sflush_r+0x1c>
 800186e:	2301      	movs	r3, #1
 8001870:	4628      	mov	r0, r5
 8001872:	47b0      	blx	r6
 8001874:	1c41      	adds	r1, r0, #1
 8001876:	d1c8      	bne.n	800180a <__sflush_r+0x36>
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0c5      	beq.n	800180a <__sflush_r+0x36>
 800187e:	2b1d      	cmp	r3, #29
 8001880:	d001      	beq.n	8001886 <__sflush_r+0xb2>
 8001882:	2b16      	cmp	r3, #22
 8001884:	d101      	bne.n	800188a <__sflush_r+0xb6>
 8001886:	602f      	str	r7, [r5, #0]
 8001888:	e7b1      	b.n	80017ee <__sflush_r+0x1a>
 800188a:	89a3      	ldrh	r3, [r4, #12]
 800188c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001890:	81a3      	strh	r3, [r4, #12]
 8001892:	e7ad      	b.n	80017f0 <__sflush_r+0x1c>
 8001894:	690f      	ldr	r7, [r1, #16]
 8001896:	2f00      	cmp	r7, #0
 8001898:	d0a9      	beq.n	80017ee <__sflush_r+0x1a>
 800189a:	0793      	lsls	r3, r2, #30
 800189c:	680e      	ldr	r6, [r1, #0]
 800189e:	bf08      	it	eq
 80018a0:	694b      	ldreq	r3, [r1, #20]
 80018a2:	600f      	str	r7, [r1, #0]
 80018a4:	bf18      	it	ne
 80018a6:	2300      	movne	r3, #0
 80018a8:	eba6 0807 	sub.w	r8, r6, r7
 80018ac:	608b      	str	r3, [r1, #8]
 80018ae:	f1b8 0f00 	cmp.w	r8, #0
 80018b2:	dd9c      	ble.n	80017ee <__sflush_r+0x1a>
 80018b4:	6a21      	ldr	r1, [r4, #32]
 80018b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018b8:	4643      	mov	r3, r8
 80018ba:	463a      	mov	r2, r7
 80018bc:	4628      	mov	r0, r5
 80018be:	47b0      	blx	r6
 80018c0:	2800      	cmp	r0, #0
 80018c2:	dc06      	bgt.n	80018d2 <__sflush_r+0xfe>
 80018c4:	89a3      	ldrh	r3, [r4, #12]
 80018c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ca:	81a3      	strh	r3, [r4, #12]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	e78e      	b.n	80017f0 <__sflush_r+0x1c>
 80018d2:	4407      	add	r7, r0
 80018d4:	eba8 0800 	sub.w	r8, r8, r0
 80018d8:	e7e9      	b.n	80018ae <__sflush_r+0xda>
 80018da:	bf00      	nop
 80018dc:	dfbffffe 	.word	0xdfbffffe

080018e0 <_fflush_r>:
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	690b      	ldr	r3, [r1, #16]
 80018e4:	4605      	mov	r5, r0
 80018e6:	460c      	mov	r4, r1
 80018e8:	b913      	cbnz	r3, 80018f0 <_fflush_r+0x10>
 80018ea:	2500      	movs	r5, #0
 80018ec:	4628      	mov	r0, r5
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
 80018f0:	b118      	cbz	r0, 80018fa <_fflush_r+0x1a>
 80018f2:	6a03      	ldr	r3, [r0, #32]
 80018f4:	b90b      	cbnz	r3, 80018fa <_fflush_r+0x1a>
 80018f6:	f7ff f9e3 	bl	8000cc0 <__sinit>
 80018fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f3      	beq.n	80018ea <_fflush_r+0xa>
 8001902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001904:	07d0      	lsls	r0, r2, #31
 8001906:	d404      	bmi.n	8001912 <_fflush_r+0x32>
 8001908:	0599      	lsls	r1, r3, #22
 800190a:	d402      	bmi.n	8001912 <_fflush_r+0x32>
 800190c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800190e:	f7ff fb8a 	bl	8001026 <__retarget_lock_acquire_recursive>
 8001912:	4628      	mov	r0, r5
 8001914:	4621      	mov	r1, r4
 8001916:	f7ff ff5d 	bl	80017d4 <__sflush_r>
 800191a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800191c:	07da      	lsls	r2, r3, #31
 800191e:	4605      	mov	r5, r0
 8001920:	d4e4      	bmi.n	80018ec <_fflush_r+0xc>
 8001922:	89a3      	ldrh	r3, [r4, #12]
 8001924:	059b      	lsls	r3, r3, #22
 8001926:	d4e1      	bmi.n	80018ec <_fflush_r+0xc>
 8001928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800192a:	f7ff fb7d 	bl	8001028 <__retarget_lock_release_recursive>
 800192e:	e7dd      	b.n	80018ec <_fflush_r+0xc>

08001930 <__swhatbuf_r>:
 8001930:	b570      	push	{r4, r5, r6, lr}
 8001932:	460c      	mov	r4, r1
 8001934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001938:	2900      	cmp	r1, #0
 800193a:	b096      	sub	sp, #88	; 0x58
 800193c:	4615      	mov	r5, r2
 800193e:	461e      	mov	r6, r3
 8001940:	da0d      	bge.n	800195e <__swhatbuf_r+0x2e>
 8001942:	89a3      	ldrh	r3, [r4, #12]
 8001944:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	bf0c      	ite	eq
 800194e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001952:	2340      	movne	r3, #64	; 0x40
 8001954:	2000      	movs	r0, #0
 8001956:	6031      	str	r1, [r6, #0]
 8001958:	602b      	str	r3, [r5, #0]
 800195a:	b016      	add	sp, #88	; 0x58
 800195c:	bd70      	pop	{r4, r5, r6, pc}
 800195e:	466a      	mov	r2, sp
 8001960:	f000 f8de 	bl	8001b20 <_fstat_r>
 8001964:	2800      	cmp	r0, #0
 8001966:	dbec      	blt.n	8001942 <__swhatbuf_r+0x12>
 8001968:	9901      	ldr	r1, [sp, #4]
 800196a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800196e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001972:	4259      	negs	r1, r3
 8001974:	4159      	adcs	r1, r3
 8001976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197a:	e7eb      	b.n	8001954 <__swhatbuf_r+0x24>

0800197c <__smakebuf_r>:
 800197c:	898b      	ldrh	r3, [r1, #12]
 800197e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001980:	079d      	lsls	r5, r3, #30
 8001982:	4606      	mov	r6, r0
 8001984:	460c      	mov	r4, r1
 8001986:	d507      	bpl.n	8001998 <__smakebuf_r+0x1c>
 8001988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800198c:	6023      	str	r3, [r4, #0]
 800198e:	6123      	str	r3, [r4, #16]
 8001990:	2301      	movs	r3, #1
 8001992:	6163      	str	r3, [r4, #20]
 8001994:	b002      	add	sp, #8
 8001996:	bd70      	pop	{r4, r5, r6, pc}
 8001998:	ab01      	add	r3, sp, #4
 800199a:	466a      	mov	r2, sp
 800199c:	f7ff ffc8 	bl	8001930 <__swhatbuf_r>
 80019a0:	9900      	ldr	r1, [sp, #0]
 80019a2:	4605      	mov	r5, r0
 80019a4:	4630      	mov	r0, r6
 80019a6:	f7ff fbb5 	bl	8001114 <_malloc_r>
 80019aa:	b948      	cbnz	r0, 80019c0 <__smakebuf_r+0x44>
 80019ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019b0:	059a      	lsls	r2, r3, #22
 80019b2:	d4ef      	bmi.n	8001994 <__smakebuf_r+0x18>
 80019b4:	f023 0303 	bic.w	r3, r3, #3
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	81a3      	strh	r3, [r4, #12]
 80019be:	e7e3      	b.n	8001988 <__smakebuf_r+0xc>
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	6020      	str	r0, [r4, #0]
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	81a3      	strh	r3, [r4, #12]
 80019ca:	9b00      	ldr	r3, [sp, #0]
 80019cc:	6163      	str	r3, [r4, #20]
 80019ce:	9b01      	ldr	r3, [sp, #4]
 80019d0:	6120      	str	r0, [r4, #16]
 80019d2:	b15b      	cbz	r3, 80019ec <__smakebuf_r+0x70>
 80019d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019d8:	4630      	mov	r0, r6
 80019da:	f000 f8b3 	bl	8001b44 <_isatty_r>
 80019de:	b128      	cbz	r0, 80019ec <__smakebuf_r+0x70>
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	81a3      	strh	r3, [r4, #12]
 80019ec:	89a3      	ldrh	r3, [r4, #12]
 80019ee:	431d      	orrs	r5, r3
 80019f0:	81a5      	strh	r5, [r4, #12]
 80019f2:	e7cf      	b.n	8001994 <__smakebuf_r+0x18>

080019f4 <__swbuf_r>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	460e      	mov	r6, r1
 80019f8:	4614      	mov	r4, r2
 80019fa:	4605      	mov	r5, r0
 80019fc:	b118      	cbz	r0, 8001a06 <__swbuf_r+0x12>
 80019fe:	6a03      	ldr	r3, [r0, #32]
 8001a00:	b90b      	cbnz	r3, 8001a06 <__swbuf_r+0x12>
 8001a02:	f7ff f95d 	bl	8000cc0 <__sinit>
 8001a06:	69a3      	ldr	r3, [r4, #24]
 8001a08:	60a3      	str	r3, [r4, #8]
 8001a0a:	89a3      	ldrh	r3, [r4, #12]
 8001a0c:	071a      	lsls	r2, r3, #28
 8001a0e:	d525      	bpl.n	8001a5c <__swbuf_r+0x68>
 8001a10:	6923      	ldr	r3, [r4, #16]
 8001a12:	b31b      	cbz	r3, 8001a5c <__swbuf_r+0x68>
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	6922      	ldr	r2, [r4, #16]
 8001a18:	1a98      	subs	r0, r3, r2
 8001a1a:	6963      	ldr	r3, [r4, #20]
 8001a1c:	b2f6      	uxtb	r6, r6
 8001a1e:	4283      	cmp	r3, r0
 8001a20:	4637      	mov	r7, r6
 8001a22:	dc04      	bgt.n	8001a2e <__swbuf_r+0x3a>
 8001a24:	4621      	mov	r1, r4
 8001a26:	4628      	mov	r0, r5
 8001a28:	f7ff ff5a 	bl	80018e0 <_fflush_r>
 8001a2c:	b9e0      	cbnz	r0, 8001a68 <__swbuf_r+0x74>
 8001a2e:	68a3      	ldr	r3, [r4, #8]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	60a3      	str	r3, [r4, #8]
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	6022      	str	r2, [r4, #0]
 8001a3a:	701e      	strb	r6, [r3, #0]
 8001a3c:	6962      	ldr	r2, [r4, #20]
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d004      	beq.n	8001a4e <__swbuf_r+0x5a>
 8001a44:	89a3      	ldrh	r3, [r4, #12]
 8001a46:	07db      	lsls	r3, r3, #31
 8001a48:	d506      	bpl.n	8001a58 <__swbuf_r+0x64>
 8001a4a:	2e0a      	cmp	r6, #10
 8001a4c:	d104      	bne.n	8001a58 <__swbuf_r+0x64>
 8001a4e:	4621      	mov	r1, r4
 8001a50:	4628      	mov	r0, r5
 8001a52:	f7ff ff45 	bl	80018e0 <_fflush_r>
 8001a56:	b938      	cbnz	r0, 8001a68 <__swbuf_r+0x74>
 8001a58:	4638      	mov	r0, r7
 8001a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f000 f806 	bl	8001a70 <__swsetup_r>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d0d5      	beq.n	8001a14 <__swbuf_r+0x20>
 8001a68:	f04f 37ff 	mov.w	r7, #4294967295
 8001a6c:	e7f4      	b.n	8001a58 <__swbuf_r+0x64>
	...

08001a70 <__swsetup_r>:
 8001a70:	b538      	push	{r3, r4, r5, lr}
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <__swsetup_r+0xac>)
 8001a74:	4605      	mov	r5, r0
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	460c      	mov	r4, r1
 8001a7a:	b118      	cbz	r0, 8001a84 <__swsetup_r+0x14>
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	b90b      	cbnz	r3, 8001a84 <__swsetup_r+0x14>
 8001a80:	f7ff f91e 	bl	8000cc0 <__sinit>
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a8a:	0718      	lsls	r0, r3, #28
 8001a8c:	d422      	bmi.n	8001ad4 <__swsetup_r+0x64>
 8001a8e:	06d9      	lsls	r1, r3, #27
 8001a90:	d407      	bmi.n	8001aa2 <__swsetup_r+0x32>
 8001a92:	2309      	movs	r3, #9
 8001a94:	602b      	str	r3, [r5, #0]
 8001a96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001a9a:	81a3      	strh	r3, [r4, #12]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	e034      	b.n	8001b0c <__swsetup_r+0x9c>
 8001aa2:	0758      	lsls	r0, r3, #29
 8001aa4:	d512      	bpl.n	8001acc <__swsetup_r+0x5c>
 8001aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001aa8:	b141      	cbz	r1, 8001abc <__swsetup_r+0x4c>
 8001aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001aae:	4299      	cmp	r1, r3
 8001ab0:	d002      	beq.n	8001ab8 <__swsetup_r+0x48>
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f7ff faba 	bl	800102c <_free_r>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6363      	str	r3, [r4, #52]	; 0x34
 8001abc:	89a3      	ldrh	r3, [r4, #12]
 8001abe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ac2:	81a3      	strh	r3, [r4, #12]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6063      	str	r3, [r4, #4]
 8001ac8:	6923      	ldr	r3, [r4, #16]
 8001aca:	6023      	str	r3, [r4, #0]
 8001acc:	89a3      	ldrh	r3, [r4, #12]
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	81a3      	strh	r3, [r4, #12]
 8001ad4:	6923      	ldr	r3, [r4, #16]
 8001ad6:	b94b      	cbnz	r3, 8001aec <__swsetup_r+0x7c>
 8001ad8:	89a3      	ldrh	r3, [r4, #12]
 8001ada:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae2:	d003      	beq.n	8001aec <__swsetup_r+0x7c>
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f7ff ff48 	bl	800197c <__smakebuf_r>
 8001aec:	89a0      	ldrh	r0, [r4, #12]
 8001aee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001af2:	f010 0301 	ands.w	r3, r0, #1
 8001af6:	d00a      	beq.n	8001b0e <__swsetup_r+0x9e>
 8001af8:	2300      	movs	r3, #0
 8001afa:	60a3      	str	r3, [r4, #8]
 8001afc:	6963      	ldr	r3, [r4, #20]
 8001afe:	425b      	negs	r3, r3
 8001b00:	61a3      	str	r3, [r4, #24]
 8001b02:	6923      	ldr	r3, [r4, #16]
 8001b04:	b943      	cbnz	r3, 8001b18 <__swsetup_r+0xa8>
 8001b06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b0a:	d1c4      	bne.n	8001a96 <__swsetup_r+0x26>
 8001b0c:	bd38      	pop	{r3, r4, r5, pc}
 8001b0e:	0781      	lsls	r1, r0, #30
 8001b10:	bf58      	it	pl
 8001b12:	6963      	ldrpl	r3, [r4, #20]
 8001b14:	60a3      	str	r3, [r4, #8]
 8001b16:	e7f4      	b.n	8001b02 <__swsetup_r+0x92>
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e7f7      	b.n	8001b0c <__swsetup_r+0x9c>
 8001b1c:	2000005c 	.word	0x2000005c

08001b20 <_fstat_r>:
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	4d07      	ldr	r5, [pc, #28]	; (8001b40 <_fstat_r+0x20>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	602b      	str	r3, [r5, #0]
 8001b2e:	f7fe ffdc 	bl	8000aea <_fstat>
 8001b32:	1c43      	adds	r3, r0, #1
 8001b34:	d102      	bne.n	8001b3c <_fstat_r+0x1c>
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	b103      	cbz	r3, 8001b3c <_fstat_r+0x1c>
 8001b3a:	6023      	str	r3, [r4, #0]
 8001b3c:	bd38      	pop	{r3, r4, r5, pc}
 8001b3e:	bf00      	nop
 8001b40:	200001c0 	.word	0x200001c0

08001b44 <_isatty_r>:
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4d06      	ldr	r5, [pc, #24]	; (8001b60 <_isatty_r+0x1c>)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	602b      	str	r3, [r5, #0]
 8001b50:	f7fe ffdb 	bl	8000b0a <_isatty>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	d102      	bne.n	8001b5e <_isatty_r+0x1a>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	b103      	cbz	r3, 8001b5e <_isatty_r+0x1a>
 8001b5c:	6023      	str	r3, [r4, #0]
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
 8001b60:	200001c0 	.word	0x200001c0

08001b64 <_sbrk_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4d06      	ldr	r5, [pc, #24]	; (8001b80 <_sbrk_r+0x1c>)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	602b      	str	r3, [r5, #0]
 8001b70:	f7fe ffe4 	bl	8000b3c <_sbrk>
 8001b74:	1c43      	adds	r3, r0, #1
 8001b76:	d102      	bne.n	8001b7e <_sbrk_r+0x1a>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	b103      	cbz	r3, 8001b7e <_sbrk_r+0x1a>
 8001b7c:	6023      	str	r3, [r4, #0]
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
 8001b80:	200001c0 	.word	0x200001c0

08001b84 <_init>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	bf00      	nop
 8001b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8a:	bc08      	pop	{r3}
 8001b8c:	469e      	mov	lr, r3
 8001b8e:	4770      	bx	lr

08001b90 <_fini>:
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	bf00      	nop
 8001b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b96:	bc08      	pop	{r3}
 8001b98:	469e      	mov	lr, r3
 8001b9a:	4770      	bx	lr
