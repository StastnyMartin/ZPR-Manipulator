
F411_ZPR_gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000954  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000aec  08000aec  00001aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000afc  08000afc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000afc  08000afc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000afc  08000afc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000afc  08000afc  00001afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b00  08000b00  00001b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000b04  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000b08  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000b08  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000217f  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007ab  00000000  00000000  000041b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00004960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d8  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ec53  00000000  00000000  00004b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c32  00000000  00000000  000137c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054364  00000000  00000000  000153f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00069759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000390  00000000  00000000  0006979c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00069b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ad4 	.word	0x08000ad4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000ad4 	.word	0x08000ad4

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001dc:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <SystemInit+0x20>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001e2:	4a05      	ldr	r2, [pc, #20]	@ (80001f8 <SystemInit+0x20>)
 80001e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b087      	sub	sp, #28
 8000200:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000202:	2300      	movs	r3, #0
 8000204:	613b      	str	r3, [r7, #16]
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]
 800020a:	2302      	movs	r3, #2
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
 8000212:	2302      	movs	r3, #2
 8000214:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000216:	4b34      	ldr	r3, [pc, #208]	@ (80002e8 <SystemCoreClockUpdate+0xec>)
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	f003 030c 	and.w	r3, r3, #12
 800021e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	2b08      	cmp	r3, #8
 8000224:	d011      	beq.n	800024a <SystemCoreClockUpdate+0x4e>
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	2b08      	cmp	r3, #8
 800022a:	d844      	bhi.n	80002b6 <SystemCoreClockUpdate+0xba>
 800022c:	693b      	ldr	r3, [r7, #16]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d003      	beq.n	800023a <SystemCoreClockUpdate+0x3e>
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	2b04      	cmp	r3, #4
 8000236:	d004      	beq.n	8000242 <SystemCoreClockUpdate+0x46>
 8000238:	e03d      	b.n	80002b6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800023a:	4b2c      	ldr	r3, [pc, #176]	@ (80002ec <SystemCoreClockUpdate+0xf0>)
 800023c:	4a2c      	ldr	r2, [pc, #176]	@ (80002f0 <SystemCoreClockUpdate+0xf4>)
 800023e:	601a      	str	r2, [r3, #0]
      break;
 8000240:	e03d      	b.n	80002be <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000242:	4b2a      	ldr	r3, [pc, #168]	@ (80002ec <SystemCoreClockUpdate+0xf0>)
 8000244:	4a2b      	ldr	r2, [pc, #172]	@ (80002f4 <SystemCoreClockUpdate+0xf8>)
 8000246:	601a      	str	r2, [r3, #0]
      break;
 8000248:	e039      	b.n	80002be <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800024a:	4b27      	ldr	r3, [pc, #156]	@ (80002e8 <SystemCoreClockUpdate+0xec>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	0d9b      	lsrs	r3, r3, #22
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000256:	4b24      	ldr	r3, [pc, #144]	@ (80002e8 <SystemCoreClockUpdate+0xec>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800025e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d00c      	beq.n	8000280 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000266:	4a23      	ldr	r2, [pc, #140]	@ (80002f4 <SystemCoreClockUpdate+0xf8>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4a1e      	ldr	r2, [pc, #120]	@ (80002e8 <SystemCoreClockUpdate+0xec>)
 8000270:	6852      	ldr	r2, [r2, #4]
 8000272:	0992      	lsrs	r2, r2, #6
 8000274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000278:	fb02 f303 	mul.w	r3, r2, r3
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	e00b      	b.n	8000298 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000280:	4a1b      	ldr	r2, [pc, #108]	@ (80002f0 <SystemCoreClockUpdate+0xf4>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	fbb2 f3f3 	udiv	r3, r2, r3
 8000288:	4a17      	ldr	r2, [pc, #92]	@ (80002e8 <SystemCoreClockUpdate+0xec>)
 800028a:	6852      	ldr	r2, [r2, #4]
 800028c:	0992      	lsrs	r2, r2, #6
 800028e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000292:	fb02 f303 	mul.w	r3, r2, r3
 8000296:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000298:	4b13      	ldr	r3, [pc, #76]	@ (80002e8 <SystemCoreClockUpdate+0xec>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	0c1b      	lsrs	r3, r3, #16
 800029e:	f003 0303 	and.w	r3, r3, #3
 80002a2:	3301      	adds	r3, #1
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002a8:	697a      	ldr	r2, [r7, #20]
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b0:	4a0e      	ldr	r2, [pc, #56]	@ (80002ec <SystemCoreClockUpdate+0xf0>)
 80002b2:	6013      	str	r3, [r2, #0]
      break;
 80002b4:	e003      	b.n	80002be <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <SystemCoreClockUpdate+0xf0>)
 80002b8:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <SystemCoreClockUpdate+0xf4>)
 80002ba:	601a      	str	r2, [r3, #0]
      break;
 80002bc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002be:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <SystemCoreClockUpdate+0xec>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	091b      	lsrs	r3, r3, #4
 80002c4:	f003 030f 	and.w	r3, r3, #15
 80002c8:	4a0b      	ldr	r2, [pc, #44]	@ (80002f8 <SystemCoreClockUpdate+0xfc>)
 80002ca:	5cd3      	ldrb	r3, [r2, r3]
 80002cc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80002ce:	4b07      	ldr	r3, [pc, #28]	@ (80002ec <SystemCoreClockUpdate+0xf0>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	fa22 f303 	lsr.w	r3, r2, r3
 80002d8:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <SystemCoreClockUpdate+0xf0>)
 80002da:	6013      	str	r3, [r2, #0]
}
 80002dc:	bf00      	nop
 80002de:	371c      	adds	r7, #28
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40023800 	.word	0x40023800
 80002ec:	20000000 	.word	0x20000000
 80002f0:	00f42400 	.word	0x00f42400
 80002f4:	017d7840 	.word	0x017d7840
 80002f8:	08000aec 	.word	0x08000aec

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	@ (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	@ (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3b01      	subs	r3, #1
 800035c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000360:	d301      	bcc.n	8000366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000362:	2301      	movs	r3, #1
 8000364:	e00f      	b.n	8000386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000366:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <SysTick_Config+0x40>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3b01      	subs	r3, #1
 800036c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800036e:	210f      	movs	r1, #15
 8000370:	f04f 30ff 	mov.w	r0, #4294967295
 8000374:	f7ff ffc2 	bl	80002fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000378:	4b05      	ldr	r3, [pc, #20]	@ (8000390 <SysTick_Config+0x40>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037e:	4b04      	ldr	r3, [pc, #16]	@ (8000390 <SysTick_Config+0x40>)
 8000380:	2207      	movs	r2, #7
 8000382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000384:	2300      	movs	r3, #0
}
 8000386:	4618      	mov	r0, r3
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	e000e010 	.word	0xe000e010

08000394 <SysTick_Handler>:
#define ADC_CH1	ADC1,1

volatile uint32_t _ticks = 0;

void SysTick_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	_ticks++;
 8000398:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <SysTick_Handler+0x18>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	4a03      	ldr	r2, [pc, #12]	@ (80003ac <SysTick_Handler+0x18>)
 80003a0:	6013      	str	r3, [r2, #0]
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	20000020 	.word	0x20000020

080003b0 <readADC>:

uint16_t readADC(ADC_TypeDef *adcpin, int adc_channel)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
	uint16_t w = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	81fb      	strh	r3, [r7, #14]
	adcpin->SQR3 = adc_channel;
 80003be:	683a      	ldr	r2, [r7, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	635a      	str	r2, [r3, #52]	@ 0x34
	adcpin->CR2 |= ADC_CR2_SWSTART;		//spousteni prevodu
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	609a      	str	r2, [r3, #8]

	while (!(adcpin->SR & ADC_SR_EOC))
 80003d0:	bf00      	nop
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <readADC+0x22>
		;
	w = adcpin->DR;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	81fb      	strh	r3, [r7, #14]
	//printf("%04x = %d\n",w,w);
	return w;
 80003e4:	89fb      	ldrh	r3, [r7, #14]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
	...

080003f4 <read_btns>:

uint8_t read_btns()
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
	//uint8_t result = GPIORead(BTN_A);
	uint8_t result = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	71fb      	strb	r3, [r7, #7]

	if (GPIORead(BTN_A))
 80003fe:	210a      	movs	r1, #10
 8000400:	4827      	ldr	r0, [pc, #156]	@ (80004a0 <read_btns+0xac>)
 8000402:	f000 fac5 	bl	8000990 <GPIORead>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <read_btns+0x1c>
		result = 1;
 800040c:	2301      	movs	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
	if (GPIORead(BTN_B))
 8000410:	2103      	movs	r1, #3
 8000412:	4824      	ldr	r0, [pc, #144]	@ (80004a4 <read_btns+0xb0>)
 8000414:	f000 fabc 	bl	8000990 <GPIORead>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <read_btns+0x32>
		result |= 1 << 1;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	f043 0302 	orr.w	r3, r3, #2
 8000424:	71fb      	strb	r3, [r7, #7]
	if (GPIORead(BTN_C))
 8000426:	2105      	movs	r1, #5
 8000428:	481e      	ldr	r0, [pc, #120]	@ (80004a4 <read_btns+0xb0>)
 800042a:	f000 fab1 	bl	8000990 <GPIORead>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d003      	beq.n	800043c <read_btns+0x48>
		result |= 1 << 2;
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	71fb      	strb	r3, [r7, #7]
	if (GPIORead(BTN_D))
 800043c:	2104      	movs	r1, #4
 800043e:	4819      	ldr	r0, [pc, #100]	@ (80004a4 <read_btns+0xb0>)
 8000440:	f000 faa6 	bl	8000990 <GPIORead>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d003      	beq.n	8000452 <read_btns+0x5e>
		result |= 1 << 3;
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	f043 0308 	orr.w	r3, r3, #8
 8000450:	71fb      	strb	r3, [r7, #7]
	if (GPIORead(BTN_E))
 8000452:	210a      	movs	r1, #10
 8000454:	4813      	ldr	r0, [pc, #76]	@ (80004a4 <read_btns+0xb0>)
 8000456:	f000 fa9b 	bl	8000990 <GPIORead>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d003      	beq.n	8000468 <read_btns+0x74>
		result |= 1 << 4;
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	71fb      	strb	r3, [r7, #7]
	if (GPIORead(BTN_F))
 8000468:	2108      	movs	r1, #8
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <read_btns+0xac>)
 800046c:	f000 fa90 	bl	8000990 <GPIORead>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d003      	beq.n	800047e <read_btns+0x8a>
		result |= 1 << 5;
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	f043 0320 	orr.w	r3, r3, #32
 800047c:	71fb      	strb	r3, [r7, #7]
	if (GPIORead(BTN_K))
 800047e:	2109      	movs	r1, #9
 8000480:	4807      	ldr	r0, [pc, #28]	@ (80004a0 <read_btns+0xac>)
 8000482:	f000 fa85 	bl	8000990 <GPIORead>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d003      	beq.n	8000494 <read_btns+0xa0>
		result |= 1 << 6;
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000492:	71fb      	strb	r3, [r7, #7]


	//printf("%01x = %d\n",result,result);
	//Usart1Send(result);
	return result;
 8000494:	79fb      	ldrb	r3, [r7, #7]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40020400 	.word	0x40020400

080004a8 <main>:

int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

	SystemCoreClockUpdate();
 80004ae:	f7ff fea5 	bl	80001fc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000 - 1);
 80004b2:	4b4d      	ldr	r3, [pc, #308]	@ (80005e8 <main+0x140>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a4d      	ldr	r2, [pc, #308]	@ (80005ec <main+0x144>)
 80004b8:	fba2 2303 	umull	r2, r3, r2, r3
 80004bc:	099b      	lsrs	r3, r3, #6
 80004be:	3b01      	subs	r3, #1
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff45 	bl	8000350 <SysTick_Config>

	Usart1Init(38400);
 80004c6:	f44f 4016 	mov.w	r0, #38400	@ 0x9600
 80004ca:	f000 fa79 	bl	80009c0 <Usart1Init>
	//Usart2Init(38400);

	STM_SetPinGPIO(BTN_A, ioPortInputFloat);
 80004ce:	2203      	movs	r2, #3
 80004d0:	210a      	movs	r1, #10
 80004d2:	4847      	ldr	r0, [pc, #284]	@ (80005f0 <main+0x148>)
 80004d4:	f000 f8c4 	bl	8000660 <STM_SetPinGPIO>
	STM_SetPinGPIO(BTN_B, ioPortInputFloat);
 80004d8:	2203      	movs	r2, #3
 80004da:	2103      	movs	r1, #3
 80004dc:	4845      	ldr	r0, [pc, #276]	@ (80005f4 <main+0x14c>)
 80004de:	f000 f8bf 	bl	8000660 <STM_SetPinGPIO>
	STM_SetPinGPIO(BTN_C, ioPortInputFloat);
 80004e2:	2203      	movs	r2, #3
 80004e4:	2105      	movs	r1, #5
 80004e6:	4843      	ldr	r0, [pc, #268]	@ (80005f4 <main+0x14c>)
 80004e8:	f000 f8ba 	bl	8000660 <STM_SetPinGPIO>
	STM_SetPinGPIO(BTN_D, ioPortInputFloat);
 80004ec:	2203      	movs	r2, #3
 80004ee:	2104      	movs	r1, #4
 80004f0:	4840      	ldr	r0, [pc, #256]	@ (80005f4 <main+0x14c>)
 80004f2:	f000 f8b5 	bl	8000660 <STM_SetPinGPIO>

	STM_SetPinGPIO(BTN_E, ioPortInputFloat);
 80004f6:	2203      	movs	r2, #3
 80004f8:	210a      	movs	r1, #10
 80004fa:	483e      	ldr	r0, [pc, #248]	@ (80005f4 <main+0x14c>)
 80004fc:	f000 f8b0 	bl	8000660 <STM_SetPinGPIO>
	STM_SetPinGPIO(BTN_F, ioPortInputFloat);
 8000500:	2203      	movs	r2, #3
 8000502:	2108      	movs	r1, #8
 8000504:	483a      	ldr	r0, [pc, #232]	@ (80005f0 <main+0x148>)
 8000506:	f000 f8ab 	bl	8000660 <STM_SetPinGPIO>
	STM_SetPinGPIO(BTN_K, ioPortInputFloat);
 800050a:	2203      	movs	r2, #3
 800050c:	2109      	movs	r1, #9
 800050e:	4838      	ldr	r0, [pc, #224]	@ (80005f0 <main+0x148>)
 8000510:	f000 f8a6 	bl	8000660 <STM_SetPinGPIO>


	STM_SetPinGPIO(GPIOA, 0, ioPortAnalog);
 8000514:	2202      	movs	r2, #2
 8000516:	2100      	movs	r1, #0
 8000518:	4835      	ldr	r0, [pc, #212]	@ (80005f0 <main+0x148>)
 800051a:	f000 f8a1 	bl	8000660 <STM_SetPinGPIO>
	STM_SetPinGPIO(GPIOA, 1, ioPortAnalog);
 800051e:	2202      	movs	r2, #2
 8000520:	2101      	movs	r1, #1
 8000522:	4833      	ldr	r0, [pc, #204]	@ (80005f0 <main+0x148>)
 8000524:	f000 f89c 	bl	8000660 <STM_SetPinGPIO>

	if (!(RCC->APB2ENR & RCC_APB2ENR_ADC1EN))
 8000528:	4b33      	ldr	r3, [pc, #204]	@ (80005f8 <main+0x150>)
 800052a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800052c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <main+0xb0>
	{
		RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000534:	4b30      	ldr	r3, [pc, #192]	@ (80005f8 <main+0x150>)
 8000536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000538:	4a2f      	ldr	r2, [pc, #188]	@ (80005f8 <main+0x150>)
 800053a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800053e:	6453      	str	r3, [r2, #68]	@ 0x44
		RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 8000540:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <main+0x150>)
 8000542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000544:	4a2c      	ldr	r2, [pc, #176]	@ (80005f8 <main+0x150>)
 8000546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800054a:	6253      	str	r3, [r2, #36]	@ 0x24
		RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 800054c:	4b2a      	ldr	r3, [pc, #168]	@ (80005f8 <main+0x150>)
 800054e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000550:	4a29      	ldr	r2, [pc, #164]	@ (80005f8 <main+0x150>)
 8000552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000556:	6253      	str	r3, [r2, #36]	@ 0x24
	}

	//ADC1->CR1 = 0 | ADC_CR1_SCAN;	// RES = 00 = 12bitu, yapnuti SCAN modu
	ADC1->CR1 = (1 << 25) | ADC_CR1_SCAN;// RES = 10 = 8bitu, zapnuti SCAN modu
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <main+0x154>)
 800055a:	4a29      	ldr	r2, [pc, #164]	@ (8000600 <main+0x158>)
 800055c:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0; // ALIGN = 0 = right align
 800055e:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <main+0x154>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
	ADC1->SMPR1 = 0;
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <main+0x154>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
	ADC1->SMPR2 = 2; // 010 pro ch0 = 28 cyklu
 800056a:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <main+0x154>)
 800056c:	2202      	movs	r2, #2
 800056e:	611a      	str	r2, [r3, #16]
	ADC1->SQR1 = 0; // L = 0000 = 1 konverze
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <main+0x154>)
 8000572:	2200      	movs	r2, #0
 8000574:	62da      	str	r2, [r3, #44]	@ 0x2c
	ADC1->SQR2 = 0;
 8000576:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <main+0x154>)
 8000578:	2200      	movs	r2, #0
 800057a:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC1->SQR3 = 0; // SQ1 = 00000 = AD kanal 0
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <main+0x154>)
 800057e:	2200      	movs	r2, #0
 8000580:	635a      	str	r2, [r3, #52]	@ 0x34
	ADC->CCR = 0; // neni tepl. sens, neni vbat
 8000582:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <main+0x15c>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	// ADCPRE = 00 = APB2 / 2

	ADC1->CR2 |= ADC_CR2_ADON; // zapnuti AD
 8000588:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <main+0x154>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <main+0x154>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6093      	str	r3, [r2, #8]

	//STM_SetPinGPIO(RGB_RED, ioPortOutputPP);
	uint32_t tm = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
	uint16_t w = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	807b      	strh	r3, [r7, #2]

	while (1)
	{

		if (_ticks >= tm)
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <main+0x160>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d8fa      	bhi.n	800059c <main+0xf4>
		{
			tm = _ticks + 10;
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <main+0x160>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	330a      	adds	r3, #10
 80005ac:	607b      	str	r3, [r7, #4]
			w = readADC(ADC_CH0);
 80005ae:	2100      	movs	r1, #0
 80005b0:	4812      	ldr	r0, [pc, #72]	@ (80005fc <main+0x154>)
 80005b2:	f7ff fefd 	bl	80003b0 <readADC>
 80005b6:	4603      	mov	r3, r0
 80005b8:	807b      	strh	r3, [r7, #2]
			Usart1Send(w);
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fa4d 	bl	8000a5c <Usart1Send>
			w = readADC(ADC_CH1);
 80005c2:	2101      	movs	r1, #1
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <main+0x154>)
 80005c6:	f7ff fef3 	bl	80003b0 <readADC>
 80005ca:	4603      	mov	r3, r0
 80005cc:	807b      	strh	r3, [r7, #2]
			Usart1Send(w);
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fa43 	bl	8000a5c <Usart1Send>
			w = read_btns();
 80005d6:	f7ff ff0d 	bl	80003f4 <read_btns>
 80005da:	4603      	mov	r3, r0
 80005dc:	807b      	strh	r3, [r7, #2]
			Usart1Send(w);
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fa3b 	bl	8000a5c <Usart1Send>
		if (_ticks >= tm)
 80005e6:	e7d9      	b.n	800059c <main+0xf4>
 80005e8:	20000000 	.word	0x20000000
 80005ec:	10624dd3 	.word	0x10624dd3
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40012000 	.word	0x40012000
 8000600:	02000100 	.word	0x02000100
 8000604:	40012300 	.word	0x40012300
 8000608:	20000020 	.word	0x20000020

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	@ (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000610:	f7ff fde2 	bl	80001d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	@ (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	@ (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	@ (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063a:	f000 fa27 	bl	8000a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff ff33 	bl	80004a8 <main>

08000642 <LoopForever>:

LoopForever:
  b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000650:	08000b04 	.word	0x08000b04
  ldr r2, =_sbss
 8000654:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000658:	20000024 	.word	0x20000024

0800065c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC_IRQHandler>
	...

08000660 <STM_SetPinGPIO>:
#include "stm_core.h"

bool STM_SetPinGPIO(GPIO_TypeDef *pgpio, uint32_t bitnum, eIoPortModes mode)
{
 8000660:	b480      	push	{r7}
 8000662:	b087      	sub	sp, #28
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	4613      	mov	r3, r2
 800066c:	71fb      	strb	r3, [r7, #7]
	uint32_t enr_mask = 0; // hodnota do xxENR registru
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
	uint32_t rstr_mask = 0; // hodnota do xxRSTR registru
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
	switch((uint32_t)pgpio) // detekce, ktery GPIO
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4a97      	ldr	r2, [pc, #604]	@ (80008d8 <STM_SetPinGPIO+0x278>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d034      	beq.n	80006e8 <STM_SetPinGPIO+0x88>
 800067e:	4a96      	ldr	r2, [pc, #600]	@ (80008d8 <STM_SetPinGPIO+0x278>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d836      	bhi.n	80006f2 <STM_SetPinGPIO+0x92>
 8000684:	4a95      	ldr	r2, [pc, #596]	@ (80008dc <STM_SetPinGPIO+0x27c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d029      	beq.n	80006de <STM_SetPinGPIO+0x7e>
 800068a:	4a94      	ldr	r2, [pc, #592]	@ (80008dc <STM_SetPinGPIO+0x27c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d830      	bhi.n	80006f2 <STM_SetPinGPIO+0x92>
 8000690:	4a93      	ldr	r2, [pc, #588]	@ (80008e0 <STM_SetPinGPIO+0x280>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d01e      	beq.n	80006d4 <STM_SetPinGPIO+0x74>
 8000696:	4a92      	ldr	r2, [pc, #584]	@ (80008e0 <STM_SetPinGPIO+0x280>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d82a      	bhi.n	80006f2 <STM_SetPinGPIO+0x92>
 800069c:	4a91      	ldr	r2, [pc, #580]	@ (80008e4 <STM_SetPinGPIO+0x284>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d013      	beq.n	80006ca <STM_SetPinGPIO+0x6a>
 80006a2:	4a90      	ldr	r2, [pc, #576]	@ (80008e4 <STM_SetPinGPIO+0x284>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d824      	bhi.n	80006f2 <STM_SetPinGPIO+0x92>
 80006a8:	4a8f      	ldr	r2, [pc, #572]	@ (80008e8 <STM_SetPinGPIO+0x288>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d003      	beq.n	80006b6 <STM_SetPinGPIO+0x56>
 80006ae:	4a8f      	ldr	r2, [pc, #572]	@ (80008ec <STM_SetPinGPIO+0x28c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d005      	beq.n	80006c0 <STM_SetPinGPIO+0x60>
 80006b4:	e01d      	b.n	80006f2 <STM_SetPinGPIO+0x92>
	{
		case (uint32_t)GPIOA:
				enr_mask = RCC_AHB1ENR_GPIOAEN;
 80006b6:	2301      	movs	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOARST;
 80006ba:	2301      	movs	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
			break;
 80006be:	e018      	b.n	80006f2 <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOB:
				enr_mask = RCC_AHB1ENR_GPIOBEN;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
			break;
 80006c8:	e013      	b.n	80006f2 <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOC:
				enr_mask = RCC_AHB1ENR_GPIOCEN;
 80006ca:	2304      	movs	r3, #4
 80006cc:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 80006ce:	2304      	movs	r3, #4
 80006d0:	613b      	str	r3, [r7, #16]
			break;
 80006d2:	e00e      	b.n	80006f2 <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOD:
				enr_mask = RCC_AHB1ENR_GPIODEN;
 80006d4:	2308      	movs	r3, #8
 80006d6:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIODRST;
 80006d8:	2308      	movs	r3, #8
 80006da:	613b      	str	r3, [r7, #16]
			break;
 80006dc:	e009      	b.n	80006f2 <STM_SetPinGPIO+0x92>
		case (uint32_t)GPIOE:
				enr_mask = RCC_AHB1ENR_GPIOEEN;
 80006de:	2310      	movs	r3, #16
 80006e0:	617b      	str	r3, [r7, #20]
			rstr_mask = RCC_AHB1RSTR_GPIOERST;
 80006e2:	2310      	movs	r3, #16
 80006e4:	613b      	str	r3, [r7, #16]
			break;
 80006e6:	e004      	b.n	80006f2 <STM_SetPinGPIO+0x92>
			rstr_mask = RCC_AHB1RSTR_GPIOGRST;
			break;
	#endif

		case (uint32_t)GPIOH:
				enr_mask = RCC_AHB1ENR_GPIOHEN;
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	617b      	str	r3, [r7, #20]
				rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 80006ec:	2380      	movs	r3, #128	@ 0x80
 80006ee:	613b      	str	r3, [r7, #16]
				break;
 80006f0:	bf00      	nop
	}


	if ((enr_mask == 0) || (rstr_mask == 0)) // nevybran GPIO
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <STM_SetPinGPIO+0x9e>
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <STM_SetPinGPIO+0xa2>
	return false; // vrat priznak chyby
 80006fe:	2300      	movs	r3, #0
 8000700:	e0e4      	b.n	80008cc <STM_SetPinGPIO+0x26c>

	if (!(RCC->AHB1ENR & enr_mask)) // inicializace vybraneho
 8000702:	4b7b      	ldr	r3, [pc, #492]	@ (80008f0 <STM_SetPinGPIO+0x290>)
 8000704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	4013      	ands	r3, r2
 800070a:	2b00      	cmp	r3, #0
 800070c:	d112      	bne.n	8000734 <STM_SetPinGPIO+0xd4>
	{
	RCC->AHB1ENR |= enr_mask; // povolit hodiny periferie
 800070e:	4b78      	ldr	r3, [pc, #480]	@ (80008f0 <STM_SetPinGPIO+0x290>)
 8000710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000712:	4977      	ldr	r1, [pc, #476]	@ (80008f0 <STM_SetPinGPIO+0x290>)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	4313      	orrs	r3, r2
 8000718:	630b      	str	r3, [r1, #48]	@ 0x30
	RCC->AHB1RSTR |= rstr_mask; // proved reset periferie
 800071a:	4b75      	ldr	r3, [pc, #468]	@ (80008f0 <STM_SetPinGPIO+0x290>)
 800071c:	691a      	ldr	r2, [r3, #16]
 800071e:	4974      	ldr	r1, [pc, #464]	@ (80008f0 <STM_SetPinGPIO+0x290>)
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	4313      	orrs	r3, r2
 8000724:	610b      	str	r3, [r1, #16]
	RCC->AHB1RSTR &= ~rstr_mask; // a konec resetu
 8000726:	4b72      	ldr	r3, [pc, #456]	@ (80008f0 <STM_SetPinGPIO+0x290>)
 8000728:	691a      	ldr	r2, [r3, #16]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43db      	mvns	r3, r3
 800072e:	4970      	ldr	r1, [pc, #448]	@ (80008f0 <STM_SetPinGPIO+0x290>)
 8000730:	4013      	ands	r3, r2
 8000732:	610b      	str	r3, [r1, #16]
	}
	// pokracovani inicializace konkretniho vystupu

	// nastaveni registru podle typu vystupu/vstupu
	switch(mode)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b07      	cmp	r3, #7
 8000738:	f200 80c5 	bhi.w	80008c6 <STM_SetPinGPIO+0x266>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <STM_SetPinGPIO+0xe4>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	08000765 	.word	0x08000765
 8000748:	08000765 	.word	0x08000765
 800074c:	08000843 	.word	0x08000843
 8000750:	0800082b 	.word	0x0800082b
 8000754:	080007d3 	.word	0x080007d3
 8000758:	080007ff 	.word	0x080007ff
 800075c:	08000859 	.word	0x08000859
 8000760:	08000859 	.word	0x08000859
	{
		case ioPortOutputOC:
		case ioPortOutputPP:
			pgpio->MODER |= 0x01 << (2 * bitnum); // 01 = output
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	2101      	movs	r1, #1
 800076e:	fa01 f202 	lsl.w	r2, r1, r2
 8000772:	431a      	orrs	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	601a      	str	r2, [r3, #0]
			pgpio->OSPEEDR |= 0x03 << (2 * bitnum); // 11 = high speed
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	2103      	movs	r1, #3
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	431a      	orrs	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	609a      	str	r2, [r3, #8]
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pu/pd
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	2103      	movs	r1, #3
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	43d2      	mvns	r2, r2
 800079c:	401a      	ands	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	60da      	str	r2, [r3, #12]
			if (mode == ioPortOutputOC) // open collector (drain) ?
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d109      	bne.n	80007bc <STM_SetPinGPIO+0x15c>
				pgpio->OTYPER |= 0x01 << bitnum; // 1 = OC/Open drain
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	2101      	movs	r1, #1
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	fa01 f202 	lsl.w	r2, r1, r2
 80007b4:	431a      	orrs	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	605a      	str	r2, [r3, #4]
			else
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
			break;
 80007ba:	e086      	b.n	80008ca <STM_SetPinGPIO+0x26a>
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	2101      	movs	r1, #1
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	43d2      	mvns	r2, r2
 80007ca:	401a      	ands	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	605a      	str	r2, [r3, #4]
			break;
 80007d0:	e07b      	b.n	80008ca <STM_SetPinGPIO+0x26a>
		case ioPortInputPU: // moder bits 00 = input
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // clear bits
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	0052      	lsls	r2, r2, #1
 80007da:	2103      	movs	r1, #3
 80007dc:	fa01 f202 	lsl.w	r2, r1, r2
 80007e0:	43d2      	mvns	r2, r2
 80007e2:	401a      	ands	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	60da      	str	r2, [r3, #12]
			pgpio->PUPDR |= 0x01 << (2 * bitnum); // 01 = pull-up
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	431a      	orrs	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	60da      	str	r2, [r3, #12]
			break;
 80007fc:	e065      	b.n	80008ca <STM_SetPinGPIO+0x26a>
		case ioPortInputPD:
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // clear bits
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	2103      	movs	r1, #3
 8000808:	fa01 f202 	lsl.w	r2, r1, r2
 800080c:	43d2      	mvns	r2, r2
 800080e:	401a      	ands	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	60da      	str	r2, [r3, #12]
			pgpio->PUPDR |= 0x02 << (2 * bitnum); // 10 = pull-down
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	2102      	movs	r1, #2
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	431a      	orrs	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	60da      	str	r2, [r3, #12]
			break;
 8000828:	e04f      	b.n	80008ca <STM_SetPinGPIO+0x26a>
		case ioPortInputFloat: // 00 = input mode, nothing to do
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/dn
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	2103      	movs	r1, #3
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	43d2      	mvns	r2, r2
 800083a:	401a      	ands	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	60da      	str	r2, [r3, #12]
			break;
 8000840:	e043      	b.n	80008ca <STM_SetPinGPIO+0x26a>
		case ioPortAnalog:
			pgpio->MODER |= 0x03 << (2 * bitnum); // 11 - analog mode
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	0052      	lsls	r2, r2, #1
 800084a:	2103      	movs	r1, #3
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	431a      	orrs	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	601a      	str	r2, [r3, #0]
			break;
 8000856:	e038      	b.n	80008ca <STM_SetPinGPIO+0x26a>
	// other modes
	// Alternative modes
		case ioPortAlternatePP:
		case ioPortAlternateOC:
			pgpio->MODER |= 0x02 << (2 * bitnum); // set bits
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	431a      	orrs	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	601a      	str	r2, [r3, #0]
			if (mode == ioPortAlternateOC)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d109      	bne.n	8000886 <STM_SetPinGPIO+0x226>
				pgpio->OTYPER |= 0x01 << bitnum; // 1 = open-drain
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2101      	movs	r1, #1
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	431a      	orrs	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	e009      	b.n	800089a <STM_SetPinGPIO+0x23a>
			else
				pgpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2101      	movs	r1, #1
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	fa01 f202 	lsl.w	r2, r1, r2
 8000892:	43d2      	mvns	r2, r2
 8000894:	401a      	ands	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	605a      	str	r2, [r3, #4]
			pgpio->OSPEEDR |= 0x03 << (2 * bitnum); // high-speed = 11
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	0052      	lsls	r2, r2, #1
 80008a2:	2103      	movs	r1, #3
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	431a      	orrs	r2, r3
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	609a      	str	r2, [r3, #8]
			pgpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/pull-down
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	0052      	lsls	r2, r2, #1
 80008b6:	2103      	movs	r1, #3
 80008b8:	fa01 f202 	lsl.w	r2, r1, r2
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	60da      	str	r2, [r3, #12]
	// don't forget set AFR registers !!!
			break;
 80008c4:	e001      	b.n	80008ca <STM_SetPinGPIO+0x26a>
		default: // unknown mode ?
			return false; // return "fail"
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <STM_SetPinGPIO+0x26c>
	}
	return true; // return "OK"
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	371c      	adds	r7, #28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	40021c00 	.word	0x40021c00
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40023800 	.word	0x40023800

080008f4 <STM_SetAFGPIO>:

bool STM_SetAFGPIO(GPIO_TypeDef *pgpio, uint32_t bitnum, uint32_t afValue)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
pgpio->AFR[(bitnum < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitnum & 0x07))); // vynuluj AF bity
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b07      	cmp	r3, #7
 8000904:	bf8c      	ite	hi
 8000906:	2301      	movhi	r3, #1
 8000908:	2300      	movls	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	461a      	mov	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3208      	adds	r2, #8
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f002 0207 	and.w	r2, r2, #7
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	210f      	movs	r1, #15
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	43d2      	mvns	r2, r2
 8000926:	4611      	mov	r1, r2
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	2a07      	cmp	r2, #7
 800092c:	bf8c      	ite	hi
 800092e:	2201      	movhi	r2, #1
 8000930:	2200      	movls	r2, #0
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	4019      	ands	r1, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	3208      	adds	r2, #8
 800093a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
pgpio->AFR[(bitnum < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitnum & 0x07))); // nastav AF bity
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b07      	cmp	r3, #7
 8000942:	bf8c      	ite	hi
 8000944:	2301      	movhi	r3, #1
 8000946:	2300      	movls	r3, #0
 8000948:	b2db      	uxtb	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3208      	adds	r2, #8
 8000950:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 010f 	and.w	r1, r3, #15
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	2907      	cmp	r1, #7
 800096a:	bf8c      	ite	hi
 800096c:	2101      	movhi	r1, #1
 800096e:	2100      	movls	r1, #0
 8000970:	b2c9      	uxtb	r1, r1
 8000972:	4608      	mov	r0, r1
 8000974:	ea42 0103 	orr.w	r1, r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f100 0208 	add.w	r2, r0, #8
 800097e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
return true;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <GPIORead>:
#error TOGGLE_MODE not set
#endif
}

bool GPIORead(GPIO_TypeDef *pgpio, uint32_t bitnum)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	return !(pgpio->IDR &(1<<bitnum));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	2101      	movs	r1, #1
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	fa01 f202 	lsl.w	r2, r1, r2
 80009a6:	4013      	ands	r3, r2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf0c      	ite	eq
 80009ac:	2301      	moveq	r3, #1
 80009ae:	2300      	movne	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <Usart1Init>:
		setvbuf(stdout, NULL, _IONBF, 0);
		setvbuf(stdin, NULL, _IONBF, 0);
}

void Usart1Init(int baudSpeed)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
		STM_SetPinGPIO(GPIOB, 6, ioPortAlternatePP); // USART1 Tx
 80009c8:	2206      	movs	r2, #6
 80009ca:	2106      	movs	r1, #6
 80009cc:	4820      	ldr	r0, [pc, #128]	@ (8000a50 <Usart1Init+0x90>)
 80009ce:	f7ff fe47 	bl	8000660 <STM_SetPinGPIO>
		STM_SetAFGPIO(GPIOB, 6, 7); // AF = 07
 80009d2:	2207      	movs	r2, #7
 80009d4:	2106      	movs	r1, #6
 80009d6:	481e      	ldr	r0, [pc, #120]	@ (8000a50 <Usart1Init+0x90>)
 80009d8:	f7ff ff8c 	bl	80008f4 <STM_SetAFGPIO>
		STM_SetPinGPIO(GPIOB, 7, ioPortAlternatePP); // USART1 Rx
 80009dc:	2206      	movs	r2, #6
 80009de:	2107      	movs	r1, #7
 80009e0:	481b      	ldr	r0, [pc, #108]	@ (8000a50 <Usart1Init+0x90>)
 80009e2:	f7ff fe3d 	bl	8000660 <STM_SetPinGPIO>
		STM_SetAFGPIO(GPIOB, 7, 7); // AF = 07
 80009e6:	2207      	movs	r2, #7
 80009e8:	2107      	movs	r1, #7
 80009ea:	4819      	ldr	r0, [pc, #100]	@ (8000a50 <Usart1Init+0x90>)
 80009ec:	f7ff ff82 	bl	80008f4 <STM_SetAFGPIO>
		if (!(RCC->APB2ENR & RCC_APB2ENR_USART1EN)) // neni povolen USART1
 80009f0:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <Usart1Init+0x94>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d111      	bne.n	8000a20 <Usart1Init+0x60>
		{
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <Usart1Init+0x94>)
 80009fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a00:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <Usart1Init+0x94>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6453      	str	r3, [r2, #68]	@ 0x44
		RCC->APB2RSTR |= RCC_APB2RSTR_USART1RST;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <Usart1Init+0x94>)
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a0c:	4a11      	ldr	r2, [pc, #68]	@ (8000a54 <Usart1Init+0x94>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6253      	str	r3, [r2, #36]	@ 0x24
		RCC->APB2RSTR &= ~RCC_APB2RSTR_USART1RST;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <Usart1Init+0x94>)
 8000a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a18:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <Usart1Init+0x94>)
 8000a1a:	f023 0310 	bic.w	r3, r3, #16
 8000a1e:	6253      	str	r3, [r2, #36]	@ 0x24
		}
		USART1->CR1 = USART_CR1_RE | USART_CR1_TE; // potreba povoleni prijmu a vysilani
 8000a20:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <Usart1Init+0x98>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	60da      	str	r2, [r3, #12]
		USART1->CR2 = 0; // nic specialniho
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <Usart1Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
		USART1->CR3 = 0; // nic specialniho
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <Usart1Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
		//TODO doplnit vypocet BRR podle pozadovaneho a podle clocku
		USART1->BRR = 0x1A1; // rychlost 38400 pri 16MHz - spocitano predem
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <Usart1Init+0x98>)
 8000a34:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000a38:	609a      	str	r2, [r3, #8]
		USART1->CR1 |= USART_CR1_UE; // az na zaver povolen blok USARTu
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <Usart1Init+0x98>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	4a06      	ldr	r2, [pc, #24]	@ (8000a58 <Usart1Init+0x98>)
 8000a40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a44:	60d3      	str	r3, [r2, #12]

		// zrusit bufferovani vystupu i vstupu
		//setvbuf(stdout, NULL, _IONBF, 0);
		//setvbuf(stdin, NULL, _IONBF, 0);
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40011000 	.word	0x40011000

08000a5c <Usart1Send>:

int Usart1Send(char c)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
while(!(USART1->SR & USART_SR_TXE))
 8000a66:	bf00      	nop
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <Usart1Send+0x2c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f9      	beq.n	8000a68 <Usart1Send+0xc>
; // cekej dokud neni volny TDR
//c = 48;
USART1->DR = c; // zapis do TDR k odeslani
 8000a74:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <Usart1Send+0x2c>)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	6053      	str	r3, [r2, #4]
return c;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40011000 	.word	0x40011000

08000a8c <__libc_init_array>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ac4 <__libc_init_array+0x38>)
 8000a90:	4c0d      	ldr	r4, [pc, #52]	@ (8000ac8 <__libc_init_array+0x3c>)
 8000a92:	1b64      	subs	r4, r4, r5
 8000a94:	10a4      	asrs	r4, r4, #2
 8000a96:	2600      	movs	r6, #0
 8000a98:	42a6      	cmp	r6, r4
 8000a9a:	d109      	bne.n	8000ab0 <__libc_init_array+0x24>
 8000a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8000acc <__libc_init_array+0x40>)
 8000a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8000ad0 <__libc_init_array+0x44>)
 8000aa0:	f000 f818 	bl	8000ad4 <_init>
 8000aa4:	1b64      	subs	r4, r4, r5
 8000aa6:	10a4      	asrs	r4, r4, #2
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	42a6      	cmp	r6, r4
 8000aac:	d105      	bne.n	8000aba <__libc_init_array+0x2e>
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab4:	4798      	blx	r3
 8000ab6:	3601      	adds	r6, #1
 8000ab8:	e7ee      	b.n	8000a98 <__libc_init_array+0xc>
 8000aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000abe:	4798      	blx	r3
 8000ac0:	3601      	adds	r6, #1
 8000ac2:	e7f2      	b.n	8000aaa <__libc_init_array+0x1e>
 8000ac4:	08000afc 	.word	0x08000afc
 8000ac8:	08000afc 	.word	0x08000afc
 8000acc:	08000afc 	.word	0x08000afc
 8000ad0:	08000b00 	.word	0x08000b00

08000ad4 <_init>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	bf00      	nop
 8000ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ada:	bc08      	pop	{r3}
 8000adc:	469e      	mov	lr, r3
 8000ade:	4770      	bx	lr

08000ae0 <_fini>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	bf00      	nop
 8000ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae6:	bc08      	pop	{r3}
 8000ae8:	469e      	mov	lr, r3
 8000aea:	4770      	bx	lr
