
MAP_F411_CV6_USART_Priprava.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001620  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080017c0  080017c0  000117c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800181c  0800181c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800181c  0800181c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800181c  0800181c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800181c  0800181c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001820  08001820  00011820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001884  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001884  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000244f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000977  00000000  00000000  00022522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00022ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013d  00000000  00000000  00023070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fda0  00000000  00000000  000231ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002773  00000000  00000000  00032f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00056323  00000000  00000000  000356c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e10  00000000  00000000  0008b9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0008c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080017a8 	.word	0x080017a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080017a8 	.word	0x080017a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <SystemInit+0x20>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <SystemInit+0x20>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b087      	sub	sp, #28
 80002a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	2302      	movs	r3, #2
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	2302      	movs	r3, #2
 80002bc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002be:	4b34      	ldr	r3, [pc, #208]	; (8000390 <SystemCoreClockUpdate+0xec>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	f003 030c 	and.w	r3, r3, #12
 80002c6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	2b08      	cmp	r3, #8
 80002cc:	d011      	beq.n	80002f2 <SystemCoreClockUpdate+0x4e>
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	2b08      	cmp	r3, #8
 80002d2:	d844      	bhi.n	800035e <SystemCoreClockUpdate+0xba>
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d003      	beq.n	80002e2 <SystemCoreClockUpdate+0x3e>
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d004      	beq.n	80002ea <SystemCoreClockUpdate+0x46>
 80002e0:	e03d      	b.n	800035e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80002e2:	4b2c      	ldr	r3, [pc, #176]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 80002e4:	4a2c      	ldr	r2, [pc, #176]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 80002e6:	601a      	str	r2, [r3, #0]
      break;
 80002e8:	e03d      	b.n	8000366 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80002ea:	4b2a      	ldr	r3, [pc, #168]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 80002ec:	4a2b      	ldr	r2, [pc, #172]	; (800039c <SystemCoreClockUpdate+0xf8>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	e039      	b.n	8000366 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80002f2:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SystemCoreClockUpdate+0xec>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	0d9b      	lsrs	r3, r3, #22
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000306:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d00c      	beq.n	8000328 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800030e:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemCoreClockUpdate+0xf8>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	fbb2 f3f3 	udiv	r3, r2, r3
 8000316:	4a1e      	ldr	r2, [pc, #120]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000318:	6852      	ldr	r2, [r2, #4]
 800031a:	0992      	lsrs	r2, r2, #6
 800031c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	617b      	str	r3, [r7, #20]
 8000326:	e00b      	b.n	8000340 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000332:	6852      	ldr	r2, [r2, #4]
 8000334:	0992      	lsrs	r2, r2, #6
 8000336:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800033a:	fb02 f303 	mul.w	r3, r2, r3
 800033e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	0c1b      	lsrs	r3, r3, #16
 8000346:	f003 0303 	and.w	r3, r3, #3
 800034a:	3301      	adds	r3, #1
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	fbb2 f3f3 	udiv	r3, r2, r3
 8000358:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 800035a:	6013      	str	r3, [r2, #0]
      break;
 800035c:	e003      	b.n	8000366 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800035e:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 8000362:	601a      	str	r2, [r3, #0]
      break;
 8000364:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <SystemCoreClockUpdate+0xec>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	091b      	lsrs	r3, r3, #4
 800036c:	f003 030f 	and.w	r3, r3, #15
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <SystemCoreClockUpdate+0xfc>)
 8000372:	5cd3      	ldrb	r3, [r2, r3]
 8000374:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	fa22 f303 	lsr.w	r3, r2, r3
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <SystemCoreClockUpdate+0xf0>)
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	371c      	adds	r7, #28
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40023800 	.word	0x40023800
 8000394:	20000000 	.word	0x20000000
 8000398:	00f42400 	.word	0x00f42400
 800039c:	017d7840 	.word	0x017d7840
 80003a0:	080017d8 	.word	0x080017d8

080003a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	6039      	str	r1, [r7, #0]
 80003ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	db0a      	blt.n	80003ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	490c      	ldr	r1, [pc, #48]	; (80003f0 <__NVIC_SetPriority+0x4c>)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	0112      	lsls	r2, r2, #4
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003cc:	e00a      	b.n	80003e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4908      	ldr	r1, [pc, #32]	; (80003f4 <__NVIC_SetPriority+0x50>)
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 030f 	and.w	r3, r3, #15
 80003da:	3b04      	subs	r3, #4
 80003dc:	0112      	lsls	r2, r2, #4
 80003de:	b2d2      	uxtb	r2, r2
 80003e0:	440b      	add	r3, r1
 80003e2:	761a      	strb	r2, [r3, #24]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000e100 	.word	0xe000e100
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ffc2 	bl	80003a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <SysTick_Handler>:
#include "stm_usart.h"

volatile uint32_t _ticks = 0;

void SysTick_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	_ticks++;
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SysTick_Handler+0x18>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	4a03      	ldr	r2, [pc, #12]	; (8000454 <SysTick_Handler+0x18>)
 8000448:	6013      	str	r3, [r2, #0]
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	2000007c 	.word	0x2000007c

08000458 <main>:

int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0

	SystemCoreClockUpdate();
 800045e:	f7ff ff21 	bl	80002a4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock /1000 -1);
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <main+0x4c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <main+0x50>)
 8000468:	fba2 2303 	umull	r2, r3, r2, r3
 800046c:	099b      	lsrs	r3, r3, #6
 800046e:	3b01      	subs	r3, #1
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ffc1 	bl	80003f8 <SysTick_Config>
	Init8LED();
 8000476:	f000 f81b 	bl	80004b0 <Init8LED>
			  if (c > 'Z') // vysilame jen velka pismena
			  c = 'A';
		  }
		  */

		  if(IsUsart2Recv())
 800047a:	f000 f8c3 	bl	8000604 <IsUsart2Recv>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0fa      	beq.n	800047a <main+0x22>
		  {
			  char x = getchar();
 8000484:	f000 fa4a 	bl	800091c <getchar>
 8000488:	4603      	mov	r3, r0
 800048a:	71fb      	strb	r3, [r7, #7]

			  Write8LED(x);
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f84e 	bl	8000530 <Write8LED>
			  printf("Prijato %c = 0x%02x\n",x,x);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	79fa      	ldrb	r2, [r7, #7]
 8000498:	4619      	mov	r1, r3
 800049a:	4804      	ldr	r0, [pc, #16]	; (80004ac <main+0x54>)
 800049c:	f000 fa46 	bl	800092c <iprintf>
		  if(IsUsart2Recv())
 80004a0:	e7eb      	b.n	800047a <main+0x22>
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	10624dd3 	.word	0x10624dd3
 80004ac:	080017c0 	.word	0x080017c0

080004b0 <Init8LED>:
#include "map_shield.h"

#define USE_SPI_LED

void Init8LED(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	if(!(RCC->AHB1ENR & RCC_AHB1ENR_GPIOCEN))
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <Init8LED+0x78>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <Init8LED+0x34>
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <Init8LED+0x78>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a18      	ldr	r2, [pc, #96]	; (8000528 <Init8LED+0x78>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOCRST;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <Init8LED+0x78>)
 80004ce:	691b      	ldr	r3, [r3, #16]
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <Init8LED+0x78>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6113      	str	r3, [r2, #16]
		RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOCRST;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <Init8LED+0x78>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	4a12      	ldr	r2, [pc, #72]	; (8000528 <Init8LED+0x78>)
 80004de:	f023 0304 	bic.w	r3, r3, #4
 80004e2:	6113      	str	r3, [r2, #16]
	}

	GPIOC->MODER &= 0xffff0000;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <Init8LED+0x7c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a10      	ldr	r2, [pc, #64]	; (800052c <Init8LED+0x7c>)
 80004ea:	0c1b      	lsrs	r3, r3, #16
 80004ec:	041b      	lsls	r3, r3, #16
 80004ee:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x00005555;
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <Init8LED+0x7c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <Init8LED+0x7c>)
 80004f6:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80004fa:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80004fe:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= 0xff00;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <Init8LED+0x7c>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <Init8LED+0x7c>)
 8000506:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800050a:	6053      	str	r3, [r2, #4]

	GPIOC->OSPEEDR |= 0x0000ffff;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <Init8LED+0x7c>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <Init8LED+0x7c>)
 8000512:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8000516:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800051a:	6093      	str	r3, [r2, #8]
	return;
 800051c:	bf00      	nop
}
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800
 800052c:	40020800 	.word	0x40020800

08000530 <Write8LED>:

void Write8LED(uint8_t val)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR = (GPIOC->ODR & 0xff00) | (uint16_t)val;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <Write8LED+0x28>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	4904      	ldr	r1, [pc, #16]	; (8000558 <Write8LED+0x28>)
 8000546:	4313      	orrs	r3, r2
 8000548:	614b      	str	r3, [r1, #20]
	return;
 800054a:	bf00      	nop
}
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40020800 	.word	0x40020800

0800055c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000560:	f7ff fe8e 	bl	8000280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	; (800059c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	; (80005a8 <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058a:	f000 fa79 	bl	8000a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058e:	f7ff ff63 	bl	8000458 <main>

08000592 <LoopForever>:

LoopForever:
  b LoopForever
 8000592:	e7fe      	b.n	8000592 <LoopForever>
  ldr   r0, =_estack
 8000594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005a0:	08001824 	.word	0x08001824
  ldr r2, =_sbss
 80005a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005a8:	200001d0 	.word	0x200001d0

080005ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC_IRQHandler>
	...

080005b0 <Usart2Send>:
#include "stm_usart.h"


int Usart2Send(char c)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
while(!(USART2->SR & USART_SR_TXE))
 80005ba:	bf00      	nop
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <Usart2Send+0x2c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f9      	beq.n	80005bc <Usart2Send+0xc>
; // cekej dokud neni volny TDR
USART2->DR = c; // zapis do TDR k odeslani
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <Usart2Send+0x2c>)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	6053      	str	r3, [r2, #4]
return c;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40004400 	.word	0x40004400

080005e0 <Usart2Recv>:

int Usart2Recv(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
while(!(USART2->SR & USART_SR_RXNE)) // cekej dokud neprijde
 80005e4:	bf00      	nop
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <Usart2Recv+0x20>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f9      	beq.n	80005e6 <Usart2Recv+0x6>
;
return USART2->DR; // vycti a vrat jako hodnotu
 80005f2:	4b03      	ldr	r3, [pc, #12]	; (8000600 <Usart2Recv+0x20>)
 80005f4:	685b      	ldr	r3, [r3, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40004400 	.word	0x40004400

08000604 <IsUsart2Recv>:

bool IsUsart2Recv(void) // priznak, ze je neco v bufferu
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
return (USART2->SR & USART_SR_RXNE) != 0;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <IsUsart2Recv+0x20>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f003 0320 	and.w	r3, r3, #32
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
// podminka vynuti true/false vysledek
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40004400 	.word	0x40004400

08000628 <__io_putchar>:

// addon for CubeIDE with new structure of syscalls.c
int __io_putchar(int ch) { return Usart2Send(ch); }
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffbb 	bl	80005b0 <Usart2Send>
 800063a:	4603      	mov	r3, r0
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <__io_getchar>:
int __io_getchar(void) { return Usart2Recv(); }
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
 8000648:	f7ff ffca 	bl	80005e0 <Usart2Recv>
 800064c:	4603      	mov	r3, r0
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}

08000652 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	e00a      	b.n	800067a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000664:	f7ff ffee 	bl	8000644 <__io_getchar>
 8000668:	4601      	mov	r1, r0
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	60ba      	str	r2, [r7, #8]
 8000670:	b2ca      	uxtb	r2, r1
 8000672:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	3301      	adds	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	dbf0      	blt.n	8000664 <_read+0x12>
  }

  return len;
 8000682:	687b      	ldr	r3, [r7, #4]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e009      	b.n	80006b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	60ba      	str	r2, [r7, #8]
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffbe 	bl	8000628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	3301      	adds	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dbf1      	blt.n	800069e <_write+0x12>
  }
  return len;
 80006ba:	687b      	ldr	r3, [r7, #4]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <_close>:

int _close(int file)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ec:	605a      	str	r2, [r3, #4]
  return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <_isatty>:

int _isatty(int file)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000704:	2301      	movs	r3, #1
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000712:	b480      	push	{r7}
 8000714:	b085      	sub	sp, #20
 8000716:	af00      	add	r7, sp, #0
 8000718:	60f8      	str	r0, [r7, #12]
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000734:	4a14      	ldr	r2, [pc, #80]	; (8000788 <_sbrk+0x5c>)
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <_sbrk+0x60>)
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_sbrk+0x64>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <_sbrk+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	429a      	cmp	r2, r3
 800075a:	d207      	bcs.n	800076c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800075c:	f000 f98a 	bl	8000a74 <__errno>
 8000760:	4603      	mov	r3, r0
 8000762:	220c      	movs	r2, #12
 8000764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e009      	b.n	8000780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <_sbrk+0x64>)
 800077c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20020000 	.word	0x20020000
 800078c:	00000400 	.word	0x00000400
 8000790:	20000080 	.word	0x20000080
 8000794:	200001d0 	.word	0x200001d0

08000798 <std>:
 8000798:	2300      	movs	r3, #0
 800079a:	b510      	push	{r4, lr}
 800079c:	4604      	mov	r4, r0
 800079e:	e9c0 3300 	strd	r3, r3, [r0]
 80007a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007a6:	6083      	str	r3, [r0, #8]
 80007a8:	8181      	strh	r1, [r0, #12]
 80007aa:	6643      	str	r3, [r0, #100]	; 0x64
 80007ac:	81c2      	strh	r2, [r0, #14]
 80007ae:	6183      	str	r3, [r0, #24]
 80007b0:	4619      	mov	r1, r3
 80007b2:	2208      	movs	r2, #8
 80007b4:	305c      	adds	r0, #92	; 0x5c
 80007b6:	f000 f90e 	bl	80009d6 <memset>
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <std+0x58>)
 80007bc:	6263      	str	r3, [r4, #36]	; 0x24
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <std+0x5c>)
 80007c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <std+0x60>)
 80007c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <std+0x64>)
 80007c8:	6323      	str	r3, [r4, #48]	; 0x30
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <std+0x68>)
 80007cc:	6224      	str	r4, [r4, #32]
 80007ce:	429c      	cmp	r4, r3
 80007d0:	d006      	beq.n	80007e0 <std+0x48>
 80007d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80007d6:	4294      	cmp	r4, r2
 80007d8:	d002      	beq.n	80007e0 <std+0x48>
 80007da:	33d0      	adds	r3, #208	; 0xd0
 80007dc:	429c      	cmp	r4, r3
 80007de:	d105      	bne.n	80007ec <std+0x54>
 80007e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e8:	f000 b96e 	b.w	8000ac8 <__retarget_lock_init_recursive>
 80007ec:	bd10      	pop	{r4, pc}
 80007ee:	bf00      	nop
 80007f0:	08000951 	.word	0x08000951
 80007f4:	08000973 	.word	0x08000973
 80007f8:	080009ab 	.word	0x080009ab
 80007fc:	080009cf 	.word	0x080009cf
 8000800:	20000084 	.word	0x20000084

08000804 <stdio_exit_handler>:
 8000804:	4a02      	ldr	r2, [pc, #8]	; (8000810 <stdio_exit_handler+0xc>)
 8000806:	4903      	ldr	r1, [pc, #12]	; (8000814 <stdio_exit_handler+0x10>)
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <stdio_exit_handler+0x14>)
 800080a:	f000 b869 	b.w	80008e0 <_fwalk_sglue>
 800080e:	bf00      	nop
 8000810:	20000004 	.word	0x20000004
 8000814:	08001375 	.word	0x08001375
 8000818:	20000010 	.word	0x20000010

0800081c <cleanup_stdio>:
 800081c:	6841      	ldr	r1, [r0, #4]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <cleanup_stdio+0x34>)
 8000820:	4299      	cmp	r1, r3
 8000822:	b510      	push	{r4, lr}
 8000824:	4604      	mov	r4, r0
 8000826:	d001      	beq.n	800082c <cleanup_stdio+0x10>
 8000828:	f000 fda4 	bl	8001374 <_fflush_r>
 800082c:	68a1      	ldr	r1, [r4, #8]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <cleanup_stdio+0x38>)
 8000830:	4299      	cmp	r1, r3
 8000832:	d002      	beq.n	800083a <cleanup_stdio+0x1e>
 8000834:	4620      	mov	r0, r4
 8000836:	f000 fd9d 	bl	8001374 <_fflush_r>
 800083a:	68e1      	ldr	r1, [r4, #12]
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <cleanup_stdio+0x3c>)
 800083e:	4299      	cmp	r1, r3
 8000840:	d004      	beq.n	800084c <cleanup_stdio+0x30>
 8000842:	4620      	mov	r0, r4
 8000844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000848:	f000 bd94 	b.w	8001374 <_fflush_r>
 800084c:	bd10      	pop	{r4, pc}
 800084e:	bf00      	nop
 8000850:	20000084 	.word	0x20000084
 8000854:	200000ec 	.word	0x200000ec
 8000858:	20000154 	.word	0x20000154

0800085c <global_stdio_init.part.0>:
 800085c:	b510      	push	{r4, lr}
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <global_stdio_init.part.0+0x30>)
 8000860:	4c0b      	ldr	r4, [pc, #44]	; (8000890 <global_stdio_init.part.0+0x34>)
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <global_stdio_init.part.0+0x38>)
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4620      	mov	r0, r4
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	f7ff ff94 	bl	8000798 <std>
 8000870:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000874:	2201      	movs	r2, #1
 8000876:	2109      	movs	r1, #9
 8000878:	f7ff ff8e 	bl	8000798 <std>
 800087c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000880:	2202      	movs	r2, #2
 8000882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000886:	2112      	movs	r1, #18
 8000888:	f7ff bf86 	b.w	8000798 <std>
 800088c:	200001bc 	.word	0x200001bc
 8000890:	20000084 	.word	0x20000084
 8000894:	08000805 	.word	0x08000805

08000898 <__sfp_lock_acquire>:
 8000898:	4801      	ldr	r0, [pc, #4]	; (80008a0 <__sfp_lock_acquire+0x8>)
 800089a:	f000 b916 	b.w	8000aca <__retarget_lock_acquire_recursive>
 800089e:	bf00      	nop
 80008a0:	200001c5 	.word	0x200001c5

080008a4 <__sfp_lock_release>:
 80008a4:	4801      	ldr	r0, [pc, #4]	; (80008ac <__sfp_lock_release+0x8>)
 80008a6:	f000 b911 	b.w	8000acc <__retarget_lock_release_recursive>
 80008aa:	bf00      	nop
 80008ac:	200001c5 	.word	0x200001c5

080008b0 <__sinit>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4604      	mov	r4, r0
 80008b4:	f7ff fff0 	bl	8000898 <__sfp_lock_acquire>
 80008b8:	6a23      	ldr	r3, [r4, #32]
 80008ba:	b11b      	cbz	r3, 80008c4 <__sinit+0x14>
 80008bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c0:	f7ff bff0 	b.w	80008a4 <__sfp_lock_release>
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <__sinit+0x28>)
 80008c6:	6223      	str	r3, [r4, #32]
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__sinit+0x2c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1f5      	bne.n	80008bc <__sinit+0xc>
 80008d0:	f7ff ffc4 	bl	800085c <global_stdio_init.part.0>
 80008d4:	e7f2      	b.n	80008bc <__sinit+0xc>
 80008d6:	bf00      	nop
 80008d8:	0800081d 	.word	0x0800081d
 80008dc:	200001bc 	.word	0x200001bc

080008e0 <_fwalk_sglue>:
 80008e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e4:	4607      	mov	r7, r0
 80008e6:	4688      	mov	r8, r1
 80008e8:	4614      	mov	r4, r2
 80008ea:	2600      	movs	r6, #0
 80008ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008f0:	f1b9 0901 	subs.w	r9, r9, #1
 80008f4:	d505      	bpl.n	8000902 <_fwalk_sglue+0x22>
 80008f6:	6824      	ldr	r4, [r4, #0]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d1f7      	bne.n	80008ec <_fwalk_sglue+0xc>
 80008fc:	4630      	mov	r0, r6
 80008fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000902:	89ab      	ldrh	r3, [r5, #12]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d907      	bls.n	8000918 <_fwalk_sglue+0x38>
 8000908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800090c:	3301      	adds	r3, #1
 800090e:	d003      	beq.n	8000918 <_fwalk_sglue+0x38>
 8000910:	4629      	mov	r1, r5
 8000912:	4638      	mov	r0, r7
 8000914:	47c0      	blx	r8
 8000916:	4306      	orrs	r6, r0
 8000918:	3568      	adds	r5, #104	; 0x68
 800091a:	e7e9      	b.n	80008f0 <_fwalk_sglue+0x10>

0800091c <getchar>:
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <getchar+0xc>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	6841      	ldr	r1, [r0, #4]
 8000922:	f000 bd4f 	b.w	80013c4 <_getc_r>
 8000926:	bf00      	nop
 8000928:	2000005c 	.word	0x2000005c

0800092c <iprintf>:
 800092c:	b40f      	push	{r0, r1, r2, r3}
 800092e:	b507      	push	{r0, r1, r2, lr}
 8000930:	4906      	ldr	r1, [pc, #24]	; (800094c <iprintf+0x20>)
 8000932:	ab04      	add	r3, sp, #16
 8000934:	6808      	ldr	r0, [r1, #0]
 8000936:	f853 2b04 	ldr.w	r2, [r3], #4
 800093a:	6881      	ldr	r1, [r0, #8]
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	f000 f9e9 	bl	8000d14 <_vfiprintf_r>
 8000942:	b003      	add	sp, #12
 8000944:	f85d eb04 	ldr.w	lr, [sp], #4
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr
 800094c:	2000005c 	.word	0x2000005c

08000950 <__sread>:
 8000950:	b510      	push	{r4, lr}
 8000952:	460c      	mov	r4, r1
 8000954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000958:	f000 f868 	bl	8000a2c <_read_r>
 800095c:	2800      	cmp	r0, #0
 800095e:	bfab      	itete	ge
 8000960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000962:	89a3      	ldrhlt	r3, [r4, #12]
 8000964:	181b      	addge	r3, r3, r0
 8000966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800096a:	bfac      	ite	ge
 800096c:	6563      	strge	r3, [r4, #84]	; 0x54
 800096e:	81a3      	strhlt	r3, [r4, #12]
 8000970:	bd10      	pop	{r4, pc}

08000972 <__swrite>:
 8000972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000976:	461f      	mov	r7, r3
 8000978:	898b      	ldrh	r3, [r1, #12]
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	4605      	mov	r5, r0
 800097e:	460c      	mov	r4, r1
 8000980:	4616      	mov	r6, r2
 8000982:	d505      	bpl.n	8000990 <__swrite+0x1e>
 8000984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000988:	2302      	movs	r3, #2
 800098a:	2200      	movs	r2, #0
 800098c:	f000 f83c 	bl	8000a08 <_lseek_r>
 8000990:	89a3      	ldrh	r3, [r4, #12]
 8000992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800099a:	81a3      	strh	r3, [r4, #12]
 800099c:	4632      	mov	r2, r6
 800099e:	463b      	mov	r3, r7
 80009a0:	4628      	mov	r0, r5
 80009a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009a6:	f000 b853 	b.w	8000a50 <_write_r>

080009aa <__sseek>:
 80009aa:	b510      	push	{r4, lr}
 80009ac:	460c      	mov	r4, r1
 80009ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009b2:	f000 f829 	bl	8000a08 <_lseek_r>
 80009b6:	1c43      	adds	r3, r0, #1
 80009b8:	89a3      	ldrh	r3, [r4, #12]
 80009ba:	bf15      	itete	ne
 80009bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80009be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80009c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80009c6:	81a3      	strheq	r3, [r4, #12]
 80009c8:	bf18      	it	ne
 80009ca:	81a3      	strhne	r3, [r4, #12]
 80009cc:	bd10      	pop	{r4, pc}

080009ce <__sclose>:
 80009ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009d2:	f000 b809 	b.w	80009e8 <_close_r>

080009d6 <memset>:
 80009d6:	4402      	add	r2, r0
 80009d8:	4603      	mov	r3, r0
 80009da:	4293      	cmp	r3, r2
 80009dc:	d100      	bne.n	80009e0 <memset+0xa>
 80009de:	4770      	bx	lr
 80009e0:	f803 1b01 	strb.w	r1, [r3], #1
 80009e4:	e7f9      	b.n	80009da <memset+0x4>
	...

080009e8 <_close_r>:
 80009e8:	b538      	push	{r3, r4, r5, lr}
 80009ea:	4d06      	ldr	r5, [pc, #24]	; (8000a04 <_close_r+0x1c>)
 80009ec:	2300      	movs	r3, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	4608      	mov	r0, r1
 80009f2:	602b      	str	r3, [r5, #0]
 80009f4:	f7ff fe66 	bl	80006c4 <_close>
 80009f8:	1c43      	adds	r3, r0, #1
 80009fa:	d102      	bne.n	8000a02 <_close_r+0x1a>
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	b103      	cbz	r3, 8000a02 <_close_r+0x1a>
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	bd38      	pop	{r3, r4, r5, pc}
 8000a04:	200001c0 	.word	0x200001c0

08000a08 <_lseek_r>:
 8000a08:	b538      	push	{r3, r4, r5, lr}
 8000a0a:	4d07      	ldr	r5, [pc, #28]	; (8000a28 <_lseek_r+0x20>)
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	4608      	mov	r0, r1
 8000a10:	4611      	mov	r1, r2
 8000a12:	2200      	movs	r2, #0
 8000a14:	602a      	str	r2, [r5, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f7ff fe7b 	bl	8000712 <_lseek>
 8000a1c:	1c43      	adds	r3, r0, #1
 8000a1e:	d102      	bne.n	8000a26 <_lseek_r+0x1e>
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	b103      	cbz	r3, 8000a26 <_lseek_r+0x1e>
 8000a24:	6023      	str	r3, [r4, #0]
 8000a26:	bd38      	pop	{r3, r4, r5, pc}
 8000a28:	200001c0 	.word	0x200001c0

08000a2c <_read_r>:
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4d07      	ldr	r5, [pc, #28]	; (8000a4c <_read_r+0x20>)
 8000a30:	4604      	mov	r4, r0
 8000a32:	4608      	mov	r0, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	2200      	movs	r2, #0
 8000a38:	602a      	str	r2, [r5, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	f7ff fe09 	bl	8000652 <_read>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d102      	bne.n	8000a4a <_read_r+0x1e>
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	b103      	cbz	r3, 8000a4a <_read_r+0x1e>
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	200001c0 	.word	0x200001c0

08000a50 <_write_r>:
 8000a50:	b538      	push	{r3, r4, r5, lr}
 8000a52:	4d07      	ldr	r5, [pc, #28]	; (8000a70 <_write_r+0x20>)
 8000a54:	4604      	mov	r4, r0
 8000a56:	4608      	mov	r0, r1
 8000a58:	4611      	mov	r1, r2
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	602a      	str	r2, [r5, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f7ff fe14 	bl	800068c <_write>
 8000a64:	1c43      	adds	r3, r0, #1
 8000a66:	d102      	bne.n	8000a6e <_write_r+0x1e>
 8000a68:	682b      	ldr	r3, [r5, #0]
 8000a6a:	b103      	cbz	r3, 8000a6e <_write_r+0x1e>
 8000a6c:	6023      	str	r3, [r4, #0]
 8000a6e:	bd38      	pop	{r3, r4, r5, pc}
 8000a70:	200001c0 	.word	0x200001c0

08000a74 <__errno>:
 8000a74:	4b01      	ldr	r3, [pc, #4]	; (8000a7c <__errno+0x8>)
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	2000005c 	.word	0x2000005c

08000a80 <__libc_init_array>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	4d0d      	ldr	r5, [pc, #52]	; (8000ab8 <__libc_init_array+0x38>)
 8000a84:	4c0d      	ldr	r4, [pc, #52]	; (8000abc <__libc_init_array+0x3c>)
 8000a86:	1b64      	subs	r4, r4, r5
 8000a88:	10a4      	asrs	r4, r4, #2
 8000a8a:	2600      	movs	r6, #0
 8000a8c:	42a6      	cmp	r6, r4
 8000a8e:	d109      	bne.n	8000aa4 <__libc_init_array+0x24>
 8000a90:	4d0b      	ldr	r5, [pc, #44]	; (8000ac0 <__libc_init_array+0x40>)
 8000a92:	4c0c      	ldr	r4, [pc, #48]	; (8000ac4 <__libc_init_array+0x44>)
 8000a94:	f000 fe88 	bl	80017a8 <_init>
 8000a98:	1b64      	subs	r4, r4, r5
 8000a9a:	10a4      	asrs	r4, r4, #2
 8000a9c:	2600      	movs	r6, #0
 8000a9e:	42a6      	cmp	r6, r4
 8000aa0:	d105      	bne.n	8000aae <__libc_init_array+0x2e>
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
 8000aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa8:	4798      	blx	r3
 8000aaa:	3601      	adds	r6, #1
 8000aac:	e7ee      	b.n	8000a8c <__libc_init_array+0xc>
 8000aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab2:	4798      	blx	r3
 8000ab4:	3601      	adds	r6, #1
 8000ab6:	e7f2      	b.n	8000a9e <__libc_init_array+0x1e>
 8000ab8:	0800181c 	.word	0x0800181c
 8000abc:	0800181c 	.word	0x0800181c
 8000ac0:	0800181c 	.word	0x0800181c
 8000ac4:	08001820 	.word	0x08001820

08000ac8 <__retarget_lock_init_recursive>:
 8000ac8:	4770      	bx	lr

08000aca <__retarget_lock_acquire_recursive>:
 8000aca:	4770      	bx	lr

08000acc <__retarget_lock_release_recursive>:
 8000acc:	4770      	bx	lr
	...

08000ad0 <_free_r>:
 8000ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ad2:	2900      	cmp	r1, #0
 8000ad4:	d044      	beq.n	8000b60 <_free_r+0x90>
 8000ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ada:	9001      	str	r0, [sp, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f1a1 0404 	sub.w	r4, r1, #4
 8000ae2:	bfb8      	it	lt
 8000ae4:	18e4      	addlt	r4, r4, r3
 8000ae6:	f000 f8df 	bl	8000ca8 <__malloc_lock>
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <_free_r+0x94>)
 8000aec:	9801      	ldr	r0, [sp, #4]
 8000aee:	6813      	ldr	r3, [r2, #0]
 8000af0:	b933      	cbnz	r3, 8000b00 <_free_r+0x30>
 8000af2:	6063      	str	r3, [r4, #4]
 8000af4:	6014      	str	r4, [r2, #0]
 8000af6:	b003      	add	sp, #12
 8000af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000afc:	f000 b8da 	b.w	8000cb4 <__malloc_unlock>
 8000b00:	42a3      	cmp	r3, r4
 8000b02:	d908      	bls.n	8000b16 <_free_r+0x46>
 8000b04:	6825      	ldr	r5, [r4, #0]
 8000b06:	1961      	adds	r1, r4, r5
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	bf01      	itttt	eq
 8000b0c:	6819      	ldreq	r1, [r3, #0]
 8000b0e:	685b      	ldreq	r3, [r3, #4]
 8000b10:	1949      	addeq	r1, r1, r5
 8000b12:	6021      	streq	r1, [r4, #0]
 8000b14:	e7ed      	b.n	8000af2 <_free_r+0x22>
 8000b16:	461a      	mov	r2, r3
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	b10b      	cbz	r3, 8000b20 <_free_r+0x50>
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d9fa      	bls.n	8000b16 <_free_r+0x46>
 8000b20:	6811      	ldr	r1, [r2, #0]
 8000b22:	1855      	adds	r5, r2, r1
 8000b24:	42a5      	cmp	r5, r4
 8000b26:	d10b      	bne.n	8000b40 <_free_r+0x70>
 8000b28:	6824      	ldr	r4, [r4, #0]
 8000b2a:	4421      	add	r1, r4
 8000b2c:	1854      	adds	r4, r2, r1
 8000b2e:	42a3      	cmp	r3, r4
 8000b30:	6011      	str	r1, [r2, #0]
 8000b32:	d1e0      	bne.n	8000af6 <_free_r+0x26>
 8000b34:	681c      	ldr	r4, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	6053      	str	r3, [r2, #4]
 8000b3a:	440c      	add	r4, r1
 8000b3c:	6014      	str	r4, [r2, #0]
 8000b3e:	e7da      	b.n	8000af6 <_free_r+0x26>
 8000b40:	d902      	bls.n	8000b48 <_free_r+0x78>
 8000b42:	230c      	movs	r3, #12
 8000b44:	6003      	str	r3, [r0, #0]
 8000b46:	e7d6      	b.n	8000af6 <_free_r+0x26>
 8000b48:	6825      	ldr	r5, [r4, #0]
 8000b4a:	1961      	adds	r1, r4, r5
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	bf04      	itt	eq
 8000b50:	6819      	ldreq	r1, [r3, #0]
 8000b52:	685b      	ldreq	r3, [r3, #4]
 8000b54:	6063      	str	r3, [r4, #4]
 8000b56:	bf04      	itt	eq
 8000b58:	1949      	addeq	r1, r1, r5
 8000b5a:	6021      	streq	r1, [r4, #0]
 8000b5c:	6054      	str	r4, [r2, #4]
 8000b5e:	e7ca      	b.n	8000af6 <_free_r+0x26>
 8000b60:	b003      	add	sp, #12
 8000b62:	bd30      	pop	{r4, r5, pc}
 8000b64:	200001c8 	.word	0x200001c8

08000b68 <sbrk_aligned>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	4e0e      	ldr	r6, [pc, #56]	; (8000ba4 <sbrk_aligned+0x3c>)
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	6831      	ldr	r1, [r6, #0]
 8000b70:	4605      	mov	r5, r0
 8000b72:	b911      	cbnz	r1, 8000b7a <sbrk_aligned+0x12>
 8000b74:	f000 fd82 	bl	800167c <_sbrk_r>
 8000b78:	6030      	str	r0, [r6, #0]
 8000b7a:	4621      	mov	r1, r4
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	f000 fd7d 	bl	800167c <_sbrk_r>
 8000b82:	1c43      	adds	r3, r0, #1
 8000b84:	d00a      	beq.n	8000b9c <sbrk_aligned+0x34>
 8000b86:	1cc4      	adds	r4, r0, #3
 8000b88:	f024 0403 	bic.w	r4, r4, #3
 8000b8c:	42a0      	cmp	r0, r4
 8000b8e:	d007      	beq.n	8000ba0 <sbrk_aligned+0x38>
 8000b90:	1a21      	subs	r1, r4, r0
 8000b92:	4628      	mov	r0, r5
 8000b94:	f000 fd72 	bl	800167c <_sbrk_r>
 8000b98:	3001      	adds	r0, #1
 8000b9a:	d101      	bne.n	8000ba0 <sbrk_aligned+0x38>
 8000b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
 8000ba4:	200001cc 	.word	0x200001cc

08000ba8 <_malloc_r>:
 8000ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bac:	1ccd      	adds	r5, r1, #3
 8000bae:	f025 0503 	bic.w	r5, r5, #3
 8000bb2:	3508      	adds	r5, #8
 8000bb4:	2d0c      	cmp	r5, #12
 8000bb6:	bf38      	it	cc
 8000bb8:	250c      	movcc	r5, #12
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	4607      	mov	r7, r0
 8000bbe:	db01      	blt.n	8000bc4 <_malloc_r+0x1c>
 8000bc0:	42a9      	cmp	r1, r5
 8000bc2:	d905      	bls.n	8000bd0 <_malloc_r+0x28>
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	2600      	movs	r6, #0
 8000bca:	4630      	mov	r0, r6
 8000bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ca4 <_malloc_r+0xfc>
 8000bd4:	f000 f868 	bl	8000ca8 <__malloc_lock>
 8000bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8000bdc:	461c      	mov	r4, r3
 8000bde:	bb5c      	cbnz	r4, 8000c38 <_malloc_r+0x90>
 8000be0:	4629      	mov	r1, r5
 8000be2:	4638      	mov	r0, r7
 8000be4:	f7ff ffc0 	bl	8000b68 <sbrk_aligned>
 8000be8:	1c43      	adds	r3, r0, #1
 8000bea:	4604      	mov	r4, r0
 8000bec:	d155      	bne.n	8000c9a <_malloc_r+0xf2>
 8000bee:	f8d8 4000 	ldr.w	r4, [r8]
 8000bf2:	4626      	mov	r6, r4
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d145      	bne.n	8000c84 <_malloc_r+0xdc>
 8000bf8:	2c00      	cmp	r4, #0
 8000bfa:	d048      	beq.n	8000c8e <_malloc_r+0xe6>
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	4631      	mov	r1, r6
 8000c00:	4638      	mov	r0, r7
 8000c02:	eb04 0903 	add.w	r9, r4, r3
 8000c06:	f000 fd39 	bl	800167c <_sbrk_r>
 8000c0a:	4581      	cmp	r9, r0
 8000c0c:	d13f      	bne.n	8000c8e <_malloc_r+0xe6>
 8000c0e:	6821      	ldr	r1, [r4, #0]
 8000c10:	1a6d      	subs	r5, r5, r1
 8000c12:	4629      	mov	r1, r5
 8000c14:	4638      	mov	r0, r7
 8000c16:	f7ff ffa7 	bl	8000b68 <sbrk_aligned>
 8000c1a:	3001      	adds	r0, #1
 8000c1c:	d037      	beq.n	8000c8e <_malloc_r+0xe6>
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	442b      	add	r3, r5
 8000c22:	6023      	str	r3, [r4, #0]
 8000c24:	f8d8 3000 	ldr.w	r3, [r8]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d038      	beq.n	8000c9e <_malloc_r+0xf6>
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	42a2      	cmp	r2, r4
 8000c30:	d12b      	bne.n	8000c8a <_malloc_r+0xe2>
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	e00f      	b.n	8000c58 <_malloc_r+0xb0>
 8000c38:	6822      	ldr	r2, [r4, #0]
 8000c3a:	1b52      	subs	r2, r2, r5
 8000c3c:	d41f      	bmi.n	8000c7e <_malloc_r+0xd6>
 8000c3e:	2a0b      	cmp	r2, #11
 8000c40:	d917      	bls.n	8000c72 <_malloc_r+0xca>
 8000c42:	1961      	adds	r1, r4, r5
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	6025      	str	r5, [r4, #0]
 8000c48:	bf18      	it	ne
 8000c4a:	6059      	strne	r1, [r3, #4]
 8000c4c:	6863      	ldr	r3, [r4, #4]
 8000c4e:	bf08      	it	eq
 8000c50:	f8c8 1000 	streq.w	r1, [r8]
 8000c54:	5162      	str	r2, [r4, r5]
 8000c56:	604b      	str	r3, [r1, #4]
 8000c58:	4638      	mov	r0, r7
 8000c5a:	f104 060b 	add.w	r6, r4, #11
 8000c5e:	f000 f829 	bl	8000cb4 <__malloc_unlock>
 8000c62:	f026 0607 	bic.w	r6, r6, #7
 8000c66:	1d23      	adds	r3, r4, #4
 8000c68:	1af2      	subs	r2, r6, r3
 8000c6a:	d0ae      	beq.n	8000bca <_malloc_r+0x22>
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	50a3      	str	r3, [r4, r2]
 8000c70:	e7ab      	b.n	8000bca <_malloc_r+0x22>
 8000c72:	42a3      	cmp	r3, r4
 8000c74:	6862      	ldr	r2, [r4, #4]
 8000c76:	d1dd      	bne.n	8000c34 <_malloc_r+0x8c>
 8000c78:	f8c8 2000 	str.w	r2, [r8]
 8000c7c:	e7ec      	b.n	8000c58 <_malloc_r+0xb0>
 8000c7e:	4623      	mov	r3, r4
 8000c80:	6864      	ldr	r4, [r4, #4]
 8000c82:	e7ac      	b.n	8000bde <_malloc_r+0x36>
 8000c84:	4634      	mov	r4, r6
 8000c86:	6876      	ldr	r6, [r6, #4]
 8000c88:	e7b4      	b.n	8000bf4 <_malloc_r+0x4c>
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	e7cc      	b.n	8000c28 <_malloc_r+0x80>
 8000c8e:	230c      	movs	r3, #12
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4638      	mov	r0, r7
 8000c94:	f000 f80e 	bl	8000cb4 <__malloc_unlock>
 8000c98:	e797      	b.n	8000bca <_malloc_r+0x22>
 8000c9a:	6025      	str	r5, [r4, #0]
 8000c9c:	e7dc      	b.n	8000c58 <_malloc_r+0xb0>
 8000c9e:	605b      	str	r3, [r3, #4]
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	bf00      	nop
 8000ca4:	200001c8 	.word	0x200001c8

08000ca8 <__malloc_lock>:
 8000ca8:	4801      	ldr	r0, [pc, #4]	; (8000cb0 <__malloc_lock+0x8>)
 8000caa:	f7ff bf0e 	b.w	8000aca <__retarget_lock_acquire_recursive>
 8000cae:	bf00      	nop
 8000cb0:	200001c4 	.word	0x200001c4

08000cb4 <__malloc_unlock>:
 8000cb4:	4801      	ldr	r0, [pc, #4]	; (8000cbc <__malloc_unlock+0x8>)
 8000cb6:	f7ff bf09 	b.w	8000acc <__retarget_lock_release_recursive>
 8000cba:	bf00      	nop
 8000cbc:	200001c4 	.word	0x200001c4

08000cc0 <__sfputc_r>:
 8000cc0:	6893      	ldr	r3, [r2, #8]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	b410      	push	{r4}
 8000cc8:	6093      	str	r3, [r2, #8]
 8000cca:	da08      	bge.n	8000cde <__sfputc_r+0x1e>
 8000ccc:	6994      	ldr	r4, [r2, #24]
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	db01      	blt.n	8000cd6 <__sfputc_r+0x16>
 8000cd2:	290a      	cmp	r1, #10
 8000cd4:	d103      	bne.n	8000cde <__sfputc_r+0x1e>
 8000cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cda:	f000 bc18 	b.w	800150e <__swbuf_r>
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	1c58      	adds	r0, r3, #1
 8000ce2:	6010      	str	r0, [r2, #0]
 8000ce4:	7019      	strb	r1, [r3, #0]
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <__sfputs_r>:
 8000cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	18d5      	adds	r5, r2, r3
 8000cf8:	42ac      	cmp	r4, r5
 8000cfa:	d101      	bne.n	8000d00 <__sfputs_r+0x12>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	e007      	b.n	8000d10 <__sfputs_r+0x22>
 8000d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d04:	463a      	mov	r2, r7
 8000d06:	4630      	mov	r0, r6
 8000d08:	f7ff ffda 	bl	8000cc0 <__sfputc_r>
 8000d0c:	1c43      	adds	r3, r0, #1
 8000d0e:	d1f3      	bne.n	8000cf8 <__sfputs_r+0xa>
 8000d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d14 <_vfiprintf_r>:
 8000d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d18:	460d      	mov	r5, r1
 8000d1a:	b09d      	sub	sp, #116	; 0x74
 8000d1c:	4614      	mov	r4, r2
 8000d1e:	4698      	mov	r8, r3
 8000d20:	4606      	mov	r6, r0
 8000d22:	b118      	cbz	r0, 8000d2c <_vfiprintf_r+0x18>
 8000d24:	6a03      	ldr	r3, [r0, #32]
 8000d26:	b90b      	cbnz	r3, 8000d2c <_vfiprintf_r+0x18>
 8000d28:	f7ff fdc2 	bl	80008b0 <__sinit>
 8000d2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d2e:	07d9      	lsls	r1, r3, #31
 8000d30:	d405      	bmi.n	8000d3e <_vfiprintf_r+0x2a>
 8000d32:	89ab      	ldrh	r3, [r5, #12]
 8000d34:	059a      	lsls	r2, r3, #22
 8000d36:	d402      	bmi.n	8000d3e <_vfiprintf_r+0x2a>
 8000d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d3a:	f7ff fec6 	bl	8000aca <__retarget_lock_acquire_recursive>
 8000d3e:	89ab      	ldrh	r3, [r5, #12]
 8000d40:	071b      	lsls	r3, r3, #28
 8000d42:	d501      	bpl.n	8000d48 <_vfiprintf_r+0x34>
 8000d44:	692b      	ldr	r3, [r5, #16]
 8000d46:	b99b      	cbnz	r3, 8000d70 <_vfiprintf_r+0x5c>
 8000d48:	4629      	mov	r1, r5
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	f000 fc1c 	bl	8001588 <__swsetup_r>
 8000d50:	b170      	cbz	r0, 8000d70 <_vfiprintf_r+0x5c>
 8000d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d54:	07dc      	lsls	r4, r3, #31
 8000d56:	d504      	bpl.n	8000d62 <_vfiprintf_r+0x4e>
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	b01d      	add	sp, #116	; 0x74
 8000d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d62:	89ab      	ldrh	r3, [r5, #12]
 8000d64:	0598      	lsls	r0, r3, #22
 8000d66:	d4f7      	bmi.n	8000d58 <_vfiprintf_r+0x44>
 8000d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d6a:	f7ff feaf 	bl	8000acc <__retarget_lock_release_recursive>
 8000d6e:	e7f3      	b.n	8000d58 <_vfiprintf_r+0x44>
 8000d70:	2300      	movs	r3, #0
 8000d72:	9309      	str	r3, [sp, #36]	; 0x24
 8000d74:	2320      	movs	r3, #32
 8000d76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d7e:	2330      	movs	r3, #48	; 0x30
 8000d80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f34 <_vfiprintf_r+0x220>
 8000d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d88:	f04f 0901 	mov.w	r9, #1
 8000d8c:	4623      	mov	r3, r4
 8000d8e:	469a      	mov	sl, r3
 8000d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d94:	b10a      	cbz	r2, 8000d9a <_vfiprintf_r+0x86>
 8000d96:	2a25      	cmp	r2, #37	; 0x25
 8000d98:	d1f9      	bne.n	8000d8e <_vfiprintf_r+0x7a>
 8000d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8000d9e:	d00b      	beq.n	8000db8 <_vfiprintf_r+0xa4>
 8000da0:	465b      	mov	r3, fp
 8000da2:	4622      	mov	r2, r4
 8000da4:	4629      	mov	r1, r5
 8000da6:	4630      	mov	r0, r6
 8000da8:	f7ff ffa1 	bl	8000cee <__sfputs_r>
 8000dac:	3001      	adds	r0, #1
 8000dae:	f000 80a9 	beq.w	8000f04 <_vfiprintf_r+0x1f0>
 8000db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000db4:	445a      	add	r2, fp
 8000db6:	9209      	str	r2, [sp, #36]	; 0x24
 8000db8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80a1 	beq.w	8000f04 <_vfiprintf_r+0x1f0>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dcc:	f10a 0a01 	add.w	sl, sl, #1
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	9307      	str	r3, [sp, #28]
 8000dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8000dda:	4654      	mov	r4, sl
 8000ddc:	2205      	movs	r2, #5
 8000dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000de2:	4854      	ldr	r0, [pc, #336]	; (8000f34 <_vfiprintf_r+0x220>)
 8000de4:	f7ff f9fc 	bl	80001e0 <memchr>
 8000de8:	9a04      	ldr	r2, [sp, #16]
 8000dea:	b9d8      	cbnz	r0, 8000e24 <_vfiprintf_r+0x110>
 8000dec:	06d1      	lsls	r1, r2, #27
 8000dee:	bf44      	itt	mi
 8000df0:	2320      	movmi	r3, #32
 8000df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000df6:	0713      	lsls	r3, r2, #28
 8000df8:	bf44      	itt	mi
 8000dfa:	232b      	movmi	r3, #43	; 0x2b
 8000dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e00:	f89a 3000 	ldrb.w	r3, [sl]
 8000e04:	2b2a      	cmp	r3, #42	; 0x2a
 8000e06:	d015      	beq.n	8000e34 <_vfiprintf_r+0x120>
 8000e08:	9a07      	ldr	r2, [sp, #28]
 8000e0a:	4654      	mov	r4, sl
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f04f 0c0a 	mov.w	ip, #10
 8000e12:	4621      	mov	r1, r4
 8000e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e18:	3b30      	subs	r3, #48	; 0x30
 8000e1a:	2b09      	cmp	r3, #9
 8000e1c:	d94d      	bls.n	8000eba <_vfiprintf_r+0x1a6>
 8000e1e:	b1b0      	cbz	r0, 8000e4e <_vfiprintf_r+0x13a>
 8000e20:	9207      	str	r2, [sp, #28]
 8000e22:	e014      	b.n	8000e4e <_vfiprintf_r+0x13a>
 8000e24:	eba0 0308 	sub.w	r3, r0, r8
 8000e28:	fa09 f303 	lsl.w	r3, r9, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	9304      	str	r3, [sp, #16]
 8000e30:	46a2      	mov	sl, r4
 8000e32:	e7d2      	b.n	8000dda <_vfiprintf_r+0xc6>
 8000e34:	9b03      	ldr	r3, [sp, #12]
 8000e36:	1d19      	adds	r1, r3, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	9103      	str	r1, [sp, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bfbb      	ittet	lt
 8000e40:	425b      	neglt	r3, r3
 8000e42:	f042 0202 	orrlt.w	r2, r2, #2
 8000e46:	9307      	strge	r3, [sp, #28]
 8000e48:	9307      	strlt	r3, [sp, #28]
 8000e4a:	bfb8      	it	lt
 8000e4c:	9204      	strlt	r2, [sp, #16]
 8000e4e:	7823      	ldrb	r3, [r4, #0]
 8000e50:	2b2e      	cmp	r3, #46	; 0x2e
 8000e52:	d10c      	bne.n	8000e6e <_vfiprintf_r+0x15a>
 8000e54:	7863      	ldrb	r3, [r4, #1]
 8000e56:	2b2a      	cmp	r3, #42	; 0x2a
 8000e58:	d134      	bne.n	8000ec4 <_vfiprintf_r+0x1b0>
 8000e5a:	9b03      	ldr	r3, [sp, #12]
 8000e5c:	1d1a      	adds	r2, r3, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	9203      	str	r2, [sp, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bfb8      	it	lt
 8000e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e6a:	3402      	adds	r4, #2
 8000e6c:	9305      	str	r3, [sp, #20]
 8000e6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f44 <_vfiprintf_r+0x230>
 8000e72:	7821      	ldrb	r1, [r4, #0]
 8000e74:	2203      	movs	r2, #3
 8000e76:	4650      	mov	r0, sl
 8000e78:	f7ff f9b2 	bl	80001e0 <memchr>
 8000e7c:	b138      	cbz	r0, 8000e8e <_vfiprintf_r+0x17a>
 8000e7e:	9b04      	ldr	r3, [sp, #16]
 8000e80:	eba0 000a 	sub.w	r0, r0, sl
 8000e84:	2240      	movs	r2, #64	; 0x40
 8000e86:	4082      	lsls	r2, r0
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	3401      	adds	r4, #1
 8000e8c:	9304      	str	r3, [sp, #16]
 8000e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e92:	4829      	ldr	r0, [pc, #164]	; (8000f38 <_vfiprintf_r+0x224>)
 8000e94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e98:	2206      	movs	r2, #6
 8000e9a:	f7ff f9a1 	bl	80001e0 <memchr>
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	d03f      	beq.n	8000f22 <_vfiprintf_r+0x20e>
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <_vfiprintf_r+0x228>)
 8000ea4:	bb1b      	cbnz	r3, 8000eee <_vfiprintf_r+0x1da>
 8000ea6:	9b03      	ldr	r3, [sp, #12]
 8000ea8:	3307      	adds	r3, #7
 8000eaa:	f023 0307 	bic.w	r3, r3, #7
 8000eae:	3308      	adds	r3, #8
 8000eb0:	9303      	str	r3, [sp, #12]
 8000eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000eb4:	443b      	add	r3, r7
 8000eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8000eb8:	e768      	b.n	8000d8c <_vfiprintf_r+0x78>
 8000eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ebe:	460c      	mov	r4, r1
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	e7a6      	b.n	8000e12 <_vfiprintf_r+0xfe>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	3401      	adds	r4, #1
 8000ec8:	9305      	str	r3, [sp, #20]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 0c0a 	mov.w	ip, #10
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ed6:	3a30      	subs	r2, #48	; 0x30
 8000ed8:	2a09      	cmp	r2, #9
 8000eda:	d903      	bls.n	8000ee4 <_vfiprintf_r+0x1d0>
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0c6      	beq.n	8000e6e <_vfiprintf_r+0x15a>
 8000ee0:	9105      	str	r1, [sp, #20]
 8000ee2:	e7c4      	b.n	8000e6e <_vfiprintf_r+0x15a>
 8000ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ee8:	4604      	mov	r4, r0
 8000eea:	2301      	movs	r3, #1
 8000eec:	e7f0      	b.n	8000ed0 <_vfiprintf_r+0x1bc>
 8000eee:	ab03      	add	r3, sp, #12
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	462a      	mov	r2, r5
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <_vfiprintf_r+0x22c>)
 8000ef6:	a904      	add	r1, sp, #16
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f3af 8000 	nop.w
 8000efe:	4607      	mov	r7, r0
 8000f00:	1c78      	adds	r0, r7, #1
 8000f02:	d1d6      	bne.n	8000eb2 <_vfiprintf_r+0x19e>
 8000f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f06:	07d9      	lsls	r1, r3, #31
 8000f08:	d405      	bmi.n	8000f16 <_vfiprintf_r+0x202>
 8000f0a:	89ab      	ldrh	r3, [r5, #12]
 8000f0c:	059a      	lsls	r2, r3, #22
 8000f0e:	d402      	bmi.n	8000f16 <_vfiprintf_r+0x202>
 8000f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f12:	f7ff fddb 	bl	8000acc <__retarget_lock_release_recursive>
 8000f16:	89ab      	ldrh	r3, [r5, #12]
 8000f18:	065b      	lsls	r3, r3, #25
 8000f1a:	f53f af1d 	bmi.w	8000d58 <_vfiprintf_r+0x44>
 8000f1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f20:	e71c      	b.n	8000d5c <_vfiprintf_r+0x48>
 8000f22:	ab03      	add	r3, sp, #12
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	462a      	mov	r2, r5
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <_vfiprintf_r+0x22c>)
 8000f2a:	a904      	add	r1, sp, #16
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	f000 f879 	bl	8001024 <_printf_i>
 8000f32:	e7e4      	b.n	8000efe <_vfiprintf_r+0x1ea>
 8000f34:	080017e8 	.word	0x080017e8
 8000f38:	080017f2 	.word	0x080017f2
 8000f3c:	00000000 	.word	0x00000000
 8000f40:	08000cef 	.word	0x08000cef
 8000f44:	080017ee 	.word	0x080017ee

08000f48 <_printf_common>:
 8000f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f4c:	4616      	mov	r6, r2
 8000f4e:	4699      	mov	r9, r3
 8000f50:	688a      	ldr	r2, [r1, #8]
 8000f52:	690b      	ldr	r3, [r1, #16]
 8000f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	bfb8      	it	lt
 8000f5c:	4613      	movlt	r3, r2
 8000f5e:	6033      	str	r3, [r6, #0]
 8000f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f64:	4607      	mov	r7, r0
 8000f66:	460c      	mov	r4, r1
 8000f68:	b10a      	cbz	r2, 8000f6e <_printf_common+0x26>
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	6033      	str	r3, [r6, #0]
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	0699      	lsls	r1, r3, #26
 8000f72:	bf42      	ittt	mi
 8000f74:	6833      	ldrmi	r3, [r6, #0]
 8000f76:	3302      	addmi	r3, #2
 8000f78:	6033      	strmi	r3, [r6, #0]
 8000f7a:	6825      	ldr	r5, [r4, #0]
 8000f7c:	f015 0506 	ands.w	r5, r5, #6
 8000f80:	d106      	bne.n	8000f90 <_printf_common+0x48>
 8000f82:	f104 0a19 	add.w	sl, r4, #25
 8000f86:	68e3      	ldr	r3, [r4, #12]
 8000f88:	6832      	ldr	r2, [r6, #0]
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	42ab      	cmp	r3, r5
 8000f8e:	dc26      	bgt.n	8000fde <_printf_common+0x96>
 8000f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f94:	1e13      	subs	r3, r2, #0
 8000f96:	6822      	ldr	r2, [r4, #0]
 8000f98:	bf18      	it	ne
 8000f9a:	2301      	movne	r3, #1
 8000f9c:	0692      	lsls	r2, r2, #26
 8000f9e:	d42b      	bmi.n	8000ff8 <_printf_common+0xb0>
 8000fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fa4:	4649      	mov	r1, r9
 8000fa6:	4638      	mov	r0, r7
 8000fa8:	47c0      	blx	r8
 8000faa:	3001      	adds	r0, #1
 8000fac:	d01e      	beq.n	8000fec <_printf_common+0xa4>
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	6922      	ldr	r2, [r4, #16]
 8000fb2:	f003 0306 	and.w	r3, r3, #6
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf02      	ittt	eq
 8000fba:	68e5      	ldreq	r5, [r4, #12]
 8000fbc:	6833      	ldreq	r3, [r6, #0]
 8000fbe:	1aed      	subeq	r5, r5, r3
 8000fc0:	68a3      	ldr	r3, [r4, #8]
 8000fc2:	bf0c      	ite	eq
 8000fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fc8:	2500      	movne	r5, #0
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	bfc4      	itt	gt
 8000fce:	1a9b      	subgt	r3, r3, r2
 8000fd0:	18ed      	addgt	r5, r5, r3
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	341a      	adds	r4, #26
 8000fd6:	42b5      	cmp	r5, r6
 8000fd8:	d11a      	bne.n	8001010 <_printf_common+0xc8>
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e008      	b.n	8000ff0 <_printf_common+0xa8>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4652      	mov	r2, sl
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	47c0      	blx	r8
 8000fe8:	3001      	adds	r0, #1
 8000fea:	d103      	bne.n	8000ff4 <_printf_common+0xac>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff4:	3501      	adds	r5, #1
 8000ff6:	e7c6      	b.n	8000f86 <_printf_common+0x3e>
 8000ff8:	18e1      	adds	r1, r4, r3
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	2030      	movs	r0, #48	; 0x30
 8000ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001002:	4422      	add	r2, r4
 8001004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800100c:	3302      	adds	r3, #2
 800100e:	e7c7      	b.n	8000fa0 <_printf_common+0x58>
 8001010:	2301      	movs	r3, #1
 8001012:	4622      	mov	r2, r4
 8001014:	4649      	mov	r1, r9
 8001016:	4638      	mov	r0, r7
 8001018:	47c0      	blx	r8
 800101a:	3001      	adds	r0, #1
 800101c:	d0e6      	beq.n	8000fec <_printf_common+0xa4>
 800101e:	3601      	adds	r6, #1
 8001020:	e7d9      	b.n	8000fd6 <_printf_common+0x8e>
	...

08001024 <_printf_i>:
 8001024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001028:	7e0f      	ldrb	r7, [r1, #24]
 800102a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800102c:	2f78      	cmp	r7, #120	; 0x78
 800102e:	4691      	mov	r9, r2
 8001030:	4680      	mov	r8, r0
 8001032:	460c      	mov	r4, r1
 8001034:	469a      	mov	sl, r3
 8001036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800103a:	d807      	bhi.n	800104c <_printf_i+0x28>
 800103c:	2f62      	cmp	r7, #98	; 0x62
 800103e:	d80a      	bhi.n	8001056 <_printf_i+0x32>
 8001040:	2f00      	cmp	r7, #0
 8001042:	f000 80d4 	beq.w	80011ee <_printf_i+0x1ca>
 8001046:	2f58      	cmp	r7, #88	; 0x58
 8001048:	f000 80c0 	beq.w	80011cc <_printf_i+0x1a8>
 800104c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001054:	e03a      	b.n	80010cc <_printf_i+0xa8>
 8001056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800105a:	2b15      	cmp	r3, #21
 800105c:	d8f6      	bhi.n	800104c <_printf_i+0x28>
 800105e:	a101      	add	r1, pc, #4	; (adr r1, 8001064 <_printf_i+0x40>)
 8001060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001064:	080010bd 	.word	0x080010bd
 8001068:	080010d1 	.word	0x080010d1
 800106c:	0800104d 	.word	0x0800104d
 8001070:	0800104d 	.word	0x0800104d
 8001074:	0800104d 	.word	0x0800104d
 8001078:	0800104d 	.word	0x0800104d
 800107c:	080010d1 	.word	0x080010d1
 8001080:	0800104d 	.word	0x0800104d
 8001084:	0800104d 	.word	0x0800104d
 8001088:	0800104d 	.word	0x0800104d
 800108c:	0800104d 	.word	0x0800104d
 8001090:	080011d5 	.word	0x080011d5
 8001094:	080010fd 	.word	0x080010fd
 8001098:	0800118f 	.word	0x0800118f
 800109c:	0800104d 	.word	0x0800104d
 80010a0:	0800104d 	.word	0x0800104d
 80010a4:	080011f7 	.word	0x080011f7
 80010a8:	0800104d 	.word	0x0800104d
 80010ac:	080010fd 	.word	0x080010fd
 80010b0:	0800104d 	.word	0x0800104d
 80010b4:	0800104d 	.word	0x0800104d
 80010b8:	08001197 	.word	0x08001197
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	1d1a      	adds	r2, r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	602a      	str	r2, [r5, #0]
 80010c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010cc:	2301      	movs	r3, #1
 80010ce:	e09f      	b.n	8001210 <_printf_i+0x1ec>
 80010d0:	6820      	ldr	r0, [r4, #0]
 80010d2:	682b      	ldr	r3, [r5, #0]
 80010d4:	0607      	lsls	r7, r0, #24
 80010d6:	f103 0104 	add.w	r1, r3, #4
 80010da:	6029      	str	r1, [r5, #0]
 80010dc:	d501      	bpl.n	80010e2 <_printf_i+0xbe>
 80010de:	681e      	ldr	r6, [r3, #0]
 80010e0:	e003      	b.n	80010ea <_printf_i+0xc6>
 80010e2:	0646      	lsls	r6, r0, #25
 80010e4:	d5fb      	bpl.n	80010de <_printf_i+0xba>
 80010e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010ea:	2e00      	cmp	r6, #0
 80010ec:	da03      	bge.n	80010f6 <_printf_i+0xd2>
 80010ee:	232d      	movs	r3, #45	; 0x2d
 80010f0:	4276      	negs	r6, r6
 80010f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010f6:	485a      	ldr	r0, [pc, #360]	; (8001260 <_printf_i+0x23c>)
 80010f8:	230a      	movs	r3, #10
 80010fa:	e012      	b.n	8001122 <_printf_i+0xfe>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	6820      	ldr	r0, [r4, #0]
 8001100:	1d19      	adds	r1, r3, #4
 8001102:	6029      	str	r1, [r5, #0]
 8001104:	0605      	lsls	r5, r0, #24
 8001106:	d501      	bpl.n	800110c <_printf_i+0xe8>
 8001108:	681e      	ldr	r6, [r3, #0]
 800110a:	e002      	b.n	8001112 <_printf_i+0xee>
 800110c:	0641      	lsls	r1, r0, #25
 800110e:	d5fb      	bpl.n	8001108 <_printf_i+0xe4>
 8001110:	881e      	ldrh	r6, [r3, #0]
 8001112:	4853      	ldr	r0, [pc, #332]	; (8001260 <_printf_i+0x23c>)
 8001114:	2f6f      	cmp	r7, #111	; 0x6f
 8001116:	bf0c      	ite	eq
 8001118:	2308      	moveq	r3, #8
 800111a:	230a      	movne	r3, #10
 800111c:	2100      	movs	r1, #0
 800111e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001122:	6865      	ldr	r5, [r4, #4]
 8001124:	60a5      	str	r5, [r4, #8]
 8001126:	2d00      	cmp	r5, #0
 8001128:	bfa2      	ittt	ge
 800112a:	6821      	ldrge	r1, [r4, #0]
 800112c:	f021 0104 	bicge.w	r1, r1, #4
 8001130:	6021      	strge	r1, [r4, #0]
 8001132:	b90e      	cbnz	r6, 8001138 <_printf_i+0x114>
 8001134:	2d00      	cmp	r5, #0
 8001136:	d04b      	beq.n	80011d0 <_printf_i+0x1ac>
 8001138:	4615      	mov	r5, r2
 800113a:	fbb6 f1f3 	udiv	r1, r6, r3
 800113e:	fb03 6711 	mls	r7, r3, r1, r6
 8001142:	5dc7      	ldrb	r7, [r0, r7]
 8001144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001148:	4637      	mov	r7, r6
 800114a:	42bb      	cmp	r3, r7
 800114c:	460e      	mov	r6, r1
 800114e:	d9f4      	bls.n	800113a <_printf_i+0x116>
 8001150:	2b08      	cmp	r3, #8
 8001152:	d10b      	bne.n	800116c <_printf_i+0x148>
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	07de      	lsls	r6, r3, #31
 8001158:	d508      	bpl.n	800116c <_printf_i+0x148>
 800115a:	6923      	ldr	r3, [r4, #16]
 800115c:	6861      	ldr	r1, [r4, #4]
 800115e:	4299      	cmp	r1, r3
 8001160:	bfde      	ittt	le
 8001162:	2330      	movle	r3, #48	; 0x30
 8001164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800116c:	1b52      	subs	r2, r2, r5
 800116e:	6122      	str	r2, [r4, #16]
 8001170:	f8cd a000 	str.w	sl, [sp]
 8001174:	464b      	mov	r3, r9
 8001176:	aa03      	add	r2, sp, #12
 8001178:	4621      	mov	r1, r4
 800117a:	4640      	mov	r0, r8
 800117c:	f7ff fee4 	bl	8000f48 <_printf_common>
 8001180:	3001      	adds	r0, #1
 8001182:	d14a      	bne.n	800121a <_printf_i+0x1f6>
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	b004      	add	sp, #16
 800118a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	f043 0320 	orr.w	r3, r3, #32
 8001194:	6023      	str	r3, [r4, #0]
 8001196:	4833      	ldr	r0, [pc, #204]	; (8001264 <_printf_i+0x240>)
 8001198:	2778      	movs	r7, #120	; 0x78
 800119a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	6829      	ldr	r1, [r5, #0]
 80011a2:	061f      	lsls	r7, r3, #24
 80011a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80011a8:	d402      	bmi.n	80011b0 <_printf_i+0x18c>
 80011aa:	065f      	lsls	r7, r3, #25
 80011ac:	bf48      	it	mi
 80011ae:	b2b6      	uxthmi	r6, r6
 80011b0:	07df      	lsls	r7, r3, #31
 80011b2:	bf48      	it	mi
 80011b4:	f043 0320 	orrmi.w	r3, r3, #32
 80011b8:	6029      	str	r1, [r5, #0]
 80011ba:	bf48      	it	mi
 80011bc:	6023      	strmi	r3, [r4, #0]
 80011be:	b91e      	cbnz	r6, 80011c8 <_printf_i+0x1a4>
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	f023 0320 	bic.w	r3, r3, #32
 80011c6:	6023      	str	r3, [r4, #0]
 80011c8:	2310      	movs	r3, #16
 80011ca:	e7a7      	b.n	800111c <_printf_i+0xf8>
 80011cc:	4824      	ldr	r0, [pc, #144]	; (8001260 <_printf_i+0x23c>)
 80011ce:	e7e4      	b.n	800119a <_printf_i+0x176>
 80011d0:	4615      	mov	r5, r2
 80011d2:	e7bd      	b.n	8001150 <_printf_i+0x12c>
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	6826      	ldr	r6, [r4, #0]
 80011d8:	6961      	ldr	r1, [r4, #20]
 80011da:	1d18      	adds	r0, r3, #4
 80011dc:	6028      	str	r0, [r5, #0]
 80011de:	0635      	lsls	r5, r6, #24
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	d501      	bpl.n	80011e8 <_printf_i+0x1c4>
 80011e4:	6019      	str	r1, [r3, #0]
 80011e6:	e002      	b.n	80011ee <_printf_i+0x1ca>
 80011e8:	0670      	lsls	r0, r6, #25
 80011ea:	d5fb      	bpl.n	80011e4 <_printf_i+0x1c0>
 80011ec:	8019      	strh	r1, [r3, #0]
 80011ee:	2300      	movs	r3, #0
 80011f0:	6123      	str	r3, [r4, #16]
 80011f2:	4615      	mov	r5, r2
 80011f4:	e7bc      	b.n	8001170 <_printf_i+0x14c>
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	1d1a      	adds	r2, r3, #4
 80011fa:	602a      	str	r2, [r5, #0]
 80011fc:	681d      	ldr	r5, [r3, #0]
 80011fe:	6862      	ldr	r2, [r4, #4]
 8001200:	2100      	movs	r1, #0
 8001202:	4628      	mov	r0, r5
 8001204:	f7fe ffec 	bl	80001e0 <memchr>
 8001208:	b108      	cbz	r0, 800120e <_printf_i+0x1ea>
 800120a:	1b40      	subs	r0, r0, r5
 800120c:	6060      	str	r0, [r4, #4]
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	6123      	str	r3, [r4, #16]
 8001212:	2300      	movs	r3, #0
 8001214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001218:	e7aa      	b.n	8001170 <_printf_i+0x14c>
 800121a:	6923      	ldr	r3, [r4, #16]
 800121c:	462a      	mov	r2, r5
 800121e:	4649      	mov	r1, r9
 8001220:	4640      	mov	r0, r8
 8001222:	47d0      	blx	sl
 8001224:	3001      	adds	r0, #1
 8001226:	d0ad      	beq.n	8001184 <_printf_i+0x160>
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	079b      	lsls	r3, r3, #30
 800122c:	d413      	bmi.n	8001256 <_printf_i+0x232>
 800122e:	68e0      	ldr	r0, [r4, #12]
 8001230:	9b03      	ldr	r3, [sp, #12]
 8001232:	4298      	cmp	r0, r3
 8001234:	bfb8      	it	lt
 8001236:	4618      	movlt	r0, r3
 8001238:	e7a6      	b.n	8001188 <_printf_i+0x164>
 800123a:	2301      	movs	r3, #1
 800123c:	4632      	mov	r2, r6
 800123e:	4649      	mov	r1, r9
 8001240:	4640      	mov	r0, r8
 8001242:	47d0      	blx	sl
 8001244:	3001      	adds	r0, #1
 8001246:	d09d      	beq.n	8001184 <_printf_i+0x160>
 8001248:	3501      	adds	r5, #1
 800124a:	68e3      	ldr	r3, [r4, #12]
 800124c:	9903      	ldr	r1, [sp, #12]
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	42ab      	cmp	r3, r5
 8001252:	dcf2      	bgt.n	800123a <_printf_i+0x216>
 8001254:	e7eb      	b.n	800122e <_printf_i+0x20a>
 8001256:	2500      	movs	r5, #0
 8001258:	f104 0619 	add.w	r6, r4, #25
 800125c:	e7f5      	b.n	800124a <_printf_i+0x226>
 800125e:	bf00      	nop
 8001260:	080017f9 	.word	0x080017f9
 8001264:	0800180a 	.word	0x0800180a

08001268 <__sflush_r>:
 8001268:	898a      	ldrh	r2, [r1, #12]
 800126a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126e:	4605      	mov	r5, r0
 8001270:	0710      	lsls	r0, r2, #28
 8001272:	460c      	mov	r4, r1
 8001274:	d458      	bmi.n	8001328 <__sflush_r+0xc0>
 8001276:	684b      	ldr	r3, [r1, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dc05      	bgt.n	8001288 <__sflush_r+0x20>
 800127c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	dc02      	bgt.n	8001288 <__sflush_r+0x20>
 8001282:	2000      	movs	r0, #0
 8001284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0f9      	beq.n	8001282 <__sflush_r+0x1a>
 800128e:	2300      	movs	r3, #0
 8001290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001294:	682f      	ldr	r7, [r5, #0]
 8001296:	6a21      	ldr	r1, [r4, #32]
 8001298:	602b      	str	r3, [r5, #0]
 800129a:	d032      	beq.n	8001302 <__sflush_r+0x9a>
 800129c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	075a      	lsls	r2, r3, #29
 80012a2:	d505      	bpl.n	80012b0 <__sflush_r+0x48>
 80012a4:	6863      	ldr	r3, [r4, #4]
 80012a6:	1ac0      	subs	r0, r0, r3
 80012a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012aa:	b10b      	cbz	r3, 80012b0 <__sflush_r+0x48>
 80012ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ae:	1ac0      	subs	r0, r0, r3
 80012b0:	2300      	movs	r3, #0
 80012b2:	4602      	mov	r2, r0
 80012b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012b6:	6a21      	ldr	r1, [r4, #32]
 80012b8:	4628      	mov	r0, r5
 80012ba:	47b0      	blx	r6
 80012bc:	1c43      	adds	r3, r0, #1
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	d106      	bne.n	80012d0 <__sflush_r+0x68>
 80012c2:	6829      	ldr	r1, [r5, #0]
 80012c4:	291d      	cmp	r1, #29
 80012c6:	d82b      	bhi.n	8001320 <__sflush_r+0xb8>
 80012c8:	4a29      	ldr	r2, [pc, #164]	; (8001370 <__sflush_r+0x108>)
 80012ca:	410a      	asrs	r2, r1
 80012cc:	07d6      	lsls	r6, r2, #31
 80012ce:	d427      	bmi.n	8001320 <__sflush_r+0xb8>
 80012d0:	2200      	movs	r2, #0
 80012d2:	6062      	str	r2, [r4, #4]
 80012d4:	04d9      	lsls	r1, r3, #19
 80012d6:	6922      	ldr	r2, [r4, #16]
 80012d8:	6022      	str	r2, [r4, #0]
 80012da:	d504      	bpl.n	80012e6 <__sflush_r+0x7e>
 80012dc:	1c42      	adds	r2, r0, #1
 80012de:	d101      	bne.n	80012e4 <__sflush_r+0x7c>
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	b903      	cbnz	r3, 80012e6 <__sflush_r+0x7e>
 80012e4:	6560      	str	r0, [r4, #84]	; 0x54
 80012e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012e8:	602f      	str	r7, [r5, #0]
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d0c9      	beq.n	8001282 <__sflush_r+0x1a>
 80012ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012f2:	4299      	cmp	r1, r3
 80012f4:	d002      	beq.n	80012fc <__sflush_r+0x94>
 80012f6:	4628      	mov	r0, r5
 80012f8:	f7ff fbea 	bl	8000ad0 <_free_r>
 80012fc:	2000      	movs	r0, #0
 80012fe:	6360      	str	r0, [r4, #52]	; 0x34
 8001300:	e7c0      	b.n	8001284 <__sflush_r+0x1c>
 8001302:	2301      	movs	r3, #1
 8001304:	4628      	mov	r0, r5
 8001306:	47b0      	blx	r6
 8001308:	1c41      	adds	r1, r0, #1
 800130a:	d1c8      	bne.n	800129e <__sflush_r+0x36>
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0c5      	beq.n	800129e <__sflush_r+0x36>
 8001312:	2b1d      	cmp	r3, #29
 8001314:	d001      	beq.n	800131a <__sflush_r+0xb2>
 8001316:	2b16      	cmp	r3, #22
 8001318:	d101      	bne.n	800131e <__sflush_r+0xb6>
 800131a:	602f      	str	r7, [r5, #0]
 800131c:	e7b1      	b.n	8001282 <__sflush_r+0x1a>
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	e7ad      	b.n	8001284 <__sflush_r+0x1c>
 8001328:	690f      	ldr	r7, [r1, #16]
 800132a:	2f00      	cmp	r7, #0
 800132c:	d0a9      	beq.n	8001282 <__sflush_r+0x1a>
 800132e:	0793      	lsls	r3, r2, #30
 8001330:	680e      	ldr	r6, [r1, #0]
 8001332:	bf08      	it	eq
 8001334:	694b      	ldreq	r3, [r1, #20]
 8001336:	600f      	str	r7, [r1, #0]
 8001338:	bf18      	it	ne
 800133a:	2300      	movne	r3, #0
 800133c:	eba6 0807 	sub.w	r8, r6, r7
 8001340:	608b      	str	r3, [r1, #8]
 8001342:	f1b8 0f00 	cmp.w	r8, #0
 8001346:	dd9c      	ble.n	8001282 <__sflush_r+0x1a>
 8001348:	6a21      	ldr	r1, [r4, #32]
 800134a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800134c:	4643      	mov	r3, r8
 800134e:	463a      	mov	r2, r7
 8001350:	4628      	mov	r0, r5
 8001352:	47b0      	blx	r6
 8001354:	2800      	cmp	r0, #0
 8001356:	dc06      	bgt.n	8001366 <__sflush_r+0xfe>
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135e:	81a3      	strh	r3, [r4, #12]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	e78e      	b.n	8001284 <__sflush_r+0x1c>
 8001366:	4407      	add	r7, r0
 8001368:	eba8 0800 	sub.w	r8, r8, r0
 800136c:	e7e9      	b.n	8001342 <__sflush_r+0xda>
 800136e:	bf00      	nop
 8001370:	dfbffffe 	.word	0xdfbffffe

08001374 <_fflush_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	690b      	ldr	r3, [r1, #16]
 8001378:	4605      	mov	r5, r0
 800137a:	460c      	mov	r4, r1
 800137c:	b913      	cbnz	r3, 8001384 <_fflush_r+0x10>
 800137e:	2500      	movs	r5, #0
 8001380:	4628      	mov	r0, r5
 8001382:	bd38      	pop	{r3, r4, r5, pc}
 8001384:	b118      	cbz	r0, 800138e <_fflush_r+0x1a>
 8001386:	6a03      	ldr	r3, [r0, #32]
 8001388:	b90b      	cbnz	r3, 800138e <_fflush_r+0x1a>
 800138a:	f7ff fa91 	bl	80008b0 <__sinit>
 800138e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f3      	beq.n	800137e <_fflush_r+0xa>
 8001396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001398:	07d0      	lsls	r0, r2, #31
 800139a:	d404      	bmi.n	80013a6 <_fflush_r+0x32>
 800139c:	0599      	lsls	r1, r3, #22
 800139e:	d402      	bmi.n	80013a6 <_fflush_r+0x32>
 80013a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013a2:	f7ff fb92 	bl	8000aca <__retarget_lock_acquire_recursive>
 80013a6:	4628      	mov	r0, r5
 80013a8:	4621      	mov	r1, r4
 80013aa:	f7ff ff5d 	bl	8001268 <__sflush_r>
 80013ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013b0:	07da      	lsls	r2, r3, #31
 80013b2:	4605      	mov	r5, r0
 80013b4:	d4e4      	bmi.n	8001380 <_fflush_r+0xc>
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	059b      	lsls	r3, r3, #22
 80013ba:	d4e1      	bmi.n	8001380 <_fflush_r+0xc>
 80013bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013be:	f7ff fb85 	bl	8000acc <__retarget_lock_release_recursive>
 80013c2:	e7dd      	b.n	8001380 <_fflush_r+0xc>

080013c4 <_getc_r>:
 80013c4:	b538      	push	{r3, r4, r5, lr}
 80013c6:	460c      	mov	r4, r1
 80013c8:	4605      	mov	r5, r0
 80013ca:	b118      	cbz	r0, 80013d4 <_getc_r+0x10>
 80013cc:	6a03      	ldr	r3, [r0, #32]
 80013ce:	b90b      	cbnz	r3, 80013d4 <_getc_r+0x10>
 80013d0:	f7ff fa6e 	bl	80008b0 <__sinit>
 80013d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013d6:	07d8      	lsls	r0, r3, #31
 80013d8:	d405      	bmi.n	80013e6 <_getc_r+0x22>
 80013da:	89a3      	ldrh	r3, [r4, #12]
 80013dc:	0599      	lsls	r1, r3, #22
 80013de:	d402      	bmi.n	80013e6 <_getc_r+0x22>
 80013e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013e2:	f7ff fb72 	bl	8000aca <__retarget_lock_acquire_recursive>
 80013e6:	6863      	ldr	r3, [r4, #4]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	6063      	str	r3, [r4, #4]
 80013ee:	da0f      	bge.n	8001410 <_getc_r+0x4c>
 80013f0:	4628      	mov	r0, r5
 80013f2:	4621      	mov	r1, r4
 80013f4:	f000 f873 	bl	80014de <__srget_r>
 80013f8:	4605      	mov	r5, r0
 80013fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013fc:	07da      	lsls	r2, r3, #31
 80013fe:	d405      	bmi.n	800140c <_getc_r+0x48>
 8001400:	89a3      	ldrh	r3, [r4, #12]
 8001402:	059b      	lsls	r3, r3, #22
 8001404:	d402      	bmi.n	800140c <_getc_r+0x48>
 8001406:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001408:	f7ff fb60 	bl	8000acc <__retarget_lock_release_recursive>
 800140c:	4628      	mov	r0, r5
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	6022      	str	r2, [r4, #0]
 8001416:	781d      	ldrb	r5, [r3, #0]
 8001418:	e7ef      	b.n	80013fa <_getc_r+0x36>

0800141a <__swhatbuf_r>:
 800141a:	b570      	push	{r4, r5, r6, lr}
 800141c:	460c      	mov	r4, r1
 800141e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001422:	2900      	cmp	r1, #0
 8001424:	b096      	sub	sp, #88	; 0x58
 8001426:	4615      	mov	r5, r2
 8001428:	461e      	mov	r6, r3
 800142a:	da0d      	bge.n	8001448 <__swhatbuf_r+0x2e>
 800142c:	89a3      	ldrh	r3, [r4, #12]
 800142e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001432:	f04f 0100 	mov.w	r1, #0
 8001436:	bf0c      	ite	eq
 8001438:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800143c:	2340      	movne	r3, #64	; 0x40
 800143e:	2000      	movs	r0, #0
 8001440:	6031      	str	r1, [r6, #0]
 8001442:	602b      	str	r3, [r5, #0]
 8001444:	b016      	add	sp, #88	; 0x58
 8001446:	bd70      	pop	{r4, r5, r6, pc}
 8001448:	466a      	mov	r2, sp
 800144a:	f000 f8f5 	bl	8001638 <_fstat_r>
 800144e:	2800      	cmp	r0, #0
 8001450:	dbec      	blt.n	800142c <__swhatbuf_r+0x12>
 8001452:	9901      	ldr	r1, [sp, #4]
 8001454:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001458:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800145c:	4259      	negs	r1, r3
 800145e:	4159      	adcs	r1, r3
 8001460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001464:	e7eb      	b.n	800143e <__swhatbuf_r+0x24>

08001466 <__smakebuf_r>:
 8001466:	898b      	ldrh	r3, [r1, #12]
 8001468:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800146a:	079d      	lsls	r5, r3, #30
 800146c:	4606      	mov	r6, r0
 800146e:	460c      	mov	r4, r1
 8001470:	d507      	bpl.n	8001482 <__smakebuf_r+0x1c>
 8001472:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001476:	6023      	str	r3, [r4, #0]
 8001478:	6123      	str	r3, [r4, #16]
 800147a:	2301      	movs	r3, #1
 800147c:	6163      	str	r3, [r4, #20]
 800147e:	b002      	add	sp, #8
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	ab01      	add	r3, sp, #4
 8001484:	466a      	mov	r2, sp
 8001486:	f7ff ffc8 	bl	800141a <__swhatbuf_r>
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4605      	mov	r5, r0
 800148e:	4630      	mov	r0, r6
 8001490:	f7ff fb8a 	bl	8000ba8 <_malloc_r>
 8001494:	b948      	cbnz	r0, 80014aa <__smakebuf_r+0x44>
 8001496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800149a:	059a      	lsls	r2, r3, #22
 800149c:	d4ef      	bmi.n	800147e <__smakebuf_r+0x18>
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	81a3      	strh	r3, [r4, #12]
 80014a8:	e7e3      	b.n	8001472 <__smakebuf_r+0xc>
 80014aa:	89a3      	ldrh	r3, [r4, #12]
 80014ac:	6020      	str	r0, [r4, #0]
 80014ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b2:	81a3      	strh	r3, [r4, #12]
 80014b4:	9b00      	ldr	r3, [sp, #0]
 80014b6:	6163      	str	r3, [r4, #20]
 80014b8:	9b01      	ldr	r3, [sp, #4]
 80014ba:	6120      	str	r0, [r4, #16]
 80014bc:	b15b      	cbz	r3, 80014d6 <__smakebuf_r+0x70>
 80014be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014c2:	4630      	mov	r0, r6
 80014c4:	f000 f8ca 	bl	800165c <_isatty_r>
 80014c8:	b128      	cbz	r0, 80014d6 <__smakebuf_r+0x70>
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	f023 0303 	bic.w	r3, r3, #3
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	81a3      	strh	r3, [r4, #12]
 80014d6:	89a3      	ldrh	r3, [r4, #12]
 80014d8:	431d      	orrs	r5, r3
 80014da:	81a5      	strh	r5, [r4, #12]
 80014dc:	e7cf      	b.n	800147e <__smakebuf_r+0x18>

080014de <__srget_r>:
 80014de:	b538      	push	{r3, r4, r5, lr}
 80014e0:	460c      	mov	r4, r1
 80014e2:	4605      	mov	r5, r0
 80014e4:	b118      	cbz	r0, 80014ee <__srget_r+0x10>
 80014e6:	6a03      	ldr	r3, [r0, #32]
 80014e8:	b90b      	cbnz	r3, 80014ee <__srget_r+0x10>
 80014ea:	f7ff f9e1 	bl	80008b0 <__sinit>
 80014ee:	4621      	mov	r1, r4
 80014f0:	4628      	mov	r0, r5
 80014f2:	f000 f8e1 	bl	80016b8 <__srefill_r>
 80014f6:	b938      	cbnz	r0, 8001508 <__srget_r+0x2a>
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6063      	str	r3, [r4, #4]
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	6022      	str	r2, [r4, #0]
 8001504:	7818      	ldrb	r0, [r3, #0]
 8001506:	bd38      	pop	{r3, r4, r5, pc}
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	e7fb      	b.n	8001506 <__srget_r+0x28>

0800150e <__swbuf_r>:
 800150e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001510:	460e      	mov	r6, r1
 8001512:	4614      	mov	r4, r2
 8001514:	4605      	mov	r5, r0
 8001516:	b118      	cbz	r0, 8001520 <__swbuf_r+0x12>
 8001518:	6a03      	ldr	r3, [r0, #32]
 800151a:	b90b      	cbnz	r3, 8001520 <__swbuf_r+0x12>
 800151c:	f7ff f9c8 	bl	80008b0 <__sinit>
 8001520:	69a3      	ldr	r3, [r4, #24]
 8001522:	60a3      	str	r3, [r4, #8]
 8001524:	89a3      	ldrh	r3, [r4, #12]
 8001526:	071a      	lsls	r2, r3, #28
 8001528:	d525      	bpl.n	8001576 <__swbuf_r+0x68>
 800152a:	6923      	ldr	r3, [r4, #16]
 800152c:	b31b      	cbz	r3, 8001576 <__swbuf_r+0x68>
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	6922      	ldr	r2, [r4, #16]
 8001532:	1a98      	subs	r0, r3, r2
 8001534:	6963      	ldr	r3, [r4, #20]
 8001536:	b2f6      	uxtb	r6, r6
 8001538:	4283      	cmp	r3, r0
 800153a:	4637      	mov	r7, r6
 800153c:	dc04      	bgt.n	8001548 <__swbuf_r+0x3a>
 800153e:	4621      	mov	r1, r4
 8001540:	4628      	mov	r0, r5
 8001542:	f7ff ff17 	bl	8001374 <_fflush_r>
 8001546:	b9e0      	cbnz	r0, 8001582 <__swbuf_r+0x74>
 8001548:	68a3      	ldr	r3, [r4, #8]
 800154a:	3b01      	subs	r3, #1
 800154c:	60a3      	str	r3, [r4, #8]
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	6022      	str	r2, [r4, #0]
 8001554:	701e      	strb	r6, [r3, #0]
 8001556:	6962      	ldr	r2, [r4, #20]
 8001558:	1c43      	adds	r3, r0, #1
 800155a:	429a      	cmp	r2, r3
 800155c:	d004      	beq.n	8001568 <__swbuf_r+0x5a>
 800155e:	89a3      	ldrh	r3, [r4, #12]
 8001560:	07db      	lsls	r3, r3, #31
 8001562:	d506      	bpl.n	8001572 <__swbuf_r+0x64>
 8001564:	2e0a      	cmp	r6, #10
 8001566:	d104      	bne.n	8001572 <__swbuf_r+0x64>
 8001568:	4621      	mov	r1, r4
 800156a:	4628      	mov	r0, r5
 800156c:	f7ff ff02 	bl	8001374 <_fflush_r>
 8001570:	b938      	cbnz	r0, 8001582 <__swbuf_r+0x74>
 8001572:	4638      	mov	r0, r7
 8001574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001576:	4621      	mov	r1, r4
 8001578:	4628      	mov	r0, r5
 800157a:	f000 f805 	bl	8001588 <__swsetup_r>
 800157e:	2800      	cmp	r0, #0
 8001580:	d0d5      	beq.n	800152e <__swbuf_r+0x20>
 8001582:	f04f 37ff 	mov.w	r7, #4294967295
 8001586:	e7f4      	b.n	8001572 <__swbuf_r+0x64>

08001588 <__swsetup_r>:
 8001588:	b538      	push	{r3, r4, r5, lr}
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <__swsetup_r+0xac>)
 800158c:	4605      	mov	r5, r0
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	460c      	mov	r4, r1
 8001592:	b118      	cbz	r0, 800159c <__swsetup_r+0x14>
 8001594:	6a03      	ldr	r3, [r0, #32]
 8001596:	b90b      	cbnz	r3, 800159c <__swsetup_r+0x14>
 8001598:	f7ff f98a 	bl	80008b0 <__sinit>
 800159c:	89a3      	ldrh	r3, [r4, #12]
 800159e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015a2:	0718      	lsls	r0, r3, #28
 80015a4:	d422      	bmi.n	80015ec <__swsetup_r+0x64>
 80015a6:	06d9      	lsls	r1, r3, #27
 80015a8:	d407      	bmi.n	80015ba <__swsetup_r+0x32>
 80015aa:	2309      	movs	r3, #9
 80015ac:	602b      	str	r3, [r5, #0]
 80015ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80015b2:	81a3      	strh	r3, [r4, #12]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	e034      	b.n	8001624 <__swsetup_r+0x9c>
 80015ba:	0758      	lsls	r0, r3, #29
 80015bc:	d512      	bpl.n	80015e4 <__swsetup_r+0x5c>
 80015be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015c0:	b141      	cbz	r1, 80015d4 <__swsetup_r+0x4c>
 80015c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015c6:	4299      	cmp	r1, r3
 80015c8:	d002      	beq.n	80015d0 <__swsetup_r+0x48>
 80015ca:	4628      	mov	r0, r5
 80015cc:	f7ff fa80 	bl	8000ad0 <_free_r>
 80015d0:	2300      	movs	r3, #0
 80015d2:	6363      	str	r3, [r4, #52]	; 0x34
 80015d4:	89a3      	ldrh	r3, [r4, #12]
 80015d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80015da:	81a3      	strh	r3, [r4, #12]
 80015dc:	2300      	movs	r3, #0
 80015de:	6063      	str	r3, [r4, #4]
 80015e0:	6923      	ldr	r3, [r4, #16]
 80015e2:	6023      	str	r3, [r4, #0]
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	81a3      	strh	r3, [r4, #12]
 80015ec:	6923      	ldr	r3, [r4, #16]
 80015ee:	b94b      	cbnz	r3, 8001604 <__swsetup_r+0x7c>
 80015f0:	89a3      	ldrh	r3, [r4, #12]
 80015f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015fa:	d003      	beq.n	8001604 <__swsetup_r+0x7c>
 80015fc:	4621      	mov	r1, r4
 80015fe:	4628      	mov	r0, r5
 8001600:	f7ff ff31 	bl	8001466 <__smakebuf_r>
 8001604:	89a0      	ldrh	r0, [r4, #12]
 8001606:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800160a:	f010 0301 	ands.w	r3, r0, #1
 800160e:	d00a      	beq.n	8001626 <__swsetup_r+0x9e>
 8001610:	2300      	movs	r3, #0
 8001612:	60a3      	str	r3, [r4, #8]
 8001614:	6963      	ldr	r3, [r4, #20]
 8001616:	425b      	negs	r3, r3
 8001618:	61a3      	str	r3, [r4, #24]
 800161a:	6923      	ldr	r3, [r4, #16]
 800161c:	b943      	cbnz	r3, 8001630 <__swsetup_r+0xa8>
 800161e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001622:	d1c4      	bne.n	80015ae <__swsetup_r+0x26>
 8001624:	bd38      	pop	{r3, r4, r5, pc}
 8001626:	0781      	lsls	r1, r0, #30
 8001628:	bf58      	it	pl
 800162a:	6963      	ldrpl	r3, [r4, #20]
 800162c:	60a3      	str	r3, [r4, #8]
 800162e:	e7f4      	b.n	800161a <__swsetup_r+0x92>
 8001630:	2000      	movs	r0, #0
 8001632:	e7f7      	b.n	8001624 <__swsetup_r+0x9c>
 8001634:	2000005c 	.word	0x2000005c

08001638 <_fstat_r>:
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	4d07      	ldr	r5, [pc, #28]	; (8001658 <_fstat_r+0x20>)
 800163c:	2300      	movs	r3, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	4611      	mov	r1, r2
 8001644:	602b      	str	r3, [r5, #0]
 8001646:	f7ff f849 	bl	80006dc <_fstat>
 800164a:	1c43      	adds	r3, r0, #1
 800164c:	d102      	bne.n	8001654 <_fstat_r+0x1c>
 800164e:	682b      	ldr	r3, [r5, #0]
 8001650:	b103      	cbz	r3, 8001654 <_fstat_r+0x1c>
 8001652:	6023      	str	r3, [r4, #0]
 8001654:	bd38      	pop	{r3, r4, r5, pc}
 8001656:	bf00      	nop
 8001658:	200001c0 	.word	0x200001c0

0800165c <_isatty_r>:
 800165c:	b538      	push	{r3, r4, r5, lr}
 800165e:	4d06      	ldr	r5, [pc, #24]	; (8001678 <_isatty_r+0x1c>)
 8001660:	2300      	movs	r3, #0
 8001662:	4604      	mov	r4, r0
 8001664:	4608      	mov	r0, r1
 8001666:	602b      	str	r3, [r5, #0]
 8001668:	f7ff f848 	bl	80006fc <_isatty>
 800166c:	1c43      	adds	r3, r0, #1
 800166e:	d102      	bne.n	8001676 <_isatty_r+0x1a>
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	b103      	cbz	r3, 8001676 <_isatty_r+0x1a>
 8001674:	6023      	str	r3, [r4, #0]
 8001676:	bd38      	pop	{r3, r4, r5, pc}
 8001678:	200001c0 	.word	0x200001c0

0800167c <_sbrk_r>:
 800167c:	b538      	push	{r3, r4, r5, lr}
 800167e:	4d06      	ldr	r5, [pc, #24]	; (8001698 <_sbrk_r+0x1c>)
 8001680:	2300      	movs	r3, #0
 8001682:	4604      	mov	r4, r0
 8001684:	4608      	mov	r0, r1
 8001686:	602b      	str	r3, [r5, #0]
 8001688:	f7ff f850 	bl	800072c <_sbrk>
 800168c:	1c43      	adds	r3, r0, #1
 800168e:	d102      	bne.n	8001696 <_sbrk_r+0x1a>
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	b103      	cbz	r3, 8001696 <_sbrk_r+0x1a>
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	bd38      	pop	{r3, r4, r5, pc}
 8001698:	200001c0 	.word	0x200001c0

0800169c <lflush>:
 800169c:	898b      	ldrh	r3, [r1, #12]
 800169e:	f003 0309 	and.w	r3, r3, #9
 80016a2:	2b09      	cmp	r3, #9
 80016a4:	d103      	bne.n	80016ae <lflush+0x12>
 80016a6:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <lflush+0x18>)
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	f7ff be63 	b.w	8001374 <_fflush_r>
 80016ae:	2000      	movs	r0, #0
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000005c 	.word	0x2000005c

080016b8 <__srefill_r>:
 80016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ba:	460c      	mov	r4, r1
 80016bc:	4605      	mov	r5, r0
 80016be:	b118      	cbz	r0, 80016c8 <__srefill_r+0x10>
 80016c0:	6a03      	ldr	r3, [r0, #32]
 80016c2:	b90b      	cbnz	r3, 80016c8 <__srefill_r+0x10>
 80016c4:	f7ff f8f4 	bl	80008b0 <__sinit>
 80016c8:	2300      	movs	r3, #0
 80016ca:	6063      	str	r3, [r4, #4]
 80016cc:	89a3      	ldrh	r3, [r4, #12]
 80016ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016d2:	069e      	lsls	r6, r3, #26
 80016d4:	d502      	bpl.n	80016dc <__srefill_r+0x24>
 80016d6:	f04f 30ff 	mov.w	r0, #4294967295
 80016da:	e05c      	b.n	8001796 <__srefill_r+0xde>
 80016dc:	0758      	lsls	r0, r3, #29
 80016de:	d448      	bmi.n	8001772 <__srefill_r+0xba>
 80016e0:	06d9      	lsls	r1, r3, #27
 80016e2:	d405      	bmi.n	80016f0 <__srefill_r+0x38>
 80016e4:	2309      	movs	r3, #9
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80016ec:	81a3      	strh	r3, [r4, #12]
 80016ee:	e7f2      	b.n	80016d6 <__srefill_r+0x1e>
 80016f0:	071a      	lsls	r2, r3, #28
 80016f2:	d50b      	bpl.n	800170c <__srefill_r+0x54>
 80016f4:	4621      	mov	r1, r4
 80016f6:	4628      	mov	r0, r5
 80016f8:	f7ff fe3c 	bl	8001374 <_fflush_r>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d1ea      	bne.n	80016d6 <__srefill_r+0x1e>
 8001700:	89a3      	ldrh	r3, [r4, #12]
 8001702:	60a0      	str	r0, [r4, #8]
 8001704:	f023 0308 	bic.w	r3, r3, #8
 8001708:	81a3      	strh	r3, [r4, #12]
 800170a:	61a0      	str	r0, [r4, #24]
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	81a3      	strh	r3, [r4, #12]
 8001714:	6923      	ldr	r3, [r4, #16]
 8001716:	b91b      	cbnz	r3, 8001720 <__srefill_r+0x68>
 8001718:	4621      	mov	r1, r4
 800171a:	4628      	mov	r0, r5
 800171c:	f7ff fea3 	bl	8001466 <__smakebuf_r>
 8001720:	89a6      	ldrh	r6, [r4, #12]
 8001722:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8001726:	07b3      	lsls	r3, r6, #30
 8001728:	d00f      	beq.n	800174a <__srefill_r+0x92>
 800172a:	2301      	movs	r3, #1
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <__srefill_r+0xe4>)
 800172e:	491c      	ldr	r1, [pc, #112]	; (80017a0 <__srefill_r+0xe8>)
 8001730:	481c      	ldr	r0, [pc, #112]	; (80017a4 <__srefill_r+0xec>)
 8001732:	81a3      	strh	r3, [r4, #12]
 8001734:	f006 0609 	and.w	r6, r6, #9
 8001738:	f7ff f8d2 	bl	80008e0 <_fwalk_sglue>
 800173c:	2e09      	cmp	r6, #9
 800173e:	81a7      	strh	r7, [r4, #12]
 8001740:	d103      	bne.n	800174a <__srefill_r+0x92>
 8001742:	4621      	mov	r1, r4
 8001744:	4628      	mov	r0, r5
 8001746:	f7ff fd8f 	bl	8001268 <__sflush_r>
 800174a:	6922      	ldr	r2, [r4, #16]
 800174c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800174e:	6963      	ldr	r3, [r4, #20]
 8001750:	6a21      	ldr	r1, [r4, #32]
 8001752:	6022      	str	r2, [r4, #0]
 8001754:	4628      	mov	r0, r5
 8001756:	47b0      	blx	r6
 8001758:	2800      	cmp	r0, #0
 800175a:	6060      	str	r0, [r4, #4]
 800175c:	dc1c      	bgt.n	8001798 <__srefill_r+0xe0>
 800175e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001762:	bf17      	itett	ne
 8001764:	2200      	movne	r2, #0
 8001766:	f043 0320 	orreq.w	r3, r3, #32
 800176a:	6062      	strne	r2, [r4, #4]
 800176c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8001770:	e7bc      	b.n	80016ec <__srefill_r+0x34>
 8001772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001774:	2900      	cmp	r1, #0
 8001776:	d0cd      	beq.n	8001714 <__srefill_r+0x5c>
 8001778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800177c:	4299      	cmp	r1, r3
 800177e:	d002      	beq.n	8001786 <__srefill_r+0xce>
 8001780:	4628      	mov	r0, r5
 8001782:	f7ff f9a5 	bl	8000ad0 <_free_r>
 8001786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001788:	6063      	str	r3, [r4, #4]
 800178a:	2000      	movs	r0, #0
 800178c:	6360      	str	r0, [r4, #52]	; 0x34
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0c0      	beq.n	8001714 <__srefill_r+0x5c>
 8001792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001794:	6023      	str	r3, [r4, #0]
 8001796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001798:	2000      	movs	r0, #0
 800179a:	e7fc      	b.n	8001796 <__srefill_r+0xde>
 800179c:	20000004 	.word	0x20000004
 80017a0:	0800169d 	.word	0x0800169d
 80017a4:	20000010 	.word	0x20000010

080017a8 <_init>:
 80017a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017aa:	bf00      	nop
 80017ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ae:	bc08      	pop	{r3}
 80017b0:	469e      	mov	lr, r3
 80017b2:	4770      	bx	lr

080017b4 <_fini>:
 80017b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b6:	bf00      	nop
 80017b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ba:	bc08      	pop	{r3}
 80017bc:	469e      	mov	lr, r3
 80017be:	4770      	bx	lr
