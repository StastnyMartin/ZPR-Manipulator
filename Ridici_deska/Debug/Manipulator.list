
Manipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004584  08004584  00005584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045bc  080045bc  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080045bc  080045bc  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045bc  080045bc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045bc  080045bc  000055bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045c0  080045c0  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000010  080045d4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080045d4  0000619c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4bc  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d85  00000000  00000000  000134f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00015280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000991  00000000  00000000  00015e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181f1  00000000  00000000  00016829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea68  00000000  00000000  0002ea1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd01  00000000  00000000  0003d482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba4  00000000  00000000  000cb1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cdd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800456c 	.word	0x0800456c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800456c 	.word	0x0800456c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
uint8_t RX_data[3];				// buffer for uart data
uint8_t data_pos = 0;			// buffer data offset
uint8_t receive_complete = 0;	// global flag

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	data_pos++;
 8000228:	4b14      	ldr	r3, [pc, #80]	@ (800027c <HAL_UART_RxCpltCallback+0x5c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <HAL_UART_RxCpltCallback+0x5c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (data_pos > 2)	// already get 3 bytes
 8000234:	4b11      	ldr	r3, [pc, #68]	@ (800027c <HAL_UART_RxCpltCallback+0x5c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b02      	cmp	r3, #2
 800023a:	d910      	bls.n	800025e <HAL_UART_RxCpltCallback+0x3e>
	{
		data_pos = 0;
 800023c:	4b0f      	ldr	r3, [pc, #60]	@ (800027c <HAL_UART_RxCpltCallback+0x5c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, RX_data + data_pos, 1);
 8000242:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <HAL_UART_RxCpltCallback+0x5c>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	001a      	movs	r2, r3
 8000248:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <HAL_UART_RxCpltCallback+0x60>)
 800024a:	18d1      	adds	r1, r2, r3
 800024c:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <HAL_UART_RxCpltCallback+0x64>)
 800024e:	2201      	movs	r2, #1
 8000250:	0018      	movs	r0, r3
 8000252:	f002 ffd5 	bl	8003200 <HAL_UART_Receive_IT>
		receive_complete = 1;	// set global flag to set servos position
 8000256:	4b0c      	ldr	r3, [pc, #48]	@ (8000288 <HAL_UART_RxCpltCallback+0x68>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		HAL_UART_Receive_IT(&huart2, RX_data + data_pos, 1);
	}
}
 800025c:	e009      	b.n	8000272 <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Receive_IT(&huart2, RX_data + data_pos, 1);
 800025e:	4b07      	ldr	r3, [pc, #28]	@ (800027c <HAL_UART_RxCpltCallback+0x5c>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	001a      	movs	r2, r3
 8000264:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <HAL_UART_RxCpltCallback+0x60>)
 8000266:	18d1      	adds	r1, r2, r3
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <HAL_UART_RxCpltCallback+0x64>)
 800026a:	2201      	movs	r2, #1
 800026c:	0018      	movs	r0, r3
 800026e:	f002 ffc7 	bl	8003200 <HAL_UART_Receive_IT>
}
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	b002      	add	sp, #8
 8000278:	bd80      	pop	{r7, pc}
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	20000193 	.word	0x20000193
 8000280:	20000190 	.word	0x20000190
 8000284:	20000104 	.word	0x20000104
 8000288:	20000194 	.word	0x20000194

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000290:	f000 fec4 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000294:	f000 f9fe 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000298:	f000 fc26 	bl	8000ae8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800029c:	f000 fa36 	bl	800070c <MX_TIM1_Init>
  MX_TIM2_Init();
 80002a0:	f000 fb0a 	bl	80008b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002a4:	f000 fb5c 	bl	8000960 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80002a8:	f000 fbee 	bl	8000a88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(PCON_GPIO_Port, PCON_Pin, GPIO_PIN_SET);	// LED signals MCU is ON
 80002ac:	2390      	movs	r3, #144	@ 0x90
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	2201      	movs	r2, #1
 80002b2:	2102      	movs	r1, #2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 f9f6 	bl	80016a6 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart2, RX_data, 1);					// START receiving UART data
 80002ba:	49ac      	ldr	r1, [pc, #688]	@ (800056c <main+0x2e0>)
 80002bc:	4bac      	ldr	r3, [pc, #688]	@ (8000570 <main+0x2e4>)
 80002be:	2201      	movs	r2, #1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f002 ff9d 	bl	8003200 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// START ALL PWM channel + set default servos position
	TIM1->CCR1 = servoMiddle;
 80002c6:	4bab      	ldr	r3, [pc, #684]	@ (8000574 <main+0x2e8>)
 80002c8:	4aab      	ldr	r2, [pc, #684]	@ (8000578 <main+0x2ec>)
 80002ca:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = servoMiddle;
 80002cc:	4ba9      	ldr	r3, [pc, #676]	@ (8000574 <main+0x2e8>)
 80002ce:	4aaa      	ldr	r2, [pc, #680]	@ (8000578 <main+0x2ec>)
 80002d0:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = servoMiddle;
 80002d2:	4ba8      	ldr	r3, [pc, #672]	@ (8000574 <main+0x2e8>)
 80002d4:	4aa8      	ldr	r2, [pc, #672]	@ (8000578 <main+0x2ec>)
 80002d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->CCR4 = servoMiddle;
 80002d8:	4ba6      	ldr	r3, [pc, #664]	@ (8000574 <main+0x2e8>)
 80002da:	4aa7      	ldr	r2, [pc, #668]	@ (8000578 <main+0x2ec>)
 80002dc:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR1 = servoMiddle;
 80002de:	4ba7      	ldr	r3, [pc, #668]	@ (800057c <main+0x2f0>)
 80002e0:	4aa5      	ldr	r2, [pc, #660]	@ (8000578 <main+0x2ec>)
 80002e2:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = servoMiddle;
 80002e4:	4ba5      	ldr	r3, [pc, #660]	@ (800057c <main+0x2f0>)
 80002e6:	4aa4      	ldr	r2, [pc, #656]	@ (8000578 <main+0x2ec>)
 80002e8:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = servoMiddle;
 80002ea:	4ba4      	ldr	r3, [pc, #656]	@ (800057c <main+0x2f0>)
 80002ec:	4aa2      	ldr	r2, [pc, #648]	@ (8000578 <main+0x2ec>)
 80002ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002f0:	4ba3      	ldr	r3, [pc, #652]	@ (8000580 <main+0x2f4>)
 80002f2:	2100      	movs	r1, #0
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 ffd9 	bl	80022ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002fa:	4ba1      	ldr	r3, [pc, #644]	@ (8000580 <main+0x2f4>)
 80002fc:	2104      	movs	r1, #4
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 ffd4 	bl	80022ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000304:	4b9e      	ldr	r3, [pc, #632]	@ (8000580 <main+0x2f4>)
 8000306:	2108      	movs	r1, #8
 8000308:	0018      	movs	r0, r3
 800030a:	f001 ffcf 	bl	80022ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800030e:	4b9c      	ldr	r3, [pc, #624]	@ (8000580 <main+0x2f4>)
 8000310:	210c      	movs	r1, #12
 8000312:	0018      	movs	r0, r3
 8000314:	f001 ffca 	bl	80022ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000318:	4b9a      	ldr	r3, [pc, #616]	@ (8000584 <main+0x2f8>)
 800031a:	2100      	movs	r1, #0
 800031c:	0018      	movs	r0, r3
 800031e:	f001 ffc5 	bl	80022ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000322:	4b98      	ldr	r3, [pc, #608]	@ (8000584 <main+0x2f8>)
 8000324:	2104      	movs	r1, #4
 8000326:	0018      	movs	r0, r3
 8000328:	f001 ffc0 	bl	80022ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800032c:	4b95      	ldr	r3, [pc, #596]	@ (8000584 <main+0x2f8>)
 800032e:	2108      	movs	r1, #8
 8000330:	0018      	movs	r0, r3
 8000332:	f001 ffbb 	bl	80022ac <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);				// START TIM2 for USER_BTN sampling
 8000336:	4b94      	ldr	r3, [pc, #592]	@ (8000588 <main+0x2fc>)
 8000338:	0018      	movs	r0, r3
 800033a:	f001 ff13 	bl	8002164 <HAL_TIM_Base_Start_IT>

	while (1)
	{
		if (receive_complete)
 800033e:	4b93      	ldr	r3, [pc, #588]	@ (800058c <main+0x300>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0fb      	beq.n	800033e <main+0xb2>
		{
			receive_complete = 0;	// RESET global flag
 8000346:	4b91      	ldr	r3, [pc, #580]	@ (800058c <main+0x300>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
			// K button - servo7 - forks clamp
			// E and F buttons at same time - servo7 - forks open


			// Main Arm - servo1/2
			if (RX_data[2] & (1))
 800034c:	4b87      	ldr	r3, [pc, #540]	@ (800056c <main+0x2e0>)
 800034e:	789b      	ldrb	r3, [r3, #2]
 8000350:	001a      	movs	r2, r3
 8000352:	2301      	movs	r3, #1
 8000354:	4013      	ands	r3, r2
 8000356:	d012      	beq.n	800037e <main+0xf2>
			{
				setServo(servo1, TIM1->CCR1 + rough_change);
 8000358:	4b86      	ldr	r3, [pc, #536]	@ (8000574 <main+0x2e8>)
 800035a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800035c:	3304      	adds	r3, #4
 800035e:	001a      	movs	r2, r3
 8000360:	4b84      	ldr	r3, [pc, #528]	@ (8000574 <main+0x2e8>)
 8000362:	2101      	movs	r1, #1
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fc47 	bl	8000bf8 <setServo>
				setServo(servo2, TIM1->CCR2 + rough_change);
 800036a:	4b82      	ldr	r3, [pc, #520]	@ (8000574 <main+0x2e8>)
 800036c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800036e:	3304      	adds	r3, #4
 8000370:	001a      	movs	r2, r3
 8000372:	4b80      	ldr	r3, [pc, #512]	@ (8000574 <main+0x2e8>)
 8000374:	2102      	movs	r1, #2
 8000376:	0018      	movs	r0, r3
 8000378:	f000 fc3e 	bl	8000bf8 <setServo>
 800037c:	e017      	b.n	80003ae <main+0x122>
			}
			else if (RX_data[2] & (1 << 2))
 800037e:	4b7b      	ldr	r3, [pc, #492]	@ (800056c <main+0x2e0>)
 8000380:	789b      	ldrb	r3, [r3, #2]
 8000382:	001a      	movs	r2, r3
 8000384:	2304      	movs	r3, #4
 8000386:	4013      	ands	r3, r2
 8000388:	d011      	beq.n	80003ae <main+0x122>
			{
				setServo(servo1, TIM1->CCR1 - rough_change);
 800038a:	4b7a      	ldr	r3, [pc, #488]	@ (8000574 <main+0x2e8>)
 800038c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800038e:	3b04      	subs	r3, #4
 8000390:	001a      	movs	r2, r3
 8000392:	4b78      	ldr	r3, [pc, #480]	@ (8000574 <main+0x2e8>)
 8000394:	2101      	movs	r1, #1
 8000396:	0018      	movs	r0, r3
 8000398:	f000 fc2e 	bl	8000bf8 <setServo>
				setServo(servo2, TIM1->CCR2 - rough_change);
 800039c:	4b75      	ldr	r3, [pc, #468]	@ (8000574 <main+0x2e8>)
 800039e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003a0:	3b04      	subs	r3, #4
 80003a2:	001a      	movs	r2, r3
 80003a4:	4b73      	ldr	r3, [pc, #460]	@ (8000574 <main+0x2e8>)
 80003a6:	2102      	movs	r1, #2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fc25 	bl	8000bf8 <setServo>
			}

			// Arm rotation - servo3
			if (RX_data[2] & (1 << 1))
 80003ae:	4b6f      	ldr	r3, [pc, #444]	@ (800056c <main+0x2e0>)
 80003b0:	789b      	ldrb	r3, [r3, #2]
 80003b2:	001a      	movs	r2, r3
 80003b4:	2302      	movs	r3, #2
 80003b6:	4013      	ands	r3, r2
 80003b8:	d009      	beq.n	80003ce <main+0x142>
				setServo(servo3, TIM1->CCR3 + rough_change);
 80003ba:	4b6e      	ldr	r3, [pc, #440]	@ (8000574 <main+0x2e8>)
 80003bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003be:	3304      	adds	r3, #4
 80003c0:	001a      	movs	r2, r3
 80003c2:	4b6c      	ldr	r3, [pc, #432]	@ (8000574 <main+0x2e8>)
 80003c4:	2103      	movs	r1, #3
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fc16 	bl	8000bf8 <setServo>
 80003cc:	e00e      	b.n	80003ec <main+0x160>
			else if (RX_data[2] & (1 << 3))
 80003ce:	4b67      	ldr	r3, [pc, #412]	@ (800056c <main+0x2e0>)
 80003d0:	789b      	ldrb	r3, [r3, #2]
 80003d2:	001a      	movs	r2, r3
 80003d4:	2308      	movs	r3, #8
 80003d6:	4013      	ands	r3, r2
 80003d8:	d008      	beq.n	80003ec <main+0x160>
				setServo(servo3, TIM1->CCR3 - rough_change);
 80003da:	4b66      	ldr	r3, [pc, #408]	@ (8000574 <main+0x2e8>)
 80003dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003de:	3b04      	subs	r3, #4
 80003e0:	001a      	movs	r2, r3
 80003e2:	4b64      	ldr	r3, [pc, #400]	@ (8000574 <main+0x2e8>)
 80003e4:	2103      	movs	r1, #3
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 fc06 	bl	8000bf8 <setServo>

			// Forks - servo7
			if (RX_data[2] & (1 << 6))
 80003ec:	4b5f      	ldr	r3, [pc, #380]	@ (800056c <main+0x2e0>)
 80003ee:	789b      	ldrb	r3, [r3, #2]
 80003f0:	001a      	movs	r2, r3
 80003f2:	2340      	movs	r3, #64	@ 0x40
 80003f4:	4013      	ands	r3, r2
 80003f6:	d00f      	beq.n	8000418 <main+0x18c>
			{
				if ((TIM3->CCR3 - rough_change) > servo7_max)	// Forks servo has different movement range
 80003f8:	4b60      	ldr	r3, [pc, #384]	@ (800057c <main+0x2f0>)
 80003fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003fc:	3b04      	subs	r3, #4
 80003fe:	4a64      	ldr	r2, [pc, #400]	@ (8000590 <main+0x304>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d925      	bls.n	8000450 <main+0x1c4>
					setServo(servo7, TIM3->CCR3 - rough_change);
 8000404:	4b5d      	ldr	r3, [pc, #372]	@ (800057c <main+0x2f0>)
 8000406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000408:	3b04      	subs	r3, #4
 800040a:	001a      	movs	r2, r3
 800040c:	4b5b      	ldr	r3, [pc, #364]	@ (800057c <main+0x2f0>)
 800040e:	2103      	movs	r1, #3
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fbf1 	bl	8000bf8 <setServo>
 8000416:	e01b      	b.n	8000450 <main+0x1c4>
			}
			else if ((RX_data[2] & (1 << 4)) && (RX_data[2] & (1 << 5)))
 8000418:	4b54      	ldr	r3, [pc, #336]	@ (800056c <main+0x2e0>)
 800041a:	789b      	ldrb	r3, [r3, #2]
 800041c:	001a      	movs	r2, r3
 800041e:	2310      	movs	r3, #16
 8000420:	4013      	ands	r3, r2
 8000422:	d015      	beq.n	8000450 <main+0x1c4>
 8000424:	4b51      	ldr	r3, [pc, #324]	@ (800056c <main+0x2e0>)
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	001a      	movs	r2, r3
 800042a:	2320      	movs	r3, #32
 800042c:	4013      	ands	r3, r2
 800042e:	d00f      	beq.n	8000450 <main+0x1c4>
			{
				if ((TIM3->CCR3 + rough_change) < servo7_min)
 8000430:	4b52      	ldr	r3, [pc, #328]	@ (800057c <main+0x2f0>)
 8000432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000434:	1d1a      	adds	r2, r3, #4
 8000436:	23d2      	movs	r3, #210	@ 0xd2
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	429a      	cmp	r2, r3
 800043c:	d208      	bcs.n	8000450 <main+0x1c4>
					setServo(servo7, TIM3->CCR3 + rough_change);
 800043e:	4b4f      	ldr	r3, [pc, #316]	@ (800057c <main+0x2f0>)
 8000440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000442:	3304      	adds	r3, #4
 8000444:	001a      	movs	r2, r3
 8000446:	4b4d      	ldr	r3, [pc, #308]	@ (800057c <main+0x2f0>)
 8000448:	2103      	movs	r1, #3
 800044a:	0018      	movs	r0, r3
 800044c:	f000 fbd4 	bl	8000bf8 <setServo>
			}

			// Elbow - servo4
			if ((RX_data[2] & (1 << 4)) && !(RX_data[2] & (1 << 5)))
 8000450:	4b46      	ldr	r3, [pc, #280]	@ (800056c <main+0x2e0>)
 8000452:	789b      	ldrb	r3, [r3, #2]
 8000454:	001a      	movs	r2, r3
 8000456:	2310      	movs	r3, #16
 8000458:	4013      	ands	r3, r2
 800045a:	d00f      	beq.n	800047c <main+0x1f0>
 800045c:	4b43      	ldr	r3, [pc, #268]	@ (800056c <main+0x2e0>)
 800045e:	789b      	ldrb	r3, [r3, #2]
 8000460:	001a      	movs	r2, r3
 8000462:	2320      	movs	r3, #32
 8000464:	4013      	ands	r3, r2
 8000466:	d109      	bne.n	800047c <main+0x1f0>
				setServo(servo4, TIM1->CCR4 + rough_change);
 8000468:	4b42      	ldr	r3, [pc, #264]	@ (8000574 <main+0x2e8>)
 800046a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800046c:	3304      	adds	r3, #4
 800046e:	001a      	movs	r2, r3
 8000470:	4b40      	ldr	r3, [pc, #256]	@ (8000574 <main+0x2e8>)
 8000472:	2104      	movs	r1, #4
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fbbf 	bl	8000bf8 <setServo>
 800047a:	e014      	b.n	80004a6 <main+0x21a>
			else if ((RX_data[2] & (1 << 5)) && !(RX_data[2] & (1 << 4)))
 800047c:	4b3b      	ldr	r3, [pc, #236]	@ (800056c <main+0x2e0>)
 800047e:	789b      	ldrb	r3, [r3, #2]
 8000480:	001a      	movs	r2, r3
 8000482:	2320      	movs	r3, #32
 8000484:	4013      	ands	r3, r2
 8000486:	d00e      	beq.n	80004a6 <main+0x21a>
 8000488:	4b38      	ldr	r3, [pc, #224]	@ (800056c <main+0x2e0>)
 800048a:	789b      	ldrb	r3, [r3, #2]
 800048c:	001a      	movs	r2, r3
 800048e:	2310      	movs	r3, #16
 8000490:	4013      	ands	r3, r2
 8000492:	d108      	bne.n	80004a6 <main+0x21a>
				setServo(servo4, TIM1->CCR4 - rough_change);
 8000494:	4b37      	ldr	r3, [pc, #220]	@ (8000574 <main+0x2e8>)
 8000496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000498:	3b04      	subs	r3, #4
 800049a:	001a      	movs	r2, r3
 800049c:	4b35      	ldr	r3, [pc, #212]	@ (8000574 <main+0x2e8>)
 800049e:	2104      	movs	r1, #4
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 fba9 	bl	8000bf8 <setServo>

			// X-axis - servo6
			if (!((*RX_data > 0x78) && (*RX_data < 0x87)))// Joystick between 120 to 135 (8 bit) --> don't change servo position
 80004a6:	4b31      	ldr	r3, [pc, #196]	@ (800056c <main+0x2e0>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b78      	cmp	r3, #120	@ 0x78
 80004ac:	d904      	bls.n	80004b8 <main+0x22c>
 80004ae:	4b2f      	ldr	r3, [pc, #188]	@ (800056c <main+0x2e0>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b86      	cmp	r3, #134	@ 0x86
 80004b4:	d800      	bhi.n	80004b8 <main+0x22c>
 80004b6:	e07a      	b.n	80005ae <main+0x322>
			{
				if (*RX_data > 135)
 80004b8:	4b2c      	ldr	r3, [pc, #176]	@ (800056c <main+0x2e0>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b87      	cmp	r3, #135	@ 0x87
 80004be:	d931      	bls.n	8000524 <main+0x298>
				{
					if ((*RX_data > 135) && (*RX_data < 180))
 80004c0:	4b2a      	ldr	r3, [pc, #168]	@ (800056c <main+0x2e0>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b87      	cmp	r3, #135	@ 0x87
 80004c6:	d90d      	bls.n	80004e4 <main+0x258>
 80004c8:	4b28      	ldr	r3, [pc, #160]	@ (800056c <main+0x2e0>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2bb3      	cmp	r3, #179	@ 0xb3
 80004ce:	d809      	bhi.n	80004e4 <main+0x258>
						setServo(servo5, TIM3->CCR1 - fine_change / 2);
 80004d0:	4b2a      	ldr	r3, [pc, #168]	@ (800057c <main+0x2f0>)
 80004d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004d4:	3b01      	subs	r3, #1
 80004d6:	001a      	movs	r2, r3
 80004d8:	4b28      	ldr	r3, [pc, #160]	@ (800057c <main+0x2f0>)
 80004da:	2101      	movs	r1, #1
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fb8b 	bl	8000bf8 <setServo>
 80004e2:	e064      	b.n	80005ae <main+0x322>
					else if ((*RX_data > 180) && (*RX_data < 210))
 80004e4:	4b21      	ldr	r3, [pc, #132]	@ (800056c <main+0x2e0>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2bb4      	cmp	r3, #180	@ 0xb4
 80004ea:	d90d      	bls.n	8000508 <main+0x27c>
 80004ec:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <main+0x2e0>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2bd1      	cmp	r3, #209	@ 0xd1
 80004f2:	d809      	bhi.n	8000508 <main+0x27c>
						setServo(servo5, TIM3->CCR1 - fine_change);
 80004f4:	4b21      	ldr	r3, [pc, #132]	@ (800057c <main+0x2f0>)
 80004f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004f8:	3b02      	subs	r3, #2
 80004fa:	001a      	movs	r2, r3
 80004fc:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <main+0x2f0>)
 80004fe:	2101      	movs	r1, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fb79 	bl	8000bf8 <setServo>
 8000506:	e052      	b.n	80005ae <main+0x322>
					else if (*RX_data > 210)
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <main+0x2e0>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2bd2      	cmp	r3, #210	@ 0xd2
 800050e:	d94e      	bls.n	80005ae <main+0x322>
						setServo(servo5, TIM3->CCR1 - rough_change);
 8000510:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <main+0x2f0>)
 8000512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000514:	3b04      	subs	r3, #4
 8000516:	001a      	movs	r2, r3
 8000518:	4b18      	ldr	r3, [pc, #96]	@ (800057c <main+0x2f0>)
 800051a:	2101      	movs	r1, #1
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fb6b 	bl	8000bf8 <setServo>
 8000522:	e044      	b.n	80005ae <main+0x322>
				}
				else
				{
					if ((*RX_data > 85) && (*RX_data < 120))
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <main+0x2e0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b55      	cmp	r3, #85	@ 0x55
 800052a:	d90d      	bls.n	8000548 <main+0x2bc>
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <main+0x2e0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b77      	cmp	r3, #119	@ 0x77
 8000532:	d809      	bhi.n	8000548 <main+0x2bc>
						setServo(servo5, TIM3->CCR1 + fine_change / 2);
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <main+0x2f0>)
 8000536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000538:	3301      	adds	r3, #1
 800053a:	001a      	movs	r2, r3
 800053c:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <main+0x2f0>)
 800053e:	2101      	movs	r1, #1
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fb59 	bl	8000bf8 <setServo>
 8000546:	e032      	b.n	80005ae <main+0x322>
					else if ((*RX_data > 55) && (*RX_data < 85))
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <main+0x2e0>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b37      	cmp	r3, #55	@ 0x37
 800054e:	d921      	bls.n	8000594 <main+0x308>
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <main+0x2e0>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b54      	cmp	r3, #84	@ 0x54
 8000556:	d81d      	bhi.n	8000594 <main+0x308>
						setServo(servo5, TIM3->CCR1 + fine_change);
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <main+0x2f0>)
 800055a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800055c:	3302      	adds	r3, #2
 800055e:	001a      	movs	r2, r3
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <main+0x2f0>)
 8000562:	2101      	movs	r1, #1
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fb47 	bl	8000bf8 <setServo>
 800056a:	e020      	b.n	80005ae <main+0x322>
 800056c:	20000190 	.word	0x20000190
 8000570:	20000104 	.word	0x20000104
 8000574:	40012c00 	.word	0x40012c00
 8000578:	000005dc 	.word	0x000005dc
 800057c:	40000400 	.word	0x40000400
 8000580:	2000002c 	.word	0x2000002c
 8000584:	200000bc 	.word	0x200000bc
 8000588:	20000074 	.word	0x20000074
 800058c:	20000194 	.word	0x20000194
 8000590:	000003a6 	.word	0x000003a6
					else if (*RX_data < 55)
 8000594:	4b3d      	ldr	r3, [pc, #244]	@ (800068c <main+0x400>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b36      	cmp	r3, #54	@ 0x36
 800059a:	d808      	bhi.n	80005ae <main+0x322>
						setServo(servo5, TIM3->CCR1 + rough_change);
 800059c:	4b3c      	ldr	r3, [pc, #240]	@ (8000690 <main+0x404>)
 800059e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a0:	3304      	adds	r3, #4
 80005a2:	001a      	movs	r2, r3
 80005a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000690 <main+0x404>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fb25 	bl	8000bf8 <setServo>
				}
			}

			// Y-axis - servo5
			if (!((RX_data[1] > 0x78) && (RX_data[1] < 0x87)))// Joystick between 120 to 135 (8 bit) --> don't change servo position
 80005ae:	4b37      	ldr	r3, [pc, #220]	@ (800068c <main+0x400>)
 80005b0:	785b      	ldrb	r3, [r3, #1]
 80005b2:	2b78      	cmp	r3, #120	@ 0x78
 80005b4:	d904      	bls.n	80005c0 <main+0x334>
 80005b6:	4b35      	ldr	r3, [pc, #212]	@ (800068c <main+0x400>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	2b86      	cmp	r3, #134	@ 0x86
 80005bc:	d800      	bhi.n	80005c0 <main+0x334>
 80005be:	e6be      	b.n	800033e <main+0xb2>
			{

				if (RX_data[1] > 140)
 80005c0:	4b32      	ldr	r3, [pc, #200]	@ (800068c <main+0x400>)
 80005c2:	785b      	ldrb	r3, [r3, #1]
 80005c4:	2b8c      	cmp	r3, #140	@ 0x8c
 80005c6:	d930      	bls.n	800062a <main+0x39e>
				{
					if ((RX_data[1] > 140) && (RX_data[1] < 180))
 80005c8:	4b30      	ldr	r3, [pc, #192]	@ (800068c <main+0x400>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	2b8c      	cmp	r3, #140	@ 0x8c
 80005ce:	d90c      	bls.n	80005ea <main+0x35e>
 80005d0:	4b2e      	ldr	r3, [pc, #184]	@ (800068c <main+0x400>)
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	2bb3      	cmp	r3, #179	@ 0xb3
 80005d6:	d808      	bhi.n	80005ea <main+0x35e>
						setServo(servo6, TIM3->CCR2 - fine_change / 2);
 80005d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <main+0x404>)
 80005da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005dc:	3b01      	subs	r3, #1
 80005de:	001a      	movs	r2, r3
 80005e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <main+0x404>)
 80005e2:	2102      	movs	r1, #2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 fb07 	bl	8000bf8 <setServo>
					if ((RX_data[1] > 180) && (RX_data[1] < 210))
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <main+0x400>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	2bb4      	cmp	r3, #180	@ 0xb4
 80005f0:	d90c      	bls.n	800060c <main+0x380>
 80005f2:	4b26      	ldr	r3, [pc, #152]	@ (800068c <main+0x400>)
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	2bd1      	cmp	r3, #209	@ 0xd1
 80005f8:	d808      	bhi.n	800060c <main+0x380>
						setServo(servo6, TIM3->CCR2 - fine_change);
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <main+0x404>)
 80005fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005fe:	3b02      	subs	r3, #2
 8000600:	001a      	movs	r2, r3
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <main+0x404>)
 8000604:	2102      	movs	r1, #2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 faf6 	bl	8000bf8 <setServo>
					if (RX_data[1] > 210)
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <main+0x400>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	2bd2      	cmp	r3, #210	@ 0xd2
 8000612:	d800      	bhi.n	8000616 <main+0x38a>
 8000614:	e693      	b.n	800033e <main+0xb2>
						setServo(servo6, TIM3->CCR2 - rough_change);
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <main+0x404>)
 8000618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800061a:	3b04      	subs	r3, #4
 800061c:	001a      	movs	r2, r3
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <main+0x404>)
 8000620:	2102      	movs	r1, #2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fae8 	bl	8000bf8 <setServo>
 8000628:	e689      	b.n	800033e <main+0xb2>
				}
				else
				{
					if ((RX_data[1] > 85) && (RX_data[1] < 115))
 800062a:	4b18      	ldr	r3, [pc, #96]	@ (800068c <main+0x400>)
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	2b55      	cmp	r3, #85	@ 0x55
 8000630:	d90c      	bls.n	800064c <main+0x3c0>
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <main+0x400>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	2b72      	cmp	r3, #114	@ 0x72
 8000638:	d808      	bhi.n	800064c <main+0x3c0>
						setServo(servo6, TIM3->CCR2 + fine_change / 2);
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <main+0x404>)
 800063c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800063e:	3301      	adds	r3, #1
 8000640:	001a      	movs	r2, r3
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <main+0x404>)
 8000644:	2102      	movs	r1, #2
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fad6 	bl	8000bf8 <setServo>
					if ((RX_data[1] > 55) && (RX_data[1] < 85))
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <main+0x400>)
 800064e:	785b      	ldrb	r3, [r3, #1]
 8000650:	2b37      	cmp	r3, #55	@ 0x37
 8000652:	d90c      	bls.n	800066e <main+0x3e2>
 8000654:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <main+0x400>)
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	2b54      	cmp	r3, #84	@ 0x54
 800065a:	d808      	bhi.n	800066e <main+0x3e2>
						setServo(servo6, TIM3->CCR2 + fine_change);
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <main+0x404>)
 800065e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000660:	3302      	adds	r3, #2
 8000662:	001a      	movs	r2, r3
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <main+0x404>)
 8000666:	2102      	movs	r1, #2
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fac5 	bl	8000bf8 <setServo>
					if (RX_data[1] < 55)
 800066e:	4b07      	ldr	r3, [pc, #28]	@ (800068c <main+0x400>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b36      	cmp	r3, #54	@ 0x36
 8000674:	d900      	bls.n	8000678 <main+0x3ec>
 8000676:	e662      	b.n	800033e <main+0xb2>
						setServo(servo6, TIM3->CCR2 + rough_change);
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <main+0x404>)
 800067a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800067c:	3304      	adds	r3, #4
 800067e:	001a      	movs	r2, r3
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <main+0x404>)
 8000682:	2102      	movs	r1, #2
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fab7 	bl	8000bf8 <setServo>
		if (receive_complete)
 800068a:	e658      	b.n	800033e <main+0xb2>
 800068c:	20000190 	.word	0x20000190
 8000690:	40000400 	.word	0x40000400

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b093      	sub	sp, #76	@ 0x4c
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2414      	movs	r4, #20
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2334      	movs	r3, #52	@ 0x34
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 ff35 	bl	8004514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2310      	movs	r3, #16
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f003 ff2e 	bl	8004514 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2220      	movs	r2, #32
 80006bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2201      	movs	r2, #1
 80006c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f807 	bl	80016e0 <HAL_RCC_OscConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006d6:	f000 fac6 	bl	8000c66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2203      	movs	r2, #3
 80006e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2101      	movs	r1, #1
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fb78 	bl	8001dec <HAL_RCC_ClockConfig>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000700:	f000 fab1 	bl	8000c66 <Error_Handler>
  }
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b013      	add	sp, #76	@ 0x4c
 800070a:	bd90      	pop	{r4, r7, pc}

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	@ 0x58
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	2348      	movs	r3, #72	@ 0x48
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	0018      	movs	r0, r3
 8000718:	2310      	movs	r3, #16
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f003 fef9 	bl	8004514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	2340      	movs	r3, #64	@ 0x40
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	0018      	movs	r0, r3
 8000728:	2308      	movs	r3, #8
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f003 fef1 	bl	8004514 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000732:	2324      	movs	r3, #36	@ 0x24
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	0018      	movs	r0, r3
 8000738:	231c      	movs	r3, #28
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f003 fee9 	bl	8004514 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	0018      	movs	r0, r3
 8000746:	2320      	movs	r3, #32
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f003 fee2 	bl	8004514 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000750:	4b56      	ldr	r3, [pc, #344]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 8000752:	4a57      	ldr	r2, [pc, #348]	@ (80008b0 <MX_TIM1_Init+0x1a4>)
 8000754:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000756:	4b55      	ldr	r3, [pc, #340]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 8000758:	222f      	movs	r2, #47	@ 0x2f
 800075a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	4b53      	ldr	r3, [pc, #332]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000762:	4b52      	ldr	r3, [pc, #328]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 8000764:	4a53      	ldr	r2, [pc, #332]	@ (80008b4 <MX_TIM1_Init+0x1a8>)
 8000766:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b50      	ldr	r3, [pc, #320]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076e:	4b4f      	ldr	r3, [pc, #316]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000774:	4b4d      	ldr	r3, [pc, #308]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800077a:	4b4c      	ldr	r3, [pc, #304]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fca1 	bl	80020c4 <HAL_TIM_Base_Init>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000786:	f000 fa6e 	bl	8000c66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078a:	2148      	movs	r1, #72	@ 0x48
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2280      	movs	r2, #128	@ 0x80
 8000790:	0152      	lsls	r2, r2, #5
 8000792:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000794:	187a      	adds	r2, r7, r1
 8000796:	4b45      	ldr	r3, [pc, #276]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f002 f80e 	bl	80027bc <HAL_TIM_ConfigClockSource>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007a4:	f000 fa5f 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a8:	4b40      	ldr	r3, [pc, #256]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fd26 	bl	80021fc <HAL_TIM_PWM_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80007b4:	f000 fa57 	bl	8000c66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c6:	187a      	adds	r2, r7, r1
 80007c8:	4b38      	ldr	r3, [pc, #224]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f002 fbfd 	bl	8002fcc <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80007d6:	f000 fa46 	bl	8000c66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007da:	2124      	movs	r1, #36	@ 0x24
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2260      	movs	r2, #96	@ 0x60
 80007e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	1879      	adds	r1, r7, r1
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 800080a:	2200      	movs	r2, #0
 800080c:	0018      	movs	r0, r3
 800080e:	f001 ff0f 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000816:	f000 fa26 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081a:	2324      	movs	r3, #36	@ 0x24
 800081c:	18f9      	adds	r1, r7, r3
 800081e:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 8000820:	2204      	movs	r2, #4
 8000822:	0018      	movs	r0, r3
 8000824:	f001 ff04 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 800082c:	f000 fa1b 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000830:	2324      	movs	r3, #36	@ 0x24
 8000832:	18f9      	adds	r1, r7, r3
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 8000836:	2208      	movs	r2, #8
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fef9 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000842:	f000 fa10 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000846:	2324      	movs	r3, #36	@ 0x24
 8000848:	18f9      	adds	r1, r7, r3
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 800084c:	220c      	movs	r2, #12
 800084e:	0018      	movs	r0, r3
 8000850:	f001 feee 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000858:	f000 fa05 	bl	8000c66 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	0192      	lsls	r2, r2, #6
 8000880:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000888:	1d3a      	adds	r2, r7, #4
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f002 fbf4 	bl	800307c <HAL_TIMEx_ConfigBreakDeadTime>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000898:	f000 f9e5 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <MX_TIM1_Init+0x1a0>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fa5a 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b016      	add	sp, #88	@ 0x58
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	40012c00 	.word	0x40012c00
 80008b4:	00004e1f 	.word	0x00004e1f

080008b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	2308      	movs	r3, #8
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2310      	movs	r3, #16
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f003 fe23 	bl	8004514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	003b      	movs	r3, r7
 80008d0:	0018      	movs	r0, r3
 80008d2:	2308      	movs	r3, #8
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f003 fe1c 	bl	8004514 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_TIM2_Init+0xa0>)
 80008de:	2280      	movs	r2, #128	@ 0x80
 80008e0:	05d2      	lsls	r2, r2, #23
 80008e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_TIM2_Init+0xa0>)
 80008e6:	222f      	movs	r2, #47	@ 0x2f
 80008e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_TIM2_Init+0xa0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_TIM2_Init+0xa0>)
 80008f2:	4a1a      	ldr	r2, [pc, #104]	@ (800095c <MX_TIM2_Init+0xa4>)
 80008f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_TIM2_Init+0xa0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_TIM2_Init+0xa0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_TIM2_Init+0xa0>)
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fbdd 	bl	80020c4 <HAL_TIM_Base_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800090e:	f000 f9aa 	bl	8000c66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000912:	2108      	movs	r1, #8
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	0152      	lsls	r2, r2, #5
 800091a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091c:	187a      	adds	r2, r7, r1
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_TIM2_Init+0xa0>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f001 ff4a 	bl	80027bc <HAL_TIM_ConfigClockSource>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800092c:	f000 f99b 	bl	8000c66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	003b      	movs	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	003b      	movs	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093c:	003a      	movs	r2, r7
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_TIM2_Init+0xa0>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fb42 	bl	8002fcc <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800094c:	f000 f98b 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b006      	add	sp, #24
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000074 	.word	0x20000074
 800095c:	000f423f 	.word	0x000f423f

08000960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	@ 0x38
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	2328      	movs	r3, #40	@ 0x28
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0018      	movs	r0, r3
 800096c:	2310      	movs	r3, #16
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f003 fdcf 	bl	8004514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	2320      	movs	r3, #32
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	0018      	movs	r0, r3
 800097c:	2308      	movs	r3, #8
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f003 fdc7 	bl	8004514 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	0018      	movs	r0, r3
 800098a:	231c      	movs	r3, #28
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f003 fdc0 	bl	8004514 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000994:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 8000996:	4a3a      	ldr	r2, [pc, #232]	@ (8000a80 <MX_TIM3_Init+0x120>)
 8000998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 800099a:	4b38      	ldr	r3, [pc, #224]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 800099c:	222f      	movs	r2, #47	@ 0x2f
 800099e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80009a6:	4b35      	ldr	r3, [pc, #212]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 80009a8:	4a36      	ldr	r2, [pc, #216]	@ (8000a84 <MX_TIM3_Init+0x124>)
 80009aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b2:	4b32      	ldr	r3, [pc, #200]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b8:	4b30      	ldr	r3, [pc, #192]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fb82 	bl	80020c4 <HAL_TIM_Base_Init>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009c4:	f000 f94f 	bl	8000c66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	2128      	movs	r1, #40	@ 0x28
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	0152      	lsls	r2, r2, #5
 80009d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 feef 	bl	80027bc <HAL_TIM_ConfigClockSource>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80009e2:	f000 f940 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009e6:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fc07 	bl	80021fc <HAL_TIM_PWM_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80009f2:	f000 f938 	bl	8000c66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2120      	movs	r1, #32
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a04:	187a      	adds	r2, r7, r1
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f002 fade 	bl	8002fcc <HAL_TIMEx_MasterConfigSynchronization>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000a14:	f000 f927 	bl	8000c66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2260      	movs	r2, #96	@ 0x60
 8000a1c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	1d39      	adds	r1, r7, #4
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fdfa 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000a40:	f000 f911 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a44:	1d39      	adds	r1, r7, #4
 8000a46:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fdf0 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000a54:	f000 f907 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a58:	1d39      	adds	r1, r7, #4
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 fde6 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8000a68:	f000 f8fd 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <MX_TIM3_Init+0x11c>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 f972 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00e      	add	sp, #56	@ 0x38
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000bc 	.word	0x200000bc
 8000a80:	40000400 	.word	0x40000400
 8000a84:	00004e1f 	.word	0x00004e1f

08000a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <MX_USART2_UART_Init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a94:	2296      	movs	r2, #150	@ 0x96
 8000a96:	0212      	lsls	r2, r2, #8
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fb43 	bl	8003158 <HAL_UART_Init>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f000 f8c6 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000104 	.word	0x20000104
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b089      	sub	sp, #36	@ 0x24
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	240c      	movs	r4, #12
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	0018      	movs	r0, r3
 8000af4:	2314      	movs	r3, #20
 8000af6:	001a      	movs	r2, r3
 8000af8:	2100      	movs	r1, #0
 8000afa:	f003 fd0b 	bl	8004514 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <MX_GPIO_Init+0xac>)
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <MX_GPIO_Init+0xac>)
 8000b04:	2180      	movs	r1, #128	@ 0x80
 8000b06:	0289      	lsls	r1, r1, #10
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_GPIO_Init+0xac>)
 8000b0e:	695a      	ldr	r2, [r3, #20]
 8000b10:	2380      	movs	r3, #128	@ 0x80
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <MX_GPIO_Init+0xac>)
 8000b1c:	695a      	ldr	r2, [r3, #20]
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <MX_GPIO_Init+0xac>)
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	02c9      	lsls	r1, r1, #11
 8000b24:	430a      	orrs	r2, r1
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_GPIO_Init+0xac>)
 8000b2a:	695a      	ldr	r2, [r3, #20]
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	02db      	lsls	r3, r3, #11
 8000b30:	4013      	ands	r3, r2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCON_GPIO_Port, PCON_Pin, GPIO_PIN_RESET);
 8000b36:	2390      	movs	r3, #144	@ 0x90
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fdb1 	bl	80016a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCON_Pin */
  GPIO_InitStruct.Pin = PCON_Pin;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2202      	movs	r2, #2
 8000b48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PCON_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	193a      	adds	r2, r7, r4
 8000b5e:	2390      	movs	r3, #144	@ 0x90
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fc19 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	193a      	adds	r2, r7, r4
 8000b7e:	2390      	movs	r3, #144	@ 0x90
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fc09 	bl	800139c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b009      	add	sp, #36	@ 0x24
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// TIM2 IRQ for BTN sampling
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	bool actual_state = HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin);
 8000ba0:	2390      	movs	r3, #144	@ 0x90
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fd60 	bl	800166c <HAL_GPIO_ReadPin>
 8000bac:	0003      	movs	r3, r0
 8000bae:	001a      	movs	r2, r3
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	183b      	adds	r3, r7, r0
 8000bb4:	1e51      	subs	r1, r2, #1
 8000bb6:	418a      	sbcs	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
	if (lastBtnState != actual_state)
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	183a      	adds	r2, r7, r0
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d00f      	beq.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		lastBtnState = actual_state;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bc8:	183a      	adds	r2, r7, r0
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	701a      	strb	r2, [r3, #0]
		if (actual_state)
 8000bce:	183b      	adds	r3, r7, r0
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			pom = !pom;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	425a      	negs	r2, r3
 8000bdc:	4153      	adcs	r3, r2
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	001a      	movs	r2, r3
 8000be2:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000be4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	2000018c 	.word	0x2000018c

08000bf8 <setServo>:

void setServo(TIM_TypeDef *timer, int tim_channel, int duty_cycle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	if ((duty_cycle > servoLeft) || (duty_cycle < servoRight))	// Servo range control
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	2396      	movs	r3, #150	@ 0x96
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dc27      	bgt.n	8000c5e <setServo+0x66>
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	2396      	movs	r3, #150	@ 0x96
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	429a      	cmp	r2, r3
 8000c16:	db22      	blt.n	8000c5e <setServo+0x66>
		return;

	switch (tim_channel)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d01b      	beq.n	8000c56 <setServo+0x5e>
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	dc1d      	bgt.n	8000c60 <setServo+0x68>
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d011      	beq.n	8000c4e <setServo+0x56>
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	dc17      	bgt.n	8000c60 <setServo+0x68>
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d003      	beq.n	8000c3e <setServo+0x46>
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d004      	beq.n	8000c46 <setServo+0x4e>
 8000c3c:	e010      	b.n	8000c60 <setServo+0x68>
	{
	case 1:
		timer->CCR1 = duty_cycle;
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000c44:	e00c      	b.n	8000c60 <setServo+0x68>
	case 2:
		timer->CCR2 = duty_cycle;
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8000c4c:	e008      	b.n	8000c60 <setServo+0x68>
	case 3:
		timer->CCR3 = duty_cycle;
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000c54:	e004      	b.n	8000c60 <setServo+0x68>
	case 4:
		timer->CCR4 = duty_cycle;
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8000c5c:	e000      	b.n	8000c60 <setServo+0x68>
		return;
 8000c5e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6a:	b672      	cpsid	i
}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	e7fd      	b.n	8000c6e <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	699a      	ldr	r2, [r3, #24]
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	619a      	str	r2, [r3, #24]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	69da      	ldr	r2, [r3, #28]
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0549      	lsls	r1, r1, #21
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	61da      	str	r2, [r3, #28]
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000ca2:	69da      	ldr	r2, [r3, #28]
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	055b      	lsls	r3, r3, #21
 8000ca8:	4013      	ands	r3, r2
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a20      	ldr	r2, [pc, #128]	@ (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10e      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000cd0:	699a      	ldr	r2, [r3, #24]
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000cd4:	2180      	movs	r1, #128	@ 0x80
 8000cd6:	0109      	lsls	r1, r1, #4
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	619a      	str	r2, [r3, #24]
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000cde:	699a      	ldr	r2, [r3, #24]
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cea:	e02b      	b.n	8000d44 <HAL_TIM_Base_MspInit+0x88>
  else if(htim_base->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d114      	bne.n	8000d22 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000cfa:	69da      	ldr	r2, [r3, #28]
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	430a      	orrs	r2, r1
 8000d02:	61da      	str	r2, [r3, #28]
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	200f      	movs	r0, #15
 8000d16:	f000 fa91 	bl	800123c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f000 faa3 	bl	8001266 <HAL_NVIC_EnableIRQ>
}
 8000d20:	e010      	b.n	8000d44 <HAL_TIM_Base_MspInit+0x88>
  else if(htim_base->Instance==TIM3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	@ (8000d54 <HAL_TIM_Base_MspInit+0x98>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d10b      	bne.n	8000d44 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000d2e:	69da      	ldr	r2, [r3, #28]
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000d32:	2102      	movs	r1, #2
 8000d34:	430a      	orrs	r2, r1
 8000d36:	61da      	str	r2, [r3, #28]
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b006      	add	sp, #24
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40012c00 	.word	0x40012c00
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40000400 	.word	0x40000400

08000d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b08b      	sub	sp, #44	@ 0x2c
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	2414      	movs	r4, #20
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	0018      	movs	r0, r3
 8000d66:	2314      	movs	r3, #20
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f003 fbd2 	bl	8004514 <memset>
  if(htim->Instance==TIM1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a3d      	ldr	r2, [pc, #244]	@ (8000e6c <HAL_TIM_MspPostInit+0x114>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d126      	bne.n	8000dc8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	0289      	lsls	r1, r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	4b39      	ldr	r3, [pc, #228]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	22f0      	movs	r2, #240	@ 0xf0
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	0021      	movs	r1, r4
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2202      	movs	r2, #2
 8000da4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2202      	movs	r2, #2
 8000db6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	187a      	adds	r2, r7, r1
 8000dba:	2390      	movs	r3, #144	@ 0x90
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 faeb 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dc6:	e04d      	b.n	8000e64 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <HAL_TIM_MspPostInit+0x11c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d148      	bne.n	8000e64 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000dd4:	695a      	ldr	r2, [r3, #20]
 8000dd6:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000dd8:	2180      	movs	r1, #128	@ 0x80
 8000dda:	0289      	lsls	r1, r1, #10
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	029b      	lsls	r3, r3, #10
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000df4:	2180      	movs	r1, #128	@ 0x80
 8000df6:	02c9      	lsls	r1, r1, #11
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <HAL_TIM_MspPostInit+0x118>)
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	02db      	lsls	r3, r3, #11
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e0a:	2414      	movs	r4, #20
 8000e0c:	193b      	adds	r3, r7, r4
 8000e0e:	22c0      	movs	r2, #192	@ 0xc0
 8000e10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	2202      	movs	r2, #2
 8000e16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	2201      	movs	r2, #1
 8000e28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	193a      	adds	r2, r7, r4
 8000e2c:	2390      	movs	r3, #144	@ 0x90
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	0011      	movs	r1, r2
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fab2 	bl	800139c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e38:	0021      	movs	r1, r4
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2202      	movs	r2, #2
 8000e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_TIM_MspPostInit+0x120>)
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	0010      	movs	r0, r2
 8000e60:	f000 fa9c 	bl	800139c <HAL_GPIO_Init>
}
 8000e64:	46c0      	nop			@ (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b00b      	add	sp, #44	@ 0x2c
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40012c00 	.word	0x40012c00
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40000400 	.word	0x40000400
 8000e78:	48000400 	.word	0x48000400

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b08b      	sub	sp, #44	@ 0x2c
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	2414      	movs	r4, #20
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	0018      	movs	r0, r3
 8000e8a:	2314      	movs	r3, #20
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f003 fb40 	bl	8004514 <memset>
  if(huart->Instance==USART2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a20      	ldr	r2, [pc, #128]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d13a      	bne.n	8000f14 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000ea0:	69da      	ldr	r2, [r3, #28]
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	0289      	lsls	r1, r1, #10
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	61da      	str	r2, [r3, #28]
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000eae:	69da      	ldr	r2, [r3, #28]
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	029b      	lsls	r3, r3, #10
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000ec0:	2180      	movs	r1, #128	@ 0x80
 8000ec2:	0289      	lsls	r1, r1, #10
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000eca:	695a      	ldr	r2, [r3, #20]
 8000ecc:	2380      	movs	r3, #128	@ 0x80
 8000ece:	029b      	lsls	r3, r3, #10
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000ed6:	0021      	movs	r1, r4
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <HAL_UART_MspInit+0xa8>)
 8000edc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2203      	movs	r2, #3
 8000eee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	187a      	adds	r2, r7, r1
 8000ef8:	2390      	movs	r3, #144	@ 0x90
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	0011      	movs	r1, r2
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fa4c 	bl	800139c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	201c      	movs	r0, #28
 8000f0a:	f000 f997 	bl	800123c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f000 f9a9 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b00b      	add	sp, #44	@ 0x2c
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40021000 	.word	0x40021000
 8000f24:	00008004 	.word	0x00008004

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	e7fd      	b.n	8000f2c <NMI_Handler+0x4>

08000f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	e7fd      	b.n	8000f34 <HardFault_Handler+0x4>

08000f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 f8ac 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <TIM2_IRQHandler+0x14>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f001 fa4e 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	20000074 	.word	0x20000074

08000f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <USART2_IRQHandler+0x14>)
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f002 f998 	bl	80032b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	20000104 	.word	0x20000104

08000f8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f98:	4813      	ldr	r0, [pc, #76]	@ (8000fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f9c:	f7ff fff6 	bl	8000f8c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000fa0:	4812      	ldr	r0, [pc, #72]	@ (8000fec <LoopForever+0x6>)
    LDR R1, [R0]
 8000fa2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000fa4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000fa6:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <LoopForever+0xa>)
    CMP R1, R2
 8000fa8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000faa:	d105      	bne.n	8000fb8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000fac:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000fae:	4912      	ldr	r1, [pc, #72]	@ (8000ff8 <LoopForever+0x12>)
    STR R1, [R0]
 8000fb0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000fb2:	4812      	ldr	r0, [pc, #72]	@ (8000ffc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000fb4:	4912      	ldr	r1, [pc, #72]	@ (8001000 <LoopForever+0x1a>)
    STR R1, [R0]
 8000fb6:	6001      	str	r1, [r0, #0]

08000fb8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	4812      	ldr	r0, [pc, #72]	@ (8001004 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000fba:	4913      	ldr	r1, [pc, #76]	@ (8001008 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000fbc:	4a13      	ldr	r2, [pc, #76]	@ (800100c <LoopForever+0x26>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a10      	ldr	r2, [pc, #64]	@ (8001010 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000fd0:	4c10      	ldr	r4, [pc, #64]	@ (8001014 <LoopForever+0x2e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fde:	f003 faa1 	bl	8004524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff f953 	bl	800028c <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   r0, =_estack
 8000fe8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000fec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ff0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000ff4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000ff8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ffc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001000:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800100c:	080045c4 	.word	0x080045c4
  ldr r2, =_sbss
 8001010:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001014:	2000019c 	.word	0x2000019c

08001018 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC1_IRQHandler>
	...

0800101c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <HAL_Init+0x24>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_Init+0x24>)
 8001026:	2110      	movs	r1, #16
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f809 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001032:	f7ff fe1f 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	40022000 	.word	0x40022000

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <HAL_InitTick+0x5c>)
 800104e:	681c      	ldr	r4, [r3, #0]
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_InitTick+0x60>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	0019      	movs	r1, r3
 8001056:	23fa      	movs	r3, #250	@ 0xfa
 8001058:	0098      	lsls	r0, r3, #2
 800105a:	f7ff f855 	bl	8000108 <__udivsi3>
 800105e:	0003      	movs	r3, r0
 8001060:	0019      	movs	r1, r3
 8001062:	0020      	movs	r0, r4
 8001064:	f7ff f850 	bl	8000108 <__udivsi3>
 8001068:	0003      	movs	r3, r0
 800106a:	0018      	movs	r0, r3
 800106c:	f000 f90b 	bl	8001286 <HAL_SYSTICK_Config>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d001      	beq.n	8001078 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e00f      	b.n	8001098 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d80b      	bhi.n	8001096 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	2301      	movs	r3, #1
 8001082:	425b      	negs	r3, r3
 8001084:	2200      	movs	r2, #0
 8001086:	0018      	movs	r0, r3
 8001088:	f000 f8d8 	bl	800123c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_InitTick+0x64>)
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b003      	add	sp, #12
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	20000004 	.word	0x20000004
 80010a4:	2000000c 	.word	0x2000000c
 80010a8:	20000008 	.word	0x20000008

080010ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_IncTick+0x1c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	001a      	movs	r2, r3
 80010b6:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <HAL_IncTick+0x20>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	18d2      	adds	r2, r2, r3
 80010bc:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <HAL_IncTick+0x20>)
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	2000000c 	.word	0x2000000c
 80010cc:	20000198 	.word	0x20000198

080010d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b02      	ldr	r3, [pc, #8]	@ (80010e0 <HAL_GetTick+0x10>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	20000198 	.word	0x20000198

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	0002      	movs	r2, r0
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80010f6:	d809      	bhi.n	800110c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	001a      	movs	r2, r3
 80010fe:	231f      	movs	r3, #31
 8001100:	401a      	ands	r2, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <__NVIC_EnableIRQ+0x30>)
 8001104:	2101      	movs	r1, #1
 8001106:	4091      	lsls	r1, r2
 8001108:	000a      	movs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
  }
}
 800110c:	46c0      	nop			@ (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	0002      	movs	r2, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b7f      	cmp	r3, #127	@ 0x7f
 800112c:	d828      	bhi.n	8001180 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112e:	4a2f      	ldr	r2, [pc, #188]	@ (80011ec <__NVIC_SetPriority+0xd4>)
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b25b      	sxtb	r3, r3
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	33c0      	adds	r3, #192	@ 0xc0
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	589b      	ldr	r3, [r3, r2]
 800113e:	1dfa      	adds	r2, r7, #7
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	0011      	movs	r1, r2
 8001144:	2203      	movs	r2, #3
 8001146:	400a      	ands	r2, r1
 8001148:	00d2      	lsls	r2, r2, #3
 800114a:	21ff      	movs	r1, #255	@ 0xff
 800114c:	4091      	lsls	r1, r2
 800114e:	000a      	movs	r2, r1
 8001150:	43d2      	mvns	r2, r2
 8001152:	401a      	ands	r2, r3
 8001154:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	22ff      	movs	r2, #255	@ 0xff
 800115c:	401a      	ands	r2, r3
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	0018      	movs	r0, r3
 8001164:	2303      	movs	r3, #3
 8001166:	4003      	ands	r3, r0
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116c:	481f      	ldr	r0, [pc, #124]	@ (80011ec <__NVIC_SetPriority+0xd4>)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b25b      	sxtb	r3, r3
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	430a      	orrs	r2, r1
 8001178:	33c0      	adds	r3, #192	@ 0xc0
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800117e:	e031      	b.n	80011e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001180:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <__NVIC_SetPriority+0xd8>)
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	0019      	movs	r1, r3
 8001188:	230f      	movs	r3, #15
 800118a:	400b      	ands	r3, r1
 800118c:	3b08      	subs	r3, #8
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3306      	adds	r3, #6
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	18d3      	adds	r3, r2, r3
 8001196:	3304      	adds	r3, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1dfa      	adds	r2, r7, #7
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	0011      	movs	r1, r2
 80011a0:	2203      	movs	r2, #3
 80011a2:	400a      	ands	r2, r1
 80011a4:	00d2      	lsls	r2, r2, #3
 80011a6:	21ff      	movs	r1, #255	@ 0xff
 80011a8:	4091      	lsls	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	43d2      	mvns	r2, r2
 80011ae:	401a      	ands	r2, r3
 80011b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	019b      	lsls	r3, r3, #6
 80011b6:	22ff      	movs	r2, #255	@ 0xff
 80011b8:	401a      	ands	r2, r3
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	0018      	movs	r0, r3
 80011c0:	2303      	movs	r3, #3
 80011c2:	4003      	ands	r3, r0
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c8:	4809      	ldr	r0, [pc, #36]	@ (80011f0 <__NVIC_SetPriority+0xd8>)
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	001c      	movs	r4, r3
 80011d0:	230f      	movs	r3, #15
 80011d2:	4023      	ands	r3, r4
 80011d4:	3b08      	subs	r3, #8
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	430a      	orrs	r2, r1
 80011da:	3306      	adds	r3, #6
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	18c3      	adds	r3, r0, r3
 80011e0:	3304      	adds	r3, #4
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b003      	add	sp, #12
 80011ea:	bd90      	pop	{r4, r7, pc}
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1e5a      	subs	r2, r3, #1
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	045b      	lsls	r3, r3, #17
 8001204:	429a      	cmp	r2, r3
 8001206:	d301      	bcc.n	800120c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001208:	2301      	movs	r3, #1
 800120a:	e010      	b.n	800122e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <SysTick_Config+0x44>)
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	3a01      	subs	r2, #1
 8001212:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001214:	2301      	movs	r3, #1
 8001216:	425b      	negs	r3, r3
 8001218:	2103      	movs	r1, #3
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff ff7c 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <SysTick_Config+0x44>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <SysTick_Config+0x44>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	210f      	movs	r1, #15
 8001248:	187b      	adds	r3, r7, r1
 800124a:	1c02      	adds	r2, r0, #0
 800124c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	187b      	adds	r3, r7, r1
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b25b      	sxtb	r3, r3
 8001256:	0011      	movs	r1, r2
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <__NVIC_SetPriority>
}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b004      	add	sp, #16
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	0002      	movs	r2, r0
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff ff33 	bl	80010e4 <__NVIC_EnableIRQ>
}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff ffaf 	bl	80011f4 <SysTick_Config>
 8001296:	0003      	movs	r3, r0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2221      	movs	r2, #33	@ 0x21
 80012ac:	5c9b      	ldrb	r3, [r3, r2]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d008      	beq.n	80012c6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2204      	movs	r2, #4
 80012b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2220      	movs	r2, #32
 80012be:	2100      	movs	r1, #0
 80012c0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e020      	b.n	8001308 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	210e      	movs	r1, #14
 80012d2:	438a      	bics	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	438a      	bics	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ee:	2101      	movs	r1, #1
 80012f0:	4091      	lsls	r1, r2
 80012f2:	000a      	movs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2221      	movs	r2, #33	@ 0x21
 80012fa:	2101      	movs	r1, #1
 80012fc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2220      	movs	r2, #32
 8001302:	2100      	movs	r1, #0
 8001304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001318:	210f      	movs	r1, #15
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2221      	movs	r2, #33	@ 0x21
 8001324:	5c9b      	ldrb	r3, [r3, r2]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d006      	beq.n	800133a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e028      	b.n	800138c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	210e      	movs	r1, #14
 8001346:	438a      	bics	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	438a      	bics	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001362:	2101      	movs	r1, #1
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2221      	movs	r2, #33	@ 0x21
 800136e:	2101      	movs	r1, #1
 8001370:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	0010      	movs	r0, r2
 800138a:	4798      	blx	r3
    }
  }
  return status;
 800138c:	230f      	movs	r3, #15
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e149      	b.n	8001640 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_Init+0x28>
 80013c2:	e13a      	b.n	800163a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	409a      	lsls	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	43da      	mvns	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	2201      	movs	r2, #1
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	4013      	ands	r3, r2
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	4013      	ands	r3, r2
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	58d3      	ldr	r3, [r2, r3]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2207      	movs	r2, #7
 8001498:	4013      	ands	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2107      	movs	r1, #7
 80014b2:	400b      	ands	r3, r1
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	6939      	ldr	r1, [r7, #16]
 80014cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	401a      	ands	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	23c0      	movs	r3, #192	@ 0xc0
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_GPIO_Init+0x174>
 800150e:	e094      	b.n	800163a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b51      	ldr	r3, [pc, #324]	@ (8001658 <HAL_GPIO_Init+0x2bc>)
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	4b50      	ldr	r3, [pc, #320]	@ (8001658 <HAL_GPIO_Init+0x2bc>)
 8001516:	2101      	movs	r1, #1
 8001518:	430a      	orrs	r2, r1
 800151a:	619a      	str	r2, [r3, #24]
 800151c:	4b4e      	ldr	r3, [pc, #312]	@ (8001658 <HAL_GPIO_Init+0x2bc>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001528:	4a4c      	ldr	r2, [pc, #304]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	589b      	ldr	r3, [r3, r2]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2203      	movs	r2, #3
 800153a:	4013      	ands	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	2390      	movs	r3, #144	@ 0x90
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	429a      	cmp	r2, r3
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x1d6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a41      	ldr	r2, [pc, #260]	@ (8001660 <HAL_GPIO_Init+0x2c4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x1d2>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a40      	ldr	r2, [pc, #256]	@ (8001664 <HAL_GPIO_Init+0x2c8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x1ce>
 8001566:	2302      	movs	r3, #2
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x1d8>
 800156a:	2305      	movs	r3, #5
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x1d8>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x1d8>
 8001572:	2300      	movs	r3, #0
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	2103      	movs	r1, #3
 8001578:	400a      	ands	r2, r1
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001584:	4935      	ldr	r1, [pc, #212]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43da      	mvns	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	035b      	lsls	r3, r3, #13
 80015aa:	4013      	ands	r3, r2
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43da      	mvns	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	039b      	lsls	r3, r3, #14
 80015d4:	4013      	ands	r3, r2
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015e0:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43da      	mvns	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	4013      	ands	r3, r2
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800160a:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43da      	mvns	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	4013      	ands	r3, r2
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <HAL_GPIO_Init+0x2cc>)
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	40da      	lsrs	r2, r3
 8001648:	1e13      	subs	r3, r2, #0
 800164a:	d000      	beq.n	800164e <HAL_GPIO_Init+0x2b2>
 800164c:	e6ae      	b.n	80013ac <HAL_GPIO_Init+0x10>
  } 
}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46c0      	nop			@ (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b006      	add	sp, #24
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000
 8001660:	48000400 	.word	0x48000400
 8001664:	48000800 	.word	0x48000800
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	000a      	movs	r2, r1
 8001676:	1cbb      	adds	r3, r7, #2
 8001678:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	1cba      	adds	r2, r7, #2
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	4013      	ands	r3, r2
 8001684:	d004      	beq.n	8001690 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001686:	230f      	movs	r3, #15
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e003      	b.n	8001698 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001690:	230f      	movs	r3, #15
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001698:	230f      	movs	r3, #15
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	781b      	ldrb	r3, [r3, #0]
  }
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	0008      	movs	r0, r1
 80016b0:	0011      	movs	r1, r2
 80016b2:	1cbb      	adds	r3, r7, #2
 80016b4:	1c02      	adds	r2, r0, #0
 80016b6:	801a      	strh	r2, [r3, #0]
 80016b8:	1c7b      	adds	r3, r7, #1
 80016ba:	1c0a      	adds	r2, r1, #0
 80016bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016be:	1c7b      	adds	r3, r7, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c6:	1cbb      	adds	r3, r7, #2
 80016c8:	881a      	ldrh	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016ce:	e003      	b.n	80016d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d0:	1cbb      	adds	r3, r7, #2
 80016d2:	881a      	ldrh	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f000 fb76 	bl	8001de0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	d100      	bne.n	8001700 <HAL_RCC_OscConfig+0x20>
 80016fe:	e08e      	b.n	800181e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001700:	4bc5      	ldr	r3, [pc, #788]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	220c      	movs	r2, #12
 8001706:	4013      	ands	r3, r2
 8001708:	2b04      	cmp	r3, #4
 800170a:	d00e      	beq.n	800172a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800170c:	4bc2      	ldr	r3, [pc, #776]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	220c      	movs	r2, #12
 8001712:	4013      	ands	r3, r2
 8001714:	2b08      	cmp	r3, #8
 8001716:	d117      	bne.n	8001748 <HAL_RCC_OscConfig+0x68>
 8001718:	4bbf      	ldr	r3, [pc, #764]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	23c0      	movs	r3, #192	@ 0xc0
 800171e:	025b      	lsls	r3, r3, #9
 8001720:	401a      	ands	r2, r3
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	429a      	cmp	r2, r3
 8001728:	d10e      	bne.n	8001748 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172a:	4bbb      	ldr	r3, [pc, #748]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	@ 0x80
 8001730:	029b      	lsls	r3, r3, #10
 8001732:	4013      	ands	r3, r2
 8001734:	d100      	bne.n	8001738 <HAL_RCC_OscConfig+0x58>
 8001736:	e071      	b.n	800181c <HAL_RCC_OscConfig+0x13c>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d000      	beq.n	8001742 <HAL_RCC_OscConfig+0x62>
 8001740:	e06c      	b.n	800181c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	f000 fb4c 	bl	8001de0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x80>
 8001750:	4bb1      	ldr	r3, [pc, #708]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4bb0      	ldr	r3, [pc, #704]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001756:	2180      	movs	r1, #128	@ 0x80
 8001758:	0249      	lsls	r1, r1, #9
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e02f      	b.n	80017c0 <HAL_RCC_OscConfig+0xe0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0xa2>
 8001768:	4bab      	ldr	r3, [pc, #684]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4baa      	ldr	r3, [pc, #680]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800176e:	49ab      	ldr	r1, [pc, #684]	@ (8001a1c <HAL_RCC_OscConfig+0x33c>)
 8001770:	400a      	ands	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	4ba8      	ldr	r3, [pc, #672]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4ba7      	ldr	r3, [pc, #668]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800177a:	49a9      	ldr	r1, [pc, #676]	@ (8001a20 <HAL_RCC_OscConfig+0x340>)
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e01e      	b.n	80017c0 <HAL_RCC_OscConfig+0xe0>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d10e      	bne.n	80017a8 <HAL_RCC_OscConfig+0xc8>
 800178a:	4ba3      	ldr	r3, [pc, #652]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4ba2      	ldr	r3, [pc, #648]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001790:	2180      	movs	r1, #128	@ 0x80
 8001792:	02c9      	lsls	r1, r1, #11
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	4b9f      	ldr	r3, [pc, #636]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b9e      	ldr	r3, [pc, #632]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	0249      	lsls	r1, r1, #9
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xe0>
 80017a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80017ae:	499b      	ldr	r1, [pc, #620]	@ (8001a1c <HAL_RCC_OscConfig+0x33c>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4b98      	ldr	r3, [pc, #608]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b97      	ldr	r3, [pc, #604]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80017ba:	4999      	ldr	r1, [pc, #612]	@ (8001a20 <HAL_RCC_OscConfig+0x340>)
 80017bc:	400a      	ands	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d014      	beq.n	80017f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc82 	bl	80010d0 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d2:	f7ff fc7d 	bl	80010d0 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b64      	cmp	r3, #100	@ 0x64
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e2fd      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	@ 0x80
 80017ea:	029b      	lsls	r3, r3, #10
 80017ec:	4013      	ands	r3, r2
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0xf2>
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fc6d 	bl	80010d0 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fc68 	bl	80010d0 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	@ 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e2e8      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	4b82      	ldr	r3, [pc, #520]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	029b      	lsls	r3, r3, #10
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x11c>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x14a>
 8001828:	e06c      	b.n	8001904 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800182a:	4b7b      	ldr	r3, [pc, #492]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	220c      	movs	r2, #12
 8001830:	4013      	ands	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001834:	4b78      	ldr	r3, [pc, #480]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	220c      	movs	r2, #12
 800183a:	4013      	ands	r3, r2
 800183c:	2b08      	cmp	r3, #8
 800183e:	d11f      	bne.n	8001880 <HAL_RCC_OscConfig+0x1a0>
 8001840:	4b75      	ldr	r3, [pc, #468]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	23c0      	movs	r3, #192	@ 0xc0
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	401a      	ands	r2, r3
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	429a      	cmp	r2, r3
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b71      	ldr	r3, [pc, #452]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x188>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e2bb      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b6b      	ldr	r3, [pc, #428]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	22f8      	movs	r2, #248	@ 0xf8
 800186e:	4393      	bics	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00da      	lsls	r2, r3, #3
 8001878:	4b67      	ldr	r3, [pc, #412]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e041      	b.n	8001904 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d024      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b63      	ldr	r3, [pc, #396]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b62      	ldr	r3, [pc, #392]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800188e:	2101      	movs	r1, #1
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fc1c 	bl	80010d0 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fc17 	bl	80010d0 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e297      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b59      	ldr	r3, [pc, #356]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2202      	movs	r2, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0f1      	beq.n	800189e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b57      	ldr	r3, [pc, #348]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	22f8      	movs	r2, #248	@ 0xf8
 80018c0:	4393      	bics	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00da      	lsls	r2, r3, #3
 80018ca:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e018      	b.n	8001904 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b51      	ldr	r3, [pc, #324]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b50      	ldr	r3, [pc, #320]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80018d8:	2101      	movs	r1, #1
 80018da:	438a      	bics	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fbf7 	bl	80010d0 <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fbf2 	bl	80010d0 <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e272      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2202      	movs	r2, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d1f1      	bne.n	80018e8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2208      	movs	r2, #8
 800190a:	4013      	ands	r3, r2
 800190c:	d036      	beq.n	800197c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b40      	ldr	r3, [pc, #256]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800191a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fbd5 	bl	80010d0 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fbd0 	bl	80010d0 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e250      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	4b36      	ldr	r3, [pc, #216]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0f1      	beq.n	800192c <HAL_RCC_OscConfig+0x24c>
 8001948:	e018      	b.n	800197c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194a:	4b33      	ldr	r3, [pc, #204]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800194c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800194e:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001950:	2101      	movs	r1, #1
 8001952:	438a      	bics	r2, r1
 8001954:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fbbb 	bl	80010d0 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fbb6 	bl	80010d0 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e236      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001972:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d1f1      	bne.n	8001960 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2204      	movs	r2, #4
 8001982:	4013      	ands	r3, r2
 8001984:	d100      	bne.n	8001988 <HAL_RCC_OscConfig+0x2a8>
 8001986:	e0b5      	b.n	8001af4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001988:	201f      	movs	r0, #31
 800198a:	183b      	adds	r3, r7, r0
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	4013      	ands	r3, r2
 800199a:	d110      	bne.n	80019be <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 800199e:	69da      	ldr	r2, [r3, #28]
 80019a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	0549      	lsls	r1, r1, #21
 80019a6:	430a      	orrs	r2, r1
 80019a8:	61da      	str	r2, [r3, #28]
 80019aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	055b      	lsls	r3, r3, #21
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019b8:	183b      	adds	r3, r7, r0
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_RCC_OscConfig+0x344>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	d11a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <HAL_RCC_OscConfig+0x344>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_RCC_OscConfig+0x344>)
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	0049      	lsls	r1, r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fb7a 	bl	80010d0 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff fb75 	bl	80010d0 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	@ 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1f5      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_RCC_OscConfig+0x344>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10f      	bne.n	8001a28 <HAL_RCC_OscConfig+0x348>
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	6a1a      	ldr	r2, [r3, #32]
 8001a0c:	4b02      	ldr	r3, [pc, #8]	@ (8001a18 <HAL_RCC_OscConfig+0x338>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	621a      	str	r2, [r3, #32]
 8001a14:	e036      	b.n	8001a84 <HAL_RCC_OscConfig+0x3a4>
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	fffeffff 	.word	0xfffeffff
 8001a20:	fffbffff 	.word	0xfffbffff
 8001a24:	40007000 	.word	0x40007000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_OscConfig+0x36a>
 8001a30:	4bca      	ldr	r3, [pc, #808]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	4bc9      	ldr	r3, [pc, #804]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	438a      	bics	r2, r1
 8001a3a:	621a      	str	r2, [r3, #32]
 8001a3c:	4bc7      	ldr	r3, [pc, #796]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	4bc6      	ldr	r3, [pc, #792]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a42:	2104      	movs	r1, #4
 8001a44:	438a      	bics	r2, r1
 8001a46:	621a      	str	r2, [r3, #32]
 8001a48:	e01c      	b.n	8001a84 <HAL_RCC_OscConfig+0x3a4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x38c>
 8001a52:	4bc2      	ldr	r3, [pc, #776]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	4bc1      	ldr	r3, [pc, #772]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a58:	2104      	movs	r1, #4
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	621a      	str	r2, [r3, #32]
 8001a5e:	4bbf      	ldr	r3, [pc, #764]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a60:	6a1a      	ldr	r2, [r3, #32]
 8001a62:	4bbe      	ldr	r3, [pc, #760]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	430a      	orrs	r2, r1
 8001a68:	621a      	str	r2, [r3, #32]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0x3a4>
 8001a6c:	4bbb      	ldr	r3, [pc, #748]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	4bba      	ldr	r3, [pc, #744]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	438a      	bics	r2, r1
 8001a76:	621a      	str	r2, [r3, #32]
 8001a78:	4bb8      	ldr	r3, [pc, #736]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a7a:	6a1a      	ldr	r2, [r3, #32]
 8001a7c:	4bb7      	ldr	r3, [pc, #732]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001a7e:	2104      	movs	r1, #4
 8001a80:	438a      	bics	r2, r1
 8001a82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d014      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fb20 	bl	80010d0 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fb1b 	bl	80010d0 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4aaf      	ldr	r2, [pc, #700]	@ (8001d60 <HAL_RCC_OscConfig+0x680>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e19a      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	4bac      	ldr	r3, [pc, #688]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x3b6>
 8001ab4:	e013      	b.n	8001ade <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fb0b 	bl	80010d0 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fb06 	bl	80010d0 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	4aa5      	ldr	r2, [pc, #660]	@ (8001d60 <HAL_RCC_OscConfig+0x680>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e185      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	4ba1      	ldr	r3, [pc, #644]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4013      	ands	r3, r2
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ade:	231f      	movs	r3, #31
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4b9c      	ldr	r3, [pc, #624]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	4b9b      	ldr	r3, [pc, #620]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001aee:	499d      	ldr	r1, [pc, #628]	@ (8001d64 <HAL_RCC_OscConfig+0x684>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2210      	movs	r2, #16
 8001afa:	4013      	ands	r3, r2
 8001afc:	d063      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d12a      	bne.n	8001b5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b06:	4b95      	ldr	r3, [pc, #596]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b0a:	4b94      	ldr	r3, [pc, #592]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b12:	4b92      	ldr	r3, [pc, #584]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b16:	4b91      	ldr	r3, [pc, #580]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fad7 	bl	80010d0 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b28:	f7ff fad2 	bl	80010d0 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e152      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b3a:	4b88      	ldr	r3, [pc, #544]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d0f1      	beq.n	8001b28 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b44:	4b85      	ldr	r3, [pc, #532]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b48:	22f8      	movs	r2, #248	@ 0xf8
 8001b4a:	4393      	bics	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	00da      	lsls	r2, r3, #3
 8001b54:	4b81      	ldr	r3, [pc, #516]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b5a:	e034      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	3305      	adds	r3, #5
 8001b62:	d111      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b64:	4b7d      	ldr	r3, [pc, #500]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b68:	4b7c      	ldr	r3, [pc, #496]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	438a      	bics	r2, r1
 8001b6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b70:	4b7a      	ldr	r3, [pc, #488]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b74:	22f8      	movs	r2, #248	@ 0xf8
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	00da      	lsls	r2, r3, #3
 8001b80:	4b76      	ldr	r3, [pc, #472]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b82:	430a      	orrs	r2, r1
 8001b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b86:	e01e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b88:	4b74      	ldr	r3, [pc, #464]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b8c:	4b73      	ldr	r3, [pc, #460]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	2104      	movs	r1, #4
 8001b90:	430a      	orrs	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b94:	4b71      	ldr	r3, [pc, #452]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b98:	4b70      	ldr	r3, [pc, #448]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fa96 	bl	80010d0 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001baa:	f7ff fa91 	bl	80010d0 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e111      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bbc:	4b67      	ldr	r3, [pc, #412]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d1f1      	bne.n	8001baa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d05c      	beq.n	8001c8a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bd0:	4b62      	ldr	r3, [pc, #392]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d00e      	beq.n	8001bfa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	220c      	movs	r2, #12
 8001be2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d114      	bne.n	8001c12 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001be8:	4b5c      	ldr	r3, [pc, #368]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	23c0      	movs	r3, #192	@ 0xc0
 8001bee:	025b      	lsls	r3, r3, #9
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	23c0      	movs	r3, #192	@ 0xc0
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001bfa:	4b58      	ldr	r3, [pc, #352]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	4013      	ands	r3, r2
 8001c04:	d040      	beq.n	8001c88 <HAL_RCC_OscConfig+0x5a8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d03c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0e6      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c1a:	4b50      	ldr	r3, [pc, #320]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001c20:	2180      	movs	r1, #128	@ 0x80
 8001c22:	0249      	lsls	r1, r1, #9
 8001c24:	430a      	orrs	r2, r1
 8001c26:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fa52 	bl	80010d0 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c32:	f7ff fa4d 	bl	80010d0 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0cd      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c44:	4b45      	ldr	r3, [pc, #276]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c48:	2380      	movs	r3, #128	@ 0x80
 8001c4a:	029b      	lsls	r3, r3, #10
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x552>
 8001c50:	e01b      	b.n	8001c8a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c52:	4b42      	ldr	r3, [pc, #264]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001c54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c56:	4b41      	ldr	r3, [pc, #260]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001c58:	4943      	ldr	r1, [pc, #268]	@ (8001d68 <HAL_RCC_OscConfig+0x688>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fa37 	bl	80010d0 <HAL_GetTick>
 8001c62:	0003      	movs	r3, r0
 8001c64:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c68:	f7ff fa32 	bl	80010d0 <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e0b2      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c7a:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	029b      	lsls	r3, r3, #10
 8001c82:	4013      	ands	r3, r2
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x588>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c88:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d100      	bne.n	8001c94 <HAL_RCC_OscConfig+0x5b4>
 8001c92:	e0a4      	b.n	8001dde <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c94:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	220c      	movs	r2, #12
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d100      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5c2>
 8001ca0:	e078      	b.n	8001d94 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d14c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b2c      	ldr	r3, [pc, #176]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001cb0:	492e      	ldr	r1, [pc, #184]	@ (8001d6c <HAL_RCC_OscConfig+0x68c>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fa0b 	bl	80010d0 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff fa06 	bl	80010d0 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e086      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	049b      	lsls	r3, r3, #18
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cde:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	4393      	bics	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d70 <HAL_RCC_OscConfig+0x690>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d04:	431a      	orrs	r2, r3
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	0449      	lsls	r1, r1, #17
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f9d9 	bl	80010d0 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff f9d4 	bl	80010d0 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e054      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	2380      	movs	r3, #128	@ 0x80
 8001d3c:	049b      	lsls	r3, r3, #18
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x644>
 8001d42:	e04c      	b.n	8001dde <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <HAL_RCC_OscConfig+0x68c>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff f9be 	bl	80010d0 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x6a6>
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	00001388 	.word	0x00001388
 8001d64:	efffffff 	.word	0xefffffff
 8001d68:	fffeffff 	.word	0xfffeffff
 8001d6c:	feffffff 	.word	0xfeffffff
 8001d70:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f9ac 	bl	80010d0 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e02c      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_RCC_OscConfig+0x708>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	049b      	lsls	r3, r3, #18
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x694>
 8001d92:	e024      	b.n	8001dde <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e01f      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_RCC_OscConfig+0x708>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_RCC_OscConfig+0x708>)
 8001da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001daa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	23c0      	movs	r3, #192	@ 0xc0
 8001db0:	025b      	lsls	r3, r3, #9
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10e      	bne.n	8001dda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	23f0      	movs	r3, #240	@ 0xf0
 8001dce:	039b      	lsls	r3, r3, #14
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b008      	add	sp, #32
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0bf      	b.n	8001f80 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b61      	ldr	r3, [pc, #388]	@ (8001f88 <HAL_RCC_ClockConfig+0x19c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d911      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f88 <HAL_RCC_ClockConfig+0x19c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4393      	bics	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	4b5b      	ldr	r3, [pc, #364]	@ (8001f88 <HAL_RCC_ClockConfig+0x19c>)
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e20:	4b59      	ldr	r3, [pc, #356]	@ (8001f88 <HAL_RCC_ClockConfig+0x19c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2201      	movs	r2, #1
 8001e26:	4013      	ands	r3, r2
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0a6      	b.n	8001f80 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d015      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2204      	movs	r2, #4
 8001e42:	4013      	ands	r3, r2
 8001e44:	d006      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e46:	4b51      	ldr	r3, [pc, #324]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001e4c:	21e0      	movs	r1, #224	@ 0xe0
 8001e4e:	00c9      	lsls	r1, r1, #3
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b4d      	ldr	r3, [pc, #308]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	22f0      	movs	r2, #240	@ 0xf0
 8001e5a:	4393      	bics	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	4b4a      	ldr	r3, [pc, #296]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d04c      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b44      	ldr	r3, [pc, #272]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2380      	movs	r3, #128	@ 0x80
 8001e80:	029b      	lsls	r3, r3, #10
 8001e82:	4013      	ands	r3, r2
 8001e84:	d120      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07a      	b.n	8001f80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b3e      	ldr	r3, [pc, #248]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	049b      	lsls	r3, r3, #18
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d114      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06e      	b.n	8001f80 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001eaa:	4b38      	ldr	r3, [pc, #224]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eae:	2380      	movs	r3, #128	@ 0x80
 8001eb0:	029b      	lsls	r3, r3, #10
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d108      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e062      	b.n	8001f80 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e05b      	b.n	8001f80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec8:	4b30      	ldr	r3, [pc, #192]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	4393      	bics	r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001edc:	f7ff f8f8 	bl	80010d0 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee6:	f7ff f8f3 	bl	80010d0 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	4a27      	ldr	r2, [pc, #156]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e042      	b.n	8001f80 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	220c      	movs	r2, #12
 8001f00:	401a      	ands	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1ec      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f88 <HAL_RCC_ClockConfig+0x19c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d211      	bcs.n	8001f3e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_RCC_ClockConfig+0x19c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4393      	bics	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <HAL_RCC_ClockConfig+0x19c>)
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2c:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <HAL_RCC_ClockConfig+0x19c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e020      	b.n	8001f80 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2204      	movs	r2, #4
 8001f44:	4013      	ands	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <HAL_RCC_ClockConfig+0x1a8>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f5c:	f000 f820 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f60:	0001      	movs	r1, r0
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_RCC_ClockConfig+0x1a0>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	220f      	movs	r2, #15
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <HAL_RCC_ClockConfig+0x1ac>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	000a      	movs	r2, r1
 8001f72:	40da      	lsrs	r2, r3
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_ClockConfig+0x1b0>)
 8001f76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f7ff f863 	bl	8001044 <HAL_InitTick>
  
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	00001388 	.word	0x00001388
 8001f94:	fffff8ff 	.word	0xfffff8ff
 8001f98:	08004584 	.word	0x08004584
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fba:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d046      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0xb8>
 8001fca:	d848      	bhi.n	800205e <HAL_RCC_GetSysClockFreq+0xbe>
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d002      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d003      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x3c>
 8001fd4:	e043      	b.n	800205e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd6:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fd8:	613b      	str	r3, [r7, #16]
      break;
 8001fda:	e043      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	0c9b      	lsrs	r3, r3, #18
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	4a24      	ldr	r2, [pc, #144]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	220f      	movs	r2, #15
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	4a22      	ldr	r2, [pc, #136]	@ (800207c <HAL_RCC_GetSysClockFreq+0xdc>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	23c0      	movs	r3, #192	@ 0xc0
 8001ffc:	025b      	lsls	r3, r3, #9
 8001ffe:	401a      	ands	r2, r3
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	025b      	lsls	r3, r3, #9
 8002004:	429a      	cmp	r2, r3
 8002006:	d109      	bne.n	800201c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	481a      	ldr	r0, [pc, #104]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xd4>)
 800200c:	f7fe f87c 	bl	8000108 <__udivsi3>
 8002010:	0003      	movs	r3, r0
 8002012:	001a      	movs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4353      	muls	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e01a      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	23c0      	movs	r3, #192	@ 0xc0
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	401a      	ands	r2, r3
 8002024:	23c0      	movs	r3, #192	@ 0xc0
 8002026:	025b      	lsls	r3, r3, #9
 8002028:	429a      	cmp	r2, r3
 800202a:	d109      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	4814      	ldr	r0, [pc, #80]	@ (8002080 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002030:	f7fe f86a 	bl	8000108 <__udivsi3>
 8002034:	0003      	movs	r3, r0
 8002036:	001a      	movs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4353      	muls	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e008      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	480c      	ldr	r0, [pc, #48]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002044:	f7fe f860 	bl	8000108 <__udivsi3>
 8002048:	0003      	movs	r3, r0
 800204a:	001a      	movs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4353      	muls	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	613b      	str	r3, [r7, #16]
      break;
 8002056:	e005      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_RCC_GetSysClockFreq+0xe0>)
 800205a:	613b      	str	r3, [r7, #16]
      break;
 800205c:	e002      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002060:	613b      	str	r3, [r7, #16]
      break;
 8002062:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002064:	693b      	ldr	r3, [r7, #16]
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b006      	add	sp, #24
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	40021000 	.word	0x40021000
 8002074:	007a1200 	.word	0x007a1200
 8002078:	0800459c 	.word	0x0800459c
 800207c:	080045ac 	.word	0x080045ac
 8002080:	02dc6c00 	.word	0x02dc6c00

08002084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002088:	4b02      	ldr	r3, [pc, #8]	@ (8002094 <HAL_RCC_GetHCLKFreq+0x10>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800209c:	f7ff fff2 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020a0:	0001      	movs	r1, r0
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	2207      	movs	r2, #7
 80020aa:	4013      	ands	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	000b      	movs	r3, r1
}    
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08004594 	.word	0x08004594

080020c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e042      	b.n	800215c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223d      	movs	r2, #61	@ 0x3d
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d107      	bne.n	80020f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	223c      	movs	r2, #60	@ 0x3c
 80020e6:	2100      	movs	r1, #0
 80020e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7fe fde5 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	223d      	movs	r2, #61	@ 0x3d
 80020f6:	2102      	movs	r1, #2
 80020f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3304      	adds	r3, #4
 8002102:	0019      	movs	r1, r3
 8002104:	0010      	movs	r0, r2
 8002106:	f000 fc4d 	bl	80029a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2246      	movs	r2, #70	@ 0x46
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	223e      	movs	r2, #62	@ 0x3e
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	223f      	movs	r2, #63	@ 0x3f
 800211e:	2101      	movs	r1, #1
 8002120:	5499      	strb	r1, [r3, r2]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2240      	movs	r2, #64	@ 0x40
 8002126:	2101      	movs	r1, #1
 8002128:	5499      	strb	r1, [r3, r2]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2241      	movs	r2, #65	@ 0x41
 800212e:	2101      	movs	r1, #1
 8002130:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2242      	movs	r2, #66	@ 0x42
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2243      	movs	r2, #67	@ 0x43
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2244      	movs	r2, #68	@ 0x44
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2245      	movs	r2, #69	@ 0x45
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	223d      	movs	r2, #61	@ 0x3d
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	223d      	movs	r2, #61	@ 0x3d
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d001      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e036      	b.n	80021ea <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	223d      	movs	r2, #61	@ 0x3d
 8002180:	2102      	movs	r1, #2
 8002182:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a16      	ldr	r2, [pc, #88]	@ (80021f4 <HAL_TIM_Base_Start_IT+0x90>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00a      	beq.n	80021b4 <HAL_TIM_Base_Start_IT+0x50>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	05db      	lsls	r3, r3, #23
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d004      	beq.n	80021b4 <HAL_TIM_Base_Start_IT+0x50>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <HAL_TIM_Base_Start_IT+0x94>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d111      	bne.n	80021d8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2207      	movs	r2, #7
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d010      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d6:	e007      	b.n	80021e8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b004      	add	sp, #16
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	40012c00 	.word	0x40012c00
 80021f8:	40000400 	.word	0x40000400

080021fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e042      	b.n	8002294 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	223d      	movs	r2, #61	@ 0x3d
 8002212:	5c9b      	ldrb	r3, [r3, r2]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223c      	movs	r2, #60	@ 0x3c
 800221e:	2100      	movs	r1, #0
 8002220:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 f839 	bl	800229c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223d      	movs	r2, #61	@ 0x3d
 800222e:	2102      	movs	r1, #2
 8002230:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	0019      	movs	r1, r3
 800223c:	0010      	movs	r0, r2
 800223e:	f000 fbb1 	bl	80029a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2246      	movs	r2, #70	@ 0x46
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223e      	movs	r2, #62	@ 0x3e
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	223f      	movs	r2, #63	@ 0x3f
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2240      	movs	r2, #64	@ 0x40
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2241      	movs	r2, #65	@ 0x41
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2242      	movs	r2, #66	@ 0x42
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2243      	movs	r2, #67	@ 0x43
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2244      	movs	r2, #68	@ 0x44
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2245      	movs	r2, #69	@ 0x45
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223d      	movs	r2, #61	@ 0x3d
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <HAL_TIM_PWM_Start+0x22>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	223e      	movs	r2, #62	@ 0x3e
 80022c0:	5c9b      	ldrb	r3, [r3, r2]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	1e5a      	subs	r2, r3, #1
 80022c8:	4193      	sbcs	r3, r2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e01f      	b.n	800230e <HAL_TIM_PWM_Start+0x62>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d108      	bne.n	80022e6 <HAL_TIM_PWM_Start+0x3a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	223f      	movs	r2, #63	@ 0x3f
 80022d8:	5c9b      	ldrb	r3, [r3, r2]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	4193      	sbcs	r3, r2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	e013      	b.n	800230e <HAL_TIM_PWM_Start+0x62>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d108      	bne.n	80022fe <HAL_TIM_PWM_Start+0x52>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2240      	movs	r2, #64	@ 0x40
 80022f0:	5c9b      	ldrb	r3, [r3, r2]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	1e5a      	subs	r2, r3, #1
 80022f8:	4193      	sbcs	r3, r2
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	e007      	b.n	800230e <HAL_TIM_PWM_Start+0x62>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2241      	movs	r2, #65	@ 0x41
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	4193      	sbcs	r3, r2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06a      	b.n	80023ec <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <HAL_TIM_PWM_Start+0x7a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	223e      	movs	r2, #62	@ 0x3e
 8002320:	2102      	movs	r1, #2
 8002322:	5499      	strb	r1, [r3, r2]
 8002324:	e013      	b.n	800234e <HAL_TIM_PWM_Start+0xa2>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d104      	bne.n	8002336 <HAL_TIM_PWM_Start+0x8a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	223f      	movs	r2, #63	@ 0x3f
 8002330:	2102      	movs	r1, #2
 8002332:	5499      	strb	r1, [r3, r2]
 8002334:	e00b      	b.n	800234e <HAL_TIM_PWM_Start+0xa2>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d104      	bne.n	8002346 <HAL_TIM_PWM_Start+0x9a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2240      	movs	r2, #64	@ 0x40
 8002340:	2102      	movs	r1, #2
 8002342:	5499      	strb	r1, [r3, r2]
 8002344:	e003      	b.n	800234e <HAL_TIM_PWM_Start+0xa2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2241      	movs	r2, #65	@ 0x41
 800234a:	2102      	movs	r1, #2
 800234c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fe14 	bl	8002f84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a24      	ldr	r2, [pc, #144]	@ (80023f4 <HAL_TIM_PWM_Start+0x148>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_TIM_PWM_Start+0xce>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a23      	ldr	r2, [pc, #140]	@ (80023f8 <HAL_TIM_PWM_Start+0x14c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_TIM_PWM_Start+0xce>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a21      	ldr	r2, [pc, #132]	@ (80023fc <HAL_TIM_PWM_Start+0x150>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_TIM_PWM_Start+0xd2>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_TIM_PWM_Start+0xd4>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2180      	movs	r1, #128	@ 0x80
 8002390:	0209      	lsls	r1, r1, #8
 8002392:	430a      	orrs	r2, r1
 8002394:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a16      	ldr	r2, [pc, #88]	@ (80023f4 <HAL_TIM_PWM_Start+0x148>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00a      	beq.n	80023b6 <HAL_TIM_PWM_Start+0x10a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	05db      	lsls	r3, r3, #23
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d004      	beq.n	80023b6 <HAL_TIM_PWM_Start+0x10a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <HAL_TIM_PWM_Start+0x154>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d111      	bne.n	80023da <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2207      	movs	r2, #7
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d010      	beq.n	80023ea <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d8:	e007      	b.n	80023ea <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40014400 	.word	0x40014400
 80023fc:	40014800 	.word	0x40014800
 8002400:	40000400 	.word	0x40000400

08002404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d124      	bne.n	8002464 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2202      	movs	r2, #2
 8002422:	4013      	ands	r3, r2
 8002424:	2b02      	cmp	r3, #2
 8002426:	d11d      	bne.n	8002464 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2203      	movs	r2, #3
 800242e:	4252      	negs	r2, r2
 8002430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2203      	movs	r2, #3
 8002440:	4013      	ands	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0018      	movs	r0, r3
 8002448:	f000 fa94 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 800244c:	e007      	b.n	800245e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f000 fa87 	bl	8002964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 fa93 	bl	8002984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2204      	movs	r2, #4
 800246c:	4013      	ands	r3, r2
 800246e:	2b04      	cmp	r3, #4
 8002470:	d125      	bne.n	80024be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2204      	movs	r2, #4
 800247a:	4013      	ands	r3, r2
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11e      	bne.n	80024be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2205      	movs	r2, #5
 8002486:	4252      	negs	r2, r2
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	23c0      	movs	r3, #192	@ 0xc0
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 fa67 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80024a6:	e007      	b.n	80024b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fa5a 	bl	8002964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 fa66 	bl	8002984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d124      	bne.n	8002516 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2208      	movs	r2, #8
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d11d      	bne.n	8002516 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2209      	movs	r2, #9
 80024e0:	4252      	negs	r2, r2
 80024e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2204      	movs	r2, #4
 80024e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2203      	movs	r2, #3
 80024f2:	4013      	ands	r3, r2
 80024f4:	d004      	beq.n	8002500 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 fa3b 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80024fe:	e007      	b.n	8002510 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	0018      	movs	r0, r3
 8002504:	f000 fa2e 	bl	8002964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fa3a 	bl	8002984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2210      	movs	r2, #16
 800251e:	4013      	ands	r3, r2
 8002520:	2b10      	cmp	r3, #16
 8002522:	d125      	bne.n	8002570 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2210      	movs	r2, #16
 800252c:	4013      	ands	r3, r2
 800252e:	2b10      	cmp	r3, #16
 8002530:	d11e      	bne.n	8002570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2211      	movs	r2, #17
 8002538:	4252      	negs	r2, r2
 800253a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2208      	movs	r2, #8
 8002540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	23c0      	movs	r3, #192	@ 0xc0
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fa0e 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002558:	e007      	b.n	800256a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 fa01 	bl	8002964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fa0d 	bl	8002984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2201      	movs	r2, #1
 8002578:	4013      	ands	r3, r2
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10f      	bne.n	800259e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	4013      	ands	r3, r2
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2202      	movs	r2, #2
 8002592:	4252      	negs	r2, r2
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0018      	movs	r0, r3
 800259a:	f7fe fafd 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2280      	movs	r2, #128	@ 0x80
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b80      	cmp	r3, #128	@ 0x80
 80025aa:	d10f      	bne.n	80025cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b80      	cmp	r3, #128	@ 0x80
 80025b8:	d108      	bne.n	80025cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2281      	movs	r2, #129	@ 0x81
 80025c0:	4252      	negs	r2, r2
 80025c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 fdbe 	bl	8003148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2240      	movs	r2, #64	@ 0x40
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b40      	cmp	r3, #64	@ 0x40
 80025d8:	d10f      	bne.n	80025fa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2240      	movs	r2, #64	@ 0x40
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b40      	cmp	r3, #64	@ 0x40
 80025e6:	d108      	bne.n	80025fa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2241      	movs	r2, #65	@ 0x41
 80025ee:	4252      	negs	r2, r2
 80025f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 f9cd 	bl	8002994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2220      	movs	r2, #32
 8002602:	4013      	ands	r3, r2
 8002604:	2b20      	cmp	r3, #32
 8002606:	d10f      	bne.n	8002628 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	2b20      	cmp	r3, #32
 8002614:	d108      	bne.n	8002628 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2221      	movs	r2, #33	@ 0x21
 800261c:	4252      	negs	r2, r2
 800261e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 fd88 	bl	8003138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002628:	46c0      	nop			@ (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263c:	2317      	movs	r3, #23
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	223c      	movs	r2, #60	@ 0x3c
 8002648:	5c9b      	ldrb	r3, [r3, r2]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x22>
 800264e:	2302      	movs	r3, #2
 8002650:	e0ad      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	223c      	movs	r2, #60	@ 0x3c
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0c      	cmp	r3, #12
 800265e:	d100      	bne.n	8002662 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002660:	e076      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b0c      	cmp	r3, #12
 8002666:	d900      	bls.n	800266a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002668:	e095      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x166>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d04e      	beq.n	800270e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b08      	cmp	r3, #8
 8002674:	d900      	bls.n	8002678 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002676:	e08e      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x56>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b04      	cmp	r3, #4
 8002682:	d021      	beq.n	80026c8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002684:	e087      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f9fe 	bl	8002a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2108      	movs	r1, #8
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2104      	movs	r1, #4
 80026b0:	438a      	bics	r2, r1
 80026b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6999      	ldr	r1, [r3, #24]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	619a      	str	r2, [r3, #24]
      break;
 80026c6:	e06b      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 fa5b 	bl	8002b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2180      	movs	r1, #128	@ 0x80
 80026e2:	0109      	lsls	r1, r1, #4
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4931      	ldr	r1, [pc, #196]	@ (80027b8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	021a      	lsls	r2, r3, #8
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	619a      	str	r2, [r3, #24]
      break;
 800270c:	e048      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	0011      	movs	r1, r2
 8002716:	0018      	movs	r0, r3
 8002718:	f000 fab6 	bl	8002c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2108      	movs	r1, #8
 8002728:	430a      	orrs	r2, r1
 800272a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2104      	movs	r1, #4
 8002738:	438a      	bics	r2, r1
 800273a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69d9      	ldr	r1, [r3, #28]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	61da      	str	r2, [r3, #28]
      break;
 800274e:	e027      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fb15 	bl	8002d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2180      	movs	r1, #128	@ 0x80
 800276a:	0109      	lsls	r1, r1, #4
 800276c:	430a      	orrs	r2, r1
 800276e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	490f      	ldr	r1, [pc, #60]	@ (80027b8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800277c:	400a      	ands	r2, r1
 800277e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69d9      	ldr	r1, [r3, #28]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	021a      	lsls	r2, r3, #8
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	61da      	str	r2, [r3, #28]
      break;
 8002794:	e004      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002796:	2317      	movs	r3, #23
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
      break;
 800279e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	223c      	movs	r2, #60	@ 0x3c
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

  return status;
 80027a8:	2317      	movs	r3, #23
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b006      	add	sp, #24
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	fffffbff 	.word	0xfffffbff

080027bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	230f      	movs	r3, #15
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223c      	movs	r2, #60	@ 0x3c
 80027d2:	5c9b      	ldrb	r3, [r3, r2]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_TIM_ConfigClockSource+0x20>
 80027d8:	2302      	movs	r3, #2
 80027da:	e0bc      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x19a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	223c      	movs	r2, #60	@ 0x3c
 80027e0:	2101      	movs	r1, #1
 80027e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	223d      	movs	r2, #61	@ 0x3d
 80027e8:	2102      	movs	r1, #2
 80027ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2277      	movs	r2, #119	@ 0x77
 80027f8:	4393      	bics	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4a58      	ldr	r2, [pc, #352]	@ (8002960 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	0192      	lsls	r2, r2, #6
 8002814:	4293      	cmp	r3, r2
 8002816:	d040      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xde>
 8002818:	2280      	movs	r2, #128	@ 0x80
 800281a:	0192      	lsls	r2, r2, #6
 800281c:	4293      	cmp	r3, r2
 800281e:	d900      	bls.n	8002822 <HAL_TIM_ConfigClockSource+0x66>
 8002820:	e088      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
 8002822:	2280      	movs	r2, #128	@ 0x80
 8002824:	0152      	lsls	r2, r2, #5
 8002826:	4293      	cmp	r3, r2
 8002828:	d100      	bne.n	800282c <HAL_TIM_ConfigClockSource+0x70>
 800282a:	e088      	b.n	800293e <HAL_TIM_ConfigClockSource+0x182>
 800282c:	2280      	movs	r2, #128	@ 0x80
 800282e:	0152      	lsls	r2, r2, #5
 8002830:	4293      	cmp	r3, r2
 8002832:	d900      	bls.n	8002836 <HAL_TIM_ConfigClockSource+0x7a>
 8002834:	e07e      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
 8002836:	2b70      	cmp	r3, #112	@ 0x70
 8002838:	d018      	beq.n	800286c <HAL_TIM_ConfigClockSource+0xb0>
 800283a:	d900      	bls.n	800283e <HAL_TIM_ConfigClockSource+0x82>
 800283c:	e07a      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
 800283e:	2b60      	cmp	r3, #96	@ 0x60
 8002840:	d04f      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x126>
 8002842:	d900      	bls.n	8002846 <HAL_TIM_ConfigClockSource+0x8a>
 8002844:	e076      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
 8002846:	2b50      	cmp	r3, #80	@ 0x50
 8002848:	d03b      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x106>
 800284a:	d900      	bls.n	800284e <HAL_TIM_ConfigClockSource+0x92>
 800284c:	e072      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
 800284e:	2b40      	cmp	r3, #64	@ 0x40
 8002850:	d057      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x146>
 8002852:	d900      	bls.n	8002856 <HAL_TIM_ConfigClockSource+0x9a>
 8002854:	e06e      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
 8002856:	2b30      	cmp	r3, #48	@ 0x30
 8002858:	d063      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x166>
 800285a:	d86b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d060      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x166>
 8002860:	d868      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d05d      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x166>
 8002866:	2b10      	cmp	r3, #16
 8002868:	d05b      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x166>
 800286a:	e063      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800287c:	f000 fb62 	bl	8002f44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2277      	movs	r2, #119	@ 0x77
 800288c:	4313      	orrs	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	609a      	str	r2, [r3, #8]
      break;
 8002898:	e052      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028aa:	f000 fb4b 	bl	8002f44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2180      	movs	r1, #128	@ 0x80
 80028ba:	01c9      	lsls	r1, r1, #7
 80028bc:	430a      	orrs	r2, r1
 80028be:	609a      	str	r2, [r3, #8]
      break;
 80028c0:	e03e      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	001a      	movs	r2, r3
 80028d0:	f000 fabe 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2150      	movs	r1, #80	@ 0x50
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fb18 	bl	8002f10 <TIM_ITRx_SetConfig>
      break;
 80028e0:	e02e      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	001a      	movs	r2, r3
 80028f0:	f000 fadc 	bl	8002eac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2160      	movs	r1, #96	@ 0x60
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fb08 	bl	8002f10 <TIM_ITRx_SetConfig>
      break;
 8002900:	e01e      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	001a      	movs	r2, r3
 8002910:	f000 fa9e 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2140      	movs	r1, #64	@ 0x40
 800291a:	0018      	movs	r0, r3
 800291c:	f000 faf8 	bl	8002f10 <TIM_ITRx_SetConfig>
      break;
 8002920:	e00e      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0019      	movs	r1, r3
 800292c:	0010      	movs	r0, r2
 800292e:	f000 faef 	bl	8002f10 <TIM_ITRx_SetConfig>
      break;
 8002932:	e005      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002934:	230f      	movs	r3, #15
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
      break;
 800293c:	e000      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800293e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	223d      	movs	r2, #61	@ 0x3d
 8002944:	2101      	movs	r1, #1
 8002946:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	223c      	movs	r2, #60	@ 0x3c
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]

  return status;
 8002950:	230f      	movs	r3, #15
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	781b      	ldrb	r3, [r3, #0]
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	ffff00ff 	.word	0xffff00ff

08002964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297c:	46c0      	nop			@ (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800298c:	46c0      	nop			@ (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800299c:	46c0      	nop			@ (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a30      	ldr	r2, [pc, #192]	@ (8002a78 <TIM_Base_SetConfig+0xd4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d008      	beq.n	80029ce <TIM_Base_SetConfig+0x2a>
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	05db      	lsls	r3, r3, #23
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d003      	beq.n	80029ce <TIM_Base_SetConfig+0x2a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a7c <TIM_Base_SetConfig+0xd8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d108      	bne.n	80029e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2270      	movs	r2, #112	@ 0x70
 80029d2:	4393      	bics	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a25      	ldr	r2, [pc, #148]	@ (8002a78 <TIM_Base_SetConfig+0xd4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d014      	beq.n	8002a12 <TIM_Base_SetConfig+0x6e>
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d00f      	beq.n	8002a12 <TIM_Base_SetConfig+0x6e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a21      	ldr	r2, [pc, #132]	@ (8002a7c <TIM_Base_SetConfig+0xd8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_Base_SetConfig+0x6e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a20      	ldr	r2, [pc, #128]	@ (8002a80 <TIM_Base_SetConfig+0xdc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <TIM_Base_SetConfig+0x6e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <TIM_Base_SetConfig+0xe0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_Base_SetConfig+0x6e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a88 <TIM_Base_SetConfig+0xe4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d108      	bne.n	8002a24 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	@ (8002a8c <TIM_Base_SetConfig+0xe8>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2280      	movs	r2, #128	@ 0x80
 8002a28:	4393      	bics	r3, r2
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <TIM_Base_SetConfig+0xd4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <TIM_Base_SetConfig+0xbe>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a0b      	ldr	r2, [pc, #44]	@ (8002a84 <TIM_Base_SetConfig+0xe0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d003      	beq.n	8002a62 <TIM_Base_SetConfig+0xbe>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <TIM_Base_SetConfig+0xe4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d103      	bne.n	8002a6a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	615a      	str	r2, [r3, #20]
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40002000 	.word	0x40002000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	fffffcff 	.word	0xfffffcff

08002a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2270      	movs	r2, #112	@ 0x70
 8002abe:	4393      	bics	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4393      	bics	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4393      	bics	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	@ (8002b78 <TIM_OC1_SetConfig+0xe8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <TIM_OC1_SetConfig+0x6e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a22      	ldr	r2, [pc, #136]	@ (8002b7c <TIM_OC1_SetConfig+0xec>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d003      	beq.n	8002afe <TIM_OC1_SetConfig+0x6e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a21      	ldr	r2, [pc, #132]	@ (8002b80 <TIM_OC1_SetConfig+0xf0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10c      	bne.n	8002b18 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2208      	movs	r2, #8
 8002b02:	4393      	bics	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2204      	movs	r2, #4
 8002b14:	4393      	bics	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <TIM_OC1_SetConfig+0xe8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d007      	beq.n	8002b30 <TIM_OC1_SetConfig+0xa0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <TIM_OC1_SetConfig+0xec>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d003      	beq.n	8002b30 <TIM_OC1_SetConfig+0xa0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <TIM_OC1_SetConfig+0xf0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d111      	bne.n	8002b54 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <TIM_OC1_SetConfig+0xf4>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <TIM_OC1_SetConfig+0xf8>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	621a      	str	r2, [r3, #32]
}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b006      	add	sp, #24
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40014400 	.word	0x40014400
 8002b80:	40014800 	.word	0x40014800
 8002b84:	fffffeff 	.word	0xfffffeff
 8002b88:	fffffdff 	.word	0xfffffdff

08002b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c6c <TIM_OC2_SetConfig+0xe0>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c70 <TIM_OC2_SetConfig+0xe4>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <TIM_OC2_SetConfig+0xe8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10d      	bne.n	8002c0a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	4393      	bics	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2240      	movs	r2, #64	@ 0x40
 8002c06:	4393      	bics	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	@ (8002c74 <TIM_OC2_SetConfig+0xe8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <TIM_OC2_SetConfig+0x96>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <TIM_OC2_SetConfig+0xec>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_OC2_SetConfig+0x96>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <TIM_OC2_SetConfig+0xf0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d113      	bne.n	8002c4a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <TIM_OC2_SetConfig+0xf4>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <TIM_OC2_SetConfig+0xf8>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	621a      	str	r2, [r3, #32]
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	ffff8fff 	.word	0xffff8fff
 8002c70:	fffffcff 	.word	0xfffffcff
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800
 8002c80:	fffffbff 	.word	0xfffffbff
 8002c84:	fffff7ff 	.word	0xfffff7ff

08002c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a33      	ldr	r2, [pc, #204]	@ (8002d64 <TIM_OC3_SetConfig+0xdc>)
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2270      	movs	r2, #112	@ 0x70
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	@ (8002d68 <TIM_OC3_SetConfig+0xe0>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a22      	ldr	r2, [pc, #136]	@ (8002d6c <TIM_OC3_SetConfig+0xe4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10d      	bne.n	8002d02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	4a21      	ldr	r2, [pc, #132]	@ (8002d70 <TIM_OC3_SetConfig+0xe8>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d74 <TIM_OC3_SetConfig+0xec>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a19      	ldr	r2, [pc, #100]	@ (8002d6c <TIM_OC3_SetConfig+0xe4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <TIM_OC3_SetConfig+0x92>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002d78 <TIM_OC3_SetConfig+0xf0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_OC3_SetConfig+0x92>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a19      	ldr	r2, [pc, #100]	@ (8002d7c <TIM_OC3_SetConfig+0xf4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d113      	bne.n	8002d42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4a18      	ldr	r2, [pc, #96]	@ (8002d80 <TIM_OC3_SetConfig+0xf8>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4a17      	ldr	r2, [pc, #92]	@ (8002d84 <TIM_OC3_SetConfig+0xfc>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	621a      	str	r2, [r3, #32]
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b006      	add	sp, #24
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	fffffeff 	.word	0xfffffeff
 8002d68:	fffffdff 	.word	0xfffffdff
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	fffff7ff 	.word	0xfffff7ff
 8002d74:	fffffbff 	.word	0xfffffbff
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800
 8002d80:	ffffefff 	.word	0xffffefff
 8002d84:	ffffdfff 	.word	0xffffdfff

08002d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a26      	ldr	r2, [pc, #152]	@ (8002e30 <TIM_OC4_SetConfig+0xa8>)
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a20      	ldr	r2, [pc, #128]	@ (8002e34 <TIM_OC4_SetConfig+0xac>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <TIM_OC4_SetConfig+0xb0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <TIM_OC4_SetConfig+0xb4>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	031b      	lsls	r3, r3, #12
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a17      	ldr	r2, [pc, #92]	@ (8002e40 <TIM_OC4_SetConfig+0xb8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <TIM_OC4_SetConfig+0x70>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <TIM_OC4_SetConfig+0xbc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_OC4_SetConfig+0x70>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <TIM_OC4_SetConfig+0xc0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d109      	bne.n	8002e0c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <TIM_OC4_SetConfig+0xc4>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b006      	add	sp, #24
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	ffffefff 	.word	0xffffefff
 8002e34:	ffff8fff 	.word	0xffff8fff
 8002e38:	fffffcff 	.word	0xfffffcff
 8002e3c:	ffffdfff 	.word	0xffffdfff
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800
 8002e4c:	ffffbfff 	.word	0xffffbfff

08002e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	2201      	movs	r2, #1
 8002e68:	4393      	bics	r3, r2
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	22f0      	movs	r2, #240	@ 0xf0
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	220a      	movs	r2, #10
 8002e8c:	4393      	bics	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	621a      	str	r2, [r3, #32]
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b006      	add	sp, #24
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f0c <TIM_TI2_ConfigInputStage+0x60>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	031b      	lsls	r3, r3, #12
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	22a0      	movs	r2, #160	@ 0xa0
 8002ee8:	4393      	bics	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b006      	add	sp, #24
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	ffff0fff 	.word	0xffff0fff

08002f10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2270      	movs	r2, #112	@ 0x70
 8002f24:	4393      	bics	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	2207      	movs	r2, #7
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	609a      	str	r2, [r3, #8]
}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b004      	add	sp, #16
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4a09      	ldr	r2, [pc, #36]	@ (8002f80 <TIM_ETR_SetConfig+0x3c>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	021a      	lsls	r2, r3, #8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b006      	add	sp, #24
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	ffff00ff 	.word	0xffff00ff

08002f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	221f      	movs	r2, #31
 8002f94:	4013      	ands	r3, r2
 8002f96:	2201      	movs	r2, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	43d2      	mvns	r2, r2
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1a      	ldr	r2, [r3, #32]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	211f      	movs	r1, #31
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4099      	lsls	r1, r3
 8002fba:	000b      	movs	r3, r1
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b006      	add	sp, #24
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	223c      	movs	r2, #60	@ 0x3c
 8002fda:	5c9b      	ldrb	r3, [r3, r2]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e042      	b.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	223c      	movs	r2, #60	@ 0x3c
 8002fe8:	2101      	movs	r1, #1
 8002fea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	223d      	movs	r2, #61	@ 0x3d
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2270      	movs	r2, #112	@ 0x70
 8003008:	4393      	bics	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a14      	ldr	r2, [pc, #80]	@ (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00a      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	05db      	lsls	r3, r3, #23
 8003030:	429a      	cmp	r2, r3
 8003032:	d004      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0f      	ldr	r2, [pc, #60]	@ (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10c      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2280      	movs	r2, #128	@ 0x80
 8003042:	4393      	bics	r3, r2
 8003044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4313      	orrs	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	223d      	movs	r2, #61	@ 0x3d
 800305c:	2101      	movs	r1, #1
 800305e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	223c      	movs	r2, #60	@ 0x3c
 8003064:	2100      	movs	r1, #0
 8003066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b004      	add	sp, #16
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40000400 	.word	0x40000400

0800307c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	223c      	movs	r2, #60	@ 0x3c
 800308e:	5c9b      	ldrb	r3, [r3, r2]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003094:	2302      	movs	r3, #2
 8003096:	e03e      	b.n	8003116 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	223c      	movs	r2, #60	@ 0x3c
 800309c:	2101      	movs	r1, #1
 800309e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	22ff      	movs	r2, #255	@ 0xff
 80030a4:	4393      	bics	r3, r2
 80030a6:	001a      	movs	r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80030b4:	401a      	ands	r2, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80030c2:	401a      	ands	r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a16      	ldr	r2, [pc, #88]	@ (8003128 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80030d0:	401a      	ands	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a13      	ldr	r2, [pc, #76]	@ (800312c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80030de:	401a      	ands	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a11      	ldr	r2, [pc, #68]	@ (8003130 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80030ec:	401a      	ands	r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003134 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80030fa:	401a      	ands	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	223c      	movs	r2, #60	@ 0x3c
 8003110:	2100      	movs	r1, #0
 8003112:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b004      	add	sp, #16
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	fffffcff 	.word	0xfffffcff
 8003124:	fffffbff 	.word	0xfffffbff
 8003128:	fffff7ff 	.word	0xfffff7ff
 800312c:	ffffefff 	.word	0xffffefff
 8003130:	ffffdfff 	.word	0xffffdfff
 8003134:	ffffbfff 	.word	0xffffbfff

08003138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003140:	46c0      	nop			@ (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b002      	add	sp, #8
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003150:	46c0      	nop			@ (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e044      	b.n	80031f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d107      	bne.n	8003182 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2278      	movs	r2, #120	@ 0x78
 8003176:	2100      	movs	r1, #0
 8003178:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f7fd fe7d 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2224      	movs	r2, #36	@ 0x24
 8003186:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2101      	movs	r1, #1
 8003194:	438a      	bics	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f000 fb84 	bl	80038a8 <UART_SetConfig>
 80031a0:	0003      	movs	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e024      	b.n	80031f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 fcb7 	bl	8003b28 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	490d      	ldr	r1, [pc, #52]	@ (80031fc <HAL_UART_Init+0xa4>)
 80031c6:	400a      	ands	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	212a      	movs	r1, #42	@ 0x2a
 80031d6:	438a      	bics	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	430a      	orrs	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 fd4f 	bl	8003c90 <UART_CheckIdleState>
 80031f2:	0003      	movs	r3, r0
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	ffffb7ff 	.word	0xffffb7ff

08003200 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	1dbb      	adds	r3, r7, #6
 800320c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	589b      	ldr	r3, [r3, r2]
 8003214:	2b20      	cmp	r3, #32
 8003216:	d145      	bne.n	80032a4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_UART_Receive_IT+0x26>
 800321e:	1dbb      	adds	r3, r7, #6
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e03d      	b.n	80032a6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	2380      	movs	r3, #128	@ 0x80
 8003230:	015b      	lsls	r3, r3, #5
 8003232:	429a      	cmp	r2, r3
 8003234:	d109      	bne.n	800324a <HAL_UART_Receive_IT+0x4a>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	d001      	beq.n	800324a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e02d      	b.n	80032a6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	4013      	ands	r3, r2
 800325c:	d019      	beq.n	8003292 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325e:	f3ef 8310 	mrs	r3, PRIMASK
 8003262:	613b      	str	r3, [r7, #16]
  return(result);
 8003264:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	2301      	movs	r3, #1
 800326a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f383 8810 	msr	PRIMASK, r3
}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2180      	movs	r1, #128	@ 0x80
 8003280:	04c9      	lsls	r1, r1, #19
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f383 8810 	msr	PRIMASK, r3
}
 8003290:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003292:	1dbb      	adds	r3, r7, #6
 8003294:	881a      	ldrh	r2, [r3, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	0018      	movs	r0, r3
 800329c:	f000 fe0a 	bl	8003eb4 <UART_Start_Receive_IT>
 80032a0:	0003      	movs	r3, r0
 80032a2:	e000      	b.n	80032a6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b008      	add	sp, #32
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b0ab      	sub	sp, #172	@ 0xac
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	22a4      	movs	r2, #164	@ 0xa4
 80032c0:	18b9      	adds	r1, r7, r2
 80032c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	20a0      	movs	r0, #160	@ 0xa0
 80032cc:	1839      	adds	r1, r7, r0
 80032ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	219c      	movs	r1, #156	@ 0x9c
 80032d8:	1879      	adds	r1, r7, r1
 80032da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032dc:	0011      	movs	r1, r2
 80032de:	18bb      	adds	r3, r7, r2
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a99      	ldr	r2, [pc, #612]	@ (8003548 <HAL_UART_IRQHandler+0x298>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	2298      	movs	r2, #152	@ 0x98
 80032e8:	18bc      	adds	r4, r7, r2
 80032ea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80032ec:	18bb      	adds	r3, r7, r2
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d114      	bne.n	800331e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2220      	movs	r2, #32
 80032fa:	4013      	ands	r3, r2
 80032fc:	d00f      	beq.n	800331e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2220      	movs	r2, #32
 8003304:	4013      	ands	r3, r2
 8003306:	d00a      	beq.n	800331e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800330c:	2b00      	cmp	r3, #0
 800330e:	d100      	bne.n	8003312 <HAL_UART_IRQHandler+0x62>
 8003310:	e29e      	b.n	8003850 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	0010      	movs	r0, r2
 800331a:	4798      	blx	r3
      }
      return;
 800331c:	e298      	b.n	8003850 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800331e:	2398      	movs	r3, #152	@ 0x98
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d100      	bne.n	800332a <HAL_UART_IRQHandler+0x7a>
 8003328:	e114      	b.n	8003554 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800332a:	239c      	movs	r3, #156	@ 0x9c
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2201      	movs	r2, #1
 8003332:	4013      	ands	r3, r2
 8003334:	d106      	bne.n	8003344 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003336:	23a0      	movs	r3, #160	@ 0xa0
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a83      	ldr	r2, [pc, #524]	@ (800354c <HAL_UART_IRQHandler+0x29c>)
 800333e:	4013      	ands	r3, r2
 8003340:	d100      	bne.n	8003344 <HAL_UART_IRQHandler+0x94>
 8003342:	e107      	b.n	8003554 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003344:	23a4      	movs	r3, #164	@ 0xa4
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2201      	movs	r2, #1
 800334c:	4013      	ands	r3, r2
 800334e:	d012      	beq.n	8003376 <HAL_UART_IRQHandler+0xc6>
 8003350:	23a0      	movs	r3, #160	@ 0xa0
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4013      	ands	r3, r2
 800335c:	d00b      	beq.n	8003376 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2284      	movs	r2, #132	@ 0x84
 800336a:	589b      	ldr	r3, [r3, r2]
 800336c:	2201      	movs	r2, #1
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2184      	movs	r1, #132	@ 0x84
 8003374:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003376:	23a4      	movs	r3, #164	@ 0xa4
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2202      	movs	r2, #2
 800337e:	4013      	ands	r3, r2
 8003380:	d011      	beq.n	80033a6 <HAL_UART_IRQHandler+0xf6>
 8003382:	239c      	movs	r3, #156	@ 0x9c
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	4013      	ands	r3, r2
 800338c:	d00b      	beq.n	80033a6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2202      	movs	r2, #2
 8003394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2284      	movs	r2, #132	@ 0x84
 800339a:	589b      	ldr	r3, [r3, r2]
 800339c:	2204      	movs	r2, #4
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2184      	movs	r1, #132	@ 0x84
 80033a4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033a6:	23a4      	movs	r3, #164	@ 0xa4
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2204      	movs	r2, #4
 80033ae:	4013      	ands	r3, r2
 80033b0:	d011      	beq.n	80033d6 <HAL_UART_IRQHandler+0x126>
 80033b2:	239c      	movs	r3, #156	@ 0x9c
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2201      	movs	r2, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2204      	movs	r2, #4
 80033c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2284      	movs	r2, #132	@ 0x84
 80033ca:	589b      	ldr	r3, [r3, r2]
 80033cc:	2202      	movs	r2, #2
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2184      	movs	r1, #132	@ 0x84
 80033d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033d6:	23a4      	movs	r3, #164	@ 0xa4
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2208      	movs	r2, #8
 80033de:	4013      	ands	r3, r2
 80033e0:	d017      	beq.n	8003412 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033e2:	23a0      	movs	r3, #160	@ 0xa0
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2220      	movs	r2, #32
 80033ea:	4013      	ands	r3, r2
 80033ec:	d105      	bne.n	80033fa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033ee:	239c      	movs	r3, #156	@ 0x9c
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2201      	movs	r2, #1
 80033f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033f8:	d00b      	beq.n	8003412 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2208      	movs	r2, #8
 8003400:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2284      	movs	r2, #132	@ 0x84
 8003406:	589b      	ldr	r3, [r3, r2]
 8003408:	2208      	movs	r2, #8
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2184      	movs	r1, #132	@ 0x84
 8003410:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003412:	23a4      	movs	r3, #164	@ 0xa4
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	4013      	ands	r3, r2
 800341e:	d013      	beq.n	8003448 <HAL_UART_IRQHandler+0x198>
 8003420:	23a0      	movs	r3, #160	@ 0xa0
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	04db      	lsls	r3, r3, #19
 800342a:	4013      	ands	r3, r2
 800342c:	d00c      	beq.n	8003448 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2280      	movs	r2, #128	@ 0x80
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2284      	movs	r2, #132	@ 0x84
 800343c:	589b      	ldr	r3, [r3, r2]
 800343e:	2220      	movs	r2, #32
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2184      	movs	r1, #132	@ 0x84
 8003446:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2284      	movs	r2, #132	@ 0x84
 800344c:	589b      	ldr	r3, [r3, r2]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d100      	bne.n	8003454 <HAL_UART_IRQHandler+0x1a4>
 8003452:	e1ff      	b.n	8003854 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003454:	23a4      	movs	r3, #164	@ 0xa4
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2220      	movs	r2, #32
 800345c:	4013      	ands	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003460:	23a0      	movs	r3, #160	@ 0xa0
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2220      	movs	r2, #32
 8003468:	4013      	ands	r3, r2
 800346a:	d008      	beq.n	800347e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	0010      	movs	r0, r2
 800347c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2284      	movs	r2, #132	@ 0x84
 8003482:	589b      	ldr	r3, [r3, r2]
 8003484:	2194      	movs	r1, #148	@ 0x94
 8003486:	187a      	adds	r2, r7, r1
 8003488:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2240      	movs	r2, #64	@ 0x40
 8003492:	4013      	ands	r3, r2
 8003494:	2b40      	cmp	r3, #64	@ 0x40
 8003496:	d004      	beq.n	80034a2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003498:	187b      	adds	r3, r7, r1
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2228      	movs	r2, #40	@ 0x28
 800349e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034a0:	d047      	beq.n	8003532 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 fdcf 	bl	8004048 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2240      	movs	r2, #64	@ 0x40
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b40      	cmp	r3, #64	@ 0x40
 80034b6:	d137      	bne.n	8003528 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b8:	f3ef 8310 	mrs	r3, PRIMASK
 80034bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80034be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c0:	2090      	movs	r0, #144	@ 0x90
 80034c2:	183a      	adds	r2, r7, r0
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	2301      	movs	r3, #1
 80034c8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2140      	movs	r1, #64	@ 0x40
 80034de:	438a      	bics	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
 80034e2:	183b      	adds	r3, r7, r0
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ea:	f383 8810 	msr	PRIMASK, r3
}
 80034ee:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_UART_IRQHandler+0x2a0>)
 80034fe:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003504:	0018      	movs	r0, r3
 8003506:	f7fd ff03 	bl	8001310 <HAL_DMA_Abort_IT>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d01a      	beq.n	8003544 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003518:	0018      	movs	r0, r3
 800351a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e012      	b.n	8003544 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f000 f9ad 	bl	8003880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003526:	e00d      	b.n	8003544 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f9a8 	bl	8003880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	e008      	b.n	8003544 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	0018      	movs	r0, r3
 8003536:	f000 f9a3 	bl	8003880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2284      	movs	r2, #132	@ 0x84
 800353e:	2100      	movs	r1, #0
 8003540:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003542:	e187      	b.n	8003854 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	46c0      	nop			@ (mov r8, r8)
    return;
 8003546:	e185      	b.n	8003854 <HAL_UART_IRQHandler+0x5a4>
 8003548:	0000080f 	.word	0x0000080f
 800354c:	04000120 	.word	0x04000120
 8003550:	08004111 	.word	0x08004111

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003558:	2b01      	cmp	r3, #1
 800355a:	d000      	beq.n	800355e <HAL_UART_IRQHandler+0x2ae>
 800355c:	e139      	b.n	80037d2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800355e:	23a4      	movs	r3, #164	@ 0xa4
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2210      	movs	r2, #16
 8003566:	4013      	ands	r3, r2
 8003568:	d100      	bne.n	800356c <HAL_UART_IRQHandler+0x2bc>
 800356a:	e132      	b.n	80037d2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800356c:	23a0      	movs	r3, #160	@ 0xa0
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2210      	movs	r2, #16
 8003574:	4013      	ands	r3, r2
 8003576:	d100      	bne.n	800357a <HAL_UART_IRQHandler+0x2ca>
 8003578:	e12b      	b.n	80037d2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2210      	movs	r2, #16
 8003580:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2240      	movs	r2, #64	@ 0x40
 800358a:	4013      	ands	r3, r2
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d000      	beq.n	8003592 <HAL_UART_IRQHandler+0x2e2>
 8003590:	e09f      	b.n	80036d2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	217e      	movs	r1, #126	@ 0x7e
 800359c:	187b      	adds	r3, r7, r1
 800359e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d100      	bne.n	80035aa <HAL_UART_IRQHandler+0x2fa>
 80035a8:	e156      	b.n	8003858 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2258      	movs	r2, #88	@ 0x58
 80035ae:	5a9b      	ldrh	r3, [r3, r2]
 80035b0:	187a      	adds	r2, r7, r1
 80035b2:	8812      	ldrh	r2, [r2, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d300      	bcc.n	80035ba <HAL_UART_IRQHandler+0x30a>
 80035b8:	e14e      	b.n	8003858 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	187a      	adds	r2, r7, r1
 80035be:	215a      	movs	r1, #90	@ 0x5a
 80035c0:	8812      	ldrh	r2, [r2, #0]
 80035c2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d06f      	beq.n	80036ae <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ce:	f3ef 8310 	mrs	r3, PRIMASK
 80035d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80035d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035d8:	2301      	movs	r3, #1
 80035da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035de:	f383 8810 	msr	PRIMASK, r3
}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	499e      	ldr	r1, [pc, #632]	@ (8003868 <HAL_UART_IRQHandler+0x5b8>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fa:	f383 8810 	msr	PRIMASK, r3
}
 80035fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003600:	f3ef 8310 	mrs	r3, PRIMASK
 8003604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	677b      	str	r3, [r7, #116]	@ 0x74
 800360a:	2301      	movs	r3, #1
 800360c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003610:	f383 8810 	msr	PRIMASK, r3
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	438a      	bics	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003628:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362c:	f383 8810 	msr	PRIMASK, r3
}
 8003630:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003632:	f3ef 8310 	mrs	r3, PRIMASK
 8003636:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363a:	673b      	str	r3, [r7, #112]	@ 0x70
 800363c:	2301      	movs	r3, #1
 800363e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003642:	f383 8810 	msr	PRIMASK, r3
}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2140      	movs	r1, #64	@ 0x40
 8003654:	438a      	bics	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800365a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2280      	movs	r2, #128	@ 0x80
 8003668:	2120      	movs	r1, #32
 800366a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003672:	f3ef 8310 	mrs	r3, PRIMASK
 8003676:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800367c:	2301      	movs	r3, #1
 800367e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003682:	f383 8810 	msr	PRIMASK, r3
}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2110      	movs	r1, #16
 8003694:	438a      	bics	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800369a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7fd fdf9 	bl	80012a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2258      	movs	r2, #88	@ 0x58
 80036b8:	5a9a      	ldrh	r2, [r3, r2]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	215a      	movs	r1, #90	@ 0x5a
 80036be:	5a5b      	ldrh	r3, [r3, r1]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f000 f8e0 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036d0:	e0c2      	b.n	8003858 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2258      	movs	r2, #88	@ 0x58
 80036d6:	5a99      	ldrh	r1, [r3, r2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	225a      	movs	r2, #90	@ 0x5a
 80036dc:	5a9b      	ldrh	r3, [r3, r2]
 80036de:	b29a      	uxth	r2, r3
 80036e0:	208e      	movs	r0, #142	@ 0x8e
 80036e2:	183b      	adds	r3, r7, r0
 80036e4:	1a8a      	subs	r2, r1, r2
 80036e6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	225a      	movs	r2, #90	@ 0x5a
 80036ec:	5a9b      	ldrh	r3, [r3, r2]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d100      	bne.n	80036f6 <HAL_UART_IRQHandler+0x446>
 80036f4:	e0b2      	b.n	800385c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80036f6:	183b      	adds	r3, r7, r0
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d100      	bne.n	8003700 <HAL_UART_IRQHandler+0x450>
 80036fe:	e0ad      	b.n	800385c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003700:	f3ef 8310 	mrs	r3, PRIMASK
 8003704:	60fb      	str	r3, [r7, #12]
  return(result);
 8003706:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003708:	2488      	movs	r4, #136	@ 0x88
 800370a:	193a      	adds	r2, r7, r4
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	2301      	movs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4951      	ldr	r1, [pc, #324]	@ (800386c <HAL_UART_IRQHandler+0x5bc>)
 8003726:	400a      	ands	r2, r1
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	193b      	adds	r3, r7, r4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003738:	f3ef 8310 	mrs	r3, PRIMASK
 800373c:	61bb      	str	r3, [r7, #24]
  return(result);
 800373e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003740:	2484      	movs	r4, #132	@ 0x84
 8003742:	193a      	adds	r2, r7, r4
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	2301      	movs	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f383 8810 	msr	PRIMASK, r3
}
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	438a      	bics	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	193b      	adds	r3, r7, r4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f383 8810 	msr	PRIMASK, r3
}
 800376e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2280      	movs	r2, #128	@ 0x80
 8003774:	2120      	movs	r1, #32
 8003776:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003784:	f3ef 8310 	mrs	r3, PRIMASK
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378c:	2480      	movs	r4, #128	@ 0x80
 800378e:	193a      	adds	r2, r7, r4
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	2301      	movs	r3, #1
 8003794:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003798:	f383 8810 	msr	PRIMASK, r3
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2110      	movs	r1, #16
 80037aa:	438a      	bics	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037c2:	183b      	adds	r3, r7, r0
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0011      	movs	r1, r2
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f860 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037d0:	e044      	b.n	800385c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037d2:	23a4      	movs	r3, #164	@ 0xa4
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	2380      	movs	r3, #128	@ 0x80
 80037da:	035b      	lsls	r3, r3, #13
 80037dc:	4013      	ands	r3, r2
 80037de:	d010      	beq.n	8003802 <HAL_UART_IRQHandler+0x552>
 80037e0:	239c      	movs	r3, #156	@ 0x9c
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	03db      	lsls	r3, r3, #15
 80037ea:	4013      	ands	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2280      	movs	r2, #128	@ 0x80
 80037f4:	0352      	lsls	r2, r2, #13
 80037f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 fe82 	bl	8004504 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003800:	e02f      	b.n	8003862 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003802:	23a4      	movs	r3, #164	@ 0xa4
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2280      	movs	r2, #128	@ 0x80
 800380a:	4013      	ands	r3, r2
 800380c:	d00f      	beq.n	800382e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800380e:	23a0      	movs	r3, #160	@ 0xa0
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2280      	movs	r2, #128	@ 0x80
 8003816:	4013      	ands	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01e      	beq.n	8003860 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	0010      	movs	r0, r2
 800382a:	4798      	blx	r3
    }
    return;
 800382c:	e018      	b.n	8003860 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800382e:	23a4      	movs	r3, #164	@ 0xa4
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2240      	movs	r2, #64	@ 0x40
 8003836:	4013      	ands	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_UART_IRQHandler+0x5b2>
 800383a:	23a0      	movs	r3, #160	@ 0xa0
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2240      	movs	r2, #64	@ 0x40
 8003842:	4013      	ands	r3, r2
 8003844:	d00d      	beq.n	8003862 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	0018      	movs	r0, r3
 800384a:	f000 fc78 	bl	800413e <UART_EndTransmit_IT>
    return;
 800384e:	e008      	b.n	8003862 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	e006      	b.n	8003862 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	e004      	b.n	8003862 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	e002      	b.n	8003862 <HAL_UART_IRQHandler+0x5b2>
      return;
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	e000      	b.n	8003862 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003860:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003862:	46bd      	mov	sp, r7
 8003864:	b02b      	add	sp, #172	@ 0xac
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	fffffeff 	.word	0xfffffeff
 800386c:	fffffedf 	.word	0xfffffedf

08003870 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003878:	46c0      	nop			@ (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003888:	46c0      	nop			@ (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	000a      	movs	r2, r1
 800389a:	1cbb      	adds	r3, r7, #2
 800389c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b002      	add	sp, #8
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b0:	231e      	movs	r3, #30
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a8d      	ldr	r2, [pc, #564]	@ (8003b0c <UART_SetConfig+0x264>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a88      	ldr	r2, [pc, #544]	@ (8003b10 <UART_SetConfig+0x268>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	0019      	movs	r1, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a7f      	ldr	r2, [pc, #508]	@ (8003b14 <UART_SetConfig+0x26c>)
 8003916:	4013      	ands	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7b      	ldr	r2, [pc, #492]	@ (8003b18 <UART_SetConfig+0x270>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d127      	bne.n	800397e <UART_SetConfig+0xd6>
 800392e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b1c <UART_SetConfig+0x274>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	2203      	movs	r2, #3
 8003934:	4013      	ands	r3, r2
 8003936:	2b03      	cmp	r3, #3
 8003938:	d00d      	beq.n	8003956 <UART_SetConfig+0xae>
 800393a:	d81b      	bhi.n	8003974 <UART_SetConfig+0xcc>
 800393c:	2b02      	cmp	r3, #2
 800393e:	d014      	beq.n	800396a <UART_SetConfig+0xc2>
 8003940:	d818      	bhi.n	8003974 <UART_SetConfig+0xcc>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <UART_SetConfig+0xa4>
 8003946:	2b01      	cmp	r3, #1
 8003948:	d00a      	beq.n	8003960 <UART_SetConfig+0xb8>
 800394a:	e013      	b.n	8003974 <UART_SetConfig+0xcc>
 800394c:	231f      	movs	r3, #31
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e021      	b.n	800399a <UART_SetConfig+0xf2>
 8003956:	231f      	movs	r3, #31
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e01c      	b.n	800399a <UART_SetConfig+0xf2>
 8003960:	231f      	movs	r3, #31
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	2204      	movs	r2, #4
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e017      	b.n	800399a <UART_SetConfig+0xf2>
 800396a:	231f      	movs	r3, #31
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2208      	movs	r2, #8
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e012      	b.n	800399a <UART_SetConfig+0xf2>
 8003974:	231f      	movs	r3, #31
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2210      	movs	r2, #16
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e00d      	b.n	800399a <UART_SetConfig+0xf2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a67      	ldr	r2, [pc, #412]	@ (8003b20 <UART_SetConfig+0x278>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d104      	bne.n	8003992 <UART_SetConfig+0xea>
 8003988:	231f      	movs	r3, #31
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e003      	b.n	800399a <UART_SetConfig+0xf2>
 8003992:	231f      	movs	r3, #31
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2210      	movs	r2, #16
 8003998:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d15c      	bne.n	8003a60 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80039a6:	231f      	movs	r3, #31
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d015      	beq.n	80039dc <UART_SetConfig+0x134>
 80039b0:	dc18      	bgt.n	80039e4 <UART_SetConfig+0x13c>
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d00d      	beq.n	80039d2 <UART_SetConfig+0x12a>
 80039b6:	dc15      	bgt.n	80039e4 <UART_SetConfig+0x13c>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <UART_SetConfig+0x11a>
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d005      	beq.n	80039cc <UART_SetConfig+0x124>
 80039c0:	e010      	b.n	80039e4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c2:	f7fe fb69 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80039c6:	0003      	movs	r3, r0
 80039c8:	61bb      	str	r3, [r7, #24]
        break;
 80039ca:	e012      	b.n	80039f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b55      	ldr	r3, [pc, #340]	@ (8003b24 <UART_SetConfig+0x27c>)
 80039ce:	61bb      	str	r3, [r7, #24]
        break;
 80039d0:	e00f      	b.n	80039f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7fe fae5 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 80039d6:	0003      	movs	r3, r0
 80039d8:	61bb      	str	r3, [r7, #24]
        break;
 80039da:	e00a      	b.n	80039f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039dc:	2380      	movs	r3, #128	@ 0x80
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	61bb      	str	r3, [r7, #24]
        break;
 80039e2:	e006      	b.n	80039f2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039e8:	231e      	movs	r3, #30
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
        break;
 80039f0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d100      	bne.n	80039fa <UART_SetConfig+0x152>
 80039f8:	e07a      	b.n	8003af0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	005a      	lsls	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	18d2      	adds	r2, r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	0010      	movs	r0, r2
 8003a0e:	f7fc fb7b 	bl	8000108 <__udivsi3>
 8003a12:	0003      	movs	r3, r0
 8003a14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b0f      	cmp	r3, #15
 8003a1a:	d91c      	bls.n	8003a56 <UART_SetConfig+0x1ae>
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	025b      	lsls	r3, r3, #9
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d217      	bcs.n	8003a56 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	200e      	movs	r0, #14
 8003a2c:	183b      	adds	r3, r7, r0
 8003a2e:	210f      	movs	r1, #15
 8003a30:	438a      	bics	r2, r1
 8003a32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2207      	movs	r2, #7
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	b299      	uxth	r1, r3
 8003a40:	183b      	adds	r3, r7, r0
 8003a42:	183a      	adds	r2, r7, r0
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	183a      	adds	r2, r7, r0
 8003a50:	8812      	ldrh	r2, [r2, #0]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	e04c      	b.n	8003af0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003a56:	231e      	movs	r3, #30
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e047      	b.n	8003af0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a60:	231f      	movs	r3, #31
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d015      	beq.n	8003a96 <UART_SetConfig+0x1ee>
 8003a6a:	dc18      	bgt.n	8003a9e <UART_SetConfig+0x1f6>
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d00d      	beq.n	8003a8c <UART_SetConfig+0x1e4>
 8003a70:	dc15      	bgt.n	8003a9e <UART_SetConfig+0x1f6>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <UART_SetConfig+0x1d4>
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d005      	beq.n	8003a86 <UART_SetConfig+0x1de>
 8003a7a:	e010      	b.n	8003a9e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a7c:	f7fe fb0c 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8003a80:	0003      	movs	r3, r0
 8003a82:	61bb      	str	r3, [r7, #24]
        break;
 8003a84:	e012      	b.n	8003aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a86:	4b27      	ldr	r3, [pc, #156]	@ (8003b24 <UART_SetConfig+0x27c>)
 8003a88:	61bb      	str	r3, [r7, #24]
        break;
 8003a8a:	e00f      	b.n	8003aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8c:	f7fe fa88 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8003a90:	0003      	movs	r3, r0
 8003a92:	61bb      	str	r3, [r7, #24]
        break;
 8003a94:	e00a      	b.n	8003aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	61bb      	str	r3, [r7, #24]
        break;
 8003a9c:	e006      	b.n	8003aac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aa2:	231e      	movs	r3, #30
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
        break;
 8003aaa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01e      	beq.n	8003af0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	085a      	lsrs	r2, r3, #1
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	18d2      	adds	r2, r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	0010      	movs	r0, r2
 8003ac4:	f7fc fb20 	bl	8000108 <__udivsi3>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0f      	cmp	r3, #15
 8003ad0:	d90a      	bls.n	8003ae8 <UART_SetConfig+0x240>
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	2380      	movs	r3, #128	@ 0x80
 8003ad6:	025b      	lsls	r3, r3, #9
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d205      	bcs.n	8003ae8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	e003      	b.n	8003af0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae8:	231e      	movs	r3, #30
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003afc:	231e      	movs	r3, #30
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	781b      	ldrb	r3, [r3, #0]
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b008      	add	sp, #32
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	efff69f3 	.word	0xefff69f3
 8003b10:	ffffcfff 	.word	0xffffcfff
 8003b14:	fffff4ff 	.word	0xfffff4ff
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40004400 	.word	0x40004400
 8003b24:	007a1200 	.word	0x007a1200

08003b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	@ (8003c6c <UART_AdvFeatureConfig+0x144>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	2202      	movs	r2, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a43      	ldr	r2, [pc, #268]	@ (8003c70 <UART_AdvFeatureConfig+0x148>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	2204      	movs	r2, #4
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a3b      	ldr	r2, [pc, #236]	@ (8003c74 <UART_AdvFeatureConfig+0x14c>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	0019      	movs	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	@ (8003c78 <UART_AdvFeatureConfig+0x150>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c7c <UART_AdvFeatureConfig+0x154>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	2220      	movs	r2, #32
 8003be0:	4013      	ands	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4a25      	ldr	r2, [pc, #148]	@ (8003c80 <UART_AdvFeatureConfig+0x158>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	2240      	movs	r2, #64	@ 0x40
 8003c02:	4013      	ands	r3, r2
 8003c04:	d01d      	beq.n	8003c42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <UART_AdvFeatureConfig+0x15c>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	035b      	lsls	r3, r3, #13
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d10b      	bne.n	8003c42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a15      	ldr	r2, [pc, #84]	@ (8003c88 <UART_AdvFeatureConfig+0x160>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	2280      	movs	r2, #128	@ 0x80
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a0e      	ldr	r2, [pc, #56]	@ (8003c8c <UART_AdvFeatureConfig+0x164>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	fffdffff 	.word	0xfffdffff
 8003c70:	fffeffff 	.word	0xfffeffff
 8003c74:	fffbffff 	.word	0xfffbffff
 8003c78:	ffff7fff 	.word	0xffff7fff
 8003c7c:	ffffefff 	.word	0xffffefff
 8003c80:	ffffdfff 	.word	0xffffdfff
 8003c84:	ffefffff 	.word	0xffefffff
 8003c88:	ff9fffff 	.word	0xff9fffff
 8003c8c:	fff7ffff 	.word	0xfff7ffff

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b092      	sub	sp, #72	@ 0x48
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2284      	movs	r2, #132	@ 0x84
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd fa16 	bl	80010d0 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2208      	movs	r2, #8
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d12c      	bne.n	8003d10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb8:	2280      	movs	r2, #128	@ 0x80
 8003cba:	0391      	lsls	r1, r2, #14
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4a46      	ldr	r2, [pc, #280]	@ (8003dd8 <UART_CheckIdleState+0x148>)
 8003cc0:	9200      	str	r2, [sp, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f000 f88c 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d021      	beq.n	8003d10 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	438a      	bics	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2278      	movs	r2, #120	@ 0x78
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e05f      	b.n	8003dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2204      	movs	r2, #4
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d146      	bne.n	8003dac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d20:	2280      	movs	r2, #128	@ 0x80
 8003d22:	03d1      	lsls	r1, r2, #15
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd8 <UART_CheckIdleState+0x148>)
 8003d28:	9200      	str	r2, [sp, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f000 f858 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d03b      	beq.n	8003dac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d34:	f3ef 8310 	mrs	r3, PRIMASK
 8003d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3e:	2301      	movs	r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4921      	ldr	r1, [pc, #132]	@ (8003ddc <UART_CheckIdleState+0x14c>)
 8003d56:	400a      	ands	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d66:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d70:	2301      	movs	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f383 8810 	msr	PRIMASK, r3
}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2280      	movs	r2, #128	@ 0x80
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2278      	movs	r2, #120	@ 0x78
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e011      	b.n	8003dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2280      	movs	r2, #128	@ 0x80
 8003db6:	2120      	movs	r1, #32
 8003db8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2278      	movs	r2, #120	@ 0x78
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b010      	add	sp, #64	@ 0x40
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	01ffffff 	.word	0x01ffffff
 8003ddc:	fffffedf 	.word	0xfffffedf

08003de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df0:	e04b      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	3301      	adds	r3, #1
 8003df6:	d048      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df8:	f7fd f96a 	bl	80010d0 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04b      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d035      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	2208      	movs	r2, #8
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d111      	bne.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2208      	movs	r2, #8
 8003e32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 f906 	bl	8004048 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2284      	movs	r2, #132	@ 0x84
 8003e40:	2108      	movs	r1, #8
 8003e42:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2278      	movs	r2, #120	@ 0x78
 8003e48:	2100      	movs	r1, #0
 8003e4a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e02c      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d112      	bne.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2280      	movs	r2, #128	@ 0x80
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 f8e9 	bl	8004048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2284      	movs	r2, #132	@ 0x84
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2278      	movs	r2, #120	@ 0x78
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e00f      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	425a      	negs	r2, r3
 8003e9a:	4153      	adcs	r3, r2
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d0a4      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b004      	add	sp, #16
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b090      	sub	sp, #64	@ 0x40
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	1dbb      	adds	r3, r7, #6
 8003ec0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1dba      	adds	r2, r7, #6
 8003ecc:	2158      	movs	r1, #88	@ 0x58
 8003ece:	8812      	ldrh	r2, [r2, #0]
 8003ed0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1dba      	adds	r2, r7, #6
 8003ed6:	215a      	movs	r1, #90	@ 0x5a
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	015b      	lsls	r3, r3, #5
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d10d      	bne.n	8003f0a <UART_Start_Receive_IT+0x56>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <UART_Start_Receive_IT+0x4c>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	225c      	movs	r2, #92	@ 0x5c
 8003efa:	4950      	ldr	r1, [pc, #320]	@ (800403c <UART_Start_Receive_IT+0x188>)
 8003efc:	5299      	strh	r1, [r3, r2]
 8003efe:	e02e      	b.n	8003f5e <UART_Start_Receive_IT+0xaa>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	225c      	movs	r2, #92	@ 0x5c
 8003f04:	21ff      	movs	r1, #255	@ 0xff
 8003f06:	5299      	strh	r1, [r3, r2]
 8003f08:	e029      	b.n	8003f5e <UART_Start_Receive_IT+0xaa>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <UART_Start_Receive_IT+0x7a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <UART_Start_Receive_IT+0x70>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	225c      	movs	r2, #92	@ 0x5c
 8003f1e:	21ff      	movs	r1, #255	@ 0xff
 8003f20:	5299      	strh	r1, [r3, r2]
 8003f22:	e01c      	b.n	8003f5e <UART_Start_Receive_IT+0xaa>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	225c      	movs	r2, #92	@ 0x5c
 8003f28:	217f      	movs	r1, #127	@ 0x7f
 8003f2a:	5299      	strh	r1, [r3, r2]
 8003f2c:	e017      	b.n	8003f5e <UART_Start_Receive_IT+0xaa>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	055b      	lsls	r3, r3, #21
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d10d      	bne.n	8003f56 <UART_Start_Receive_IT+0xa2>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <UART_Start_Receive_IT+0x98>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	225c      	movs	r2, #92	@ 0x5c
 8003f46:	217f      	movs	r1, #127	@ 0x7f
 8003f48:	5299      	strh	r1, [r3, r2]
 8003f4a:	e008      	b.n	8003f5e <UART_Start_Receive_IT+0xaa>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	225c      	movs	r2, #92	@ 0x5c
 8003f50:	213f      	movs	r1, #63	@ 0x3f
 8003f52:	5299      	strh	r1, [r3, r2]
 8003f54:	e003      	b.n	8003f5e <UART_Start_Receive_IT+0xaa>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	225c      	movs	r2, #92	@ 0x5c
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2284      	movs	r2, #132	@ 0x84
 8003f62:	2100      	movs	r1, #0
 8003f64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2280      	movs	r2, #128	@ 0x80
 8003f6a:	2122      	movs	r1, #34	@ 0x22
 8003f6c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f78:	2301      	movs	r3, #1
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f96:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	f383 8810 	msr	PRIMASK, r3
}
 8003f9e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	015b      	lsls	r3, r3, #5
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <UART_Start_Receive_IT+0x108>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a22      	ldr	r2, [pc, #136]	@ (8004040 <UART_Start_Receive_IT+0x18c>)
 8003fb8:	669a      	str	r2, [r3, #104]	@ 0x68
 8003fba:	e002      	b.n	8003fc2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	@ (8004044 <UART_Start_Receive_IT+0x190>)
 8003fc0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d019      	beq.n	8003ffe <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fca:	f3ef 8310 	mrs	r3, PRIMASK
 8003fce:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fd0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	f383 8810 	msr	PRIMASK, r3
}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2190      	movs	r1, #144	@ 0x90
 8003fec:	0049      	lsls	r1, r1, #1
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	e018      	b.n	8004030 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8004002:	613b      	str	r3, [r7, #16]
  return(result);
 8004004:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f383 8810 	msr	PRIMASK, r3
}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2120      	movs	r1, #32
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f383 8810 	msr	PRIMASK, r3
}
 800402e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b010      	add	sp, #64	@ 0x40
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	000001ff 	.word	0x000001ff
 8004040:	0800434d 	.word	0x0800434d
 8004044:	08004195 	.word	0x08004195

08004048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08e      	sub	sp, #56	@ 0x38
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004050:	f3ef 8310 	mrs	r3, PRIMASK
 8004054:	617b      	str	r3, [r7, #20]
  return(result);
 8004056:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004058:	637b      	str	r3, [r7, #52]	@ 0x34
 800405a:	2301      	movs	r3, #1
 800405c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f383 8810 	msr	PRIMASK, r3
}
 8004064:	46c0      	nop			@ (mov r8, r8)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4926      	ldr	r1, [pc, #152]	@ (800410c <UART_EndRxTransfer+0xc4>)
 8004072:	400a      	ands	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f383 8810 	msr	PRIMASK, r3
}
 8004080:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004082:	f3ef 8310 	mrs	r3, PRIMASK
 8004086:	623b      	str	r3, [r7, #32]
  return(result);
 8004088:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	633b      	str	r3, [r7, #48]	@ 0x30
 800408c:	2301      	movs	r3, #1
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	f383 8810 	msr	PRIMASK, r3
}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2101      	movs	r1, #1
 80040a4:	438a      	bics	r2, r1
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d118      	bne.n	80040ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040bc:	f3ef 8310 	mrs	r3, PRIMASK
 80040c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80040c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c6:	2301      	movs	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f383 8810 	msr	PRIMASK, r3
}
 80040d0:	46c0      	nop			@ (mov r8, r8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2110      	movs	r1, #16
 80040de:	438a      	bics	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f383 8810 	msr	PRIMASK, r3
}
 80040ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2280      	movs	r2, #128	@ 0x80
 80040f2:	2120      	movs	r1, #32
 80040f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	b00e      	add	sp, #56	@ 0x38
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	fffffedf 	.word	0xfffffedf

08004110 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	225a      	movs	r2, #90	@ 0x5a
 8004122:	2100      	movs	r1, #0
 8004124:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2252      	movs	r2, #82	@ 0x52
 800412a:	2100      	movs	r1, #0
 800412c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff fba5 	bl	8003880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b004      	add	sp, #16
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004146:	f3ef 8310 	mrs	r3, PRIMASK
 800414a:	60bb      	str	r3, [r7, #8]
  return(result);
 800414c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	2301      	movs	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2140      	movs	r1, #64	@ 0x40
 8004168:	438a      	bics	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	0018      	movs	r0, r3
 8004188:	f7ff fb72 	bl	8003870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800418c:	46c0      	nop			@ (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b006      	add	sp, #24
 8004192:	bd80      	pop	{r7, pc}

08004194 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b094      	sub	sp, #80	@ 0x50
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800419c:	204e      	movs	r0, #78	@ 0x4e
 800419e:	183b      	adds	r3, r7, r0
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	215c      	movs	r1, #92	@ 0x5c
 80041a4:	5a52      	ldrh	r2, [r2, r1]
 80041a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	589b      	ldr	r3, [r3, r2]
 80041ae:	2b22      	cmp	r3, #34	@ 0x22
 80041b0:	d000      	beq.n	80041b4 <UART_RxISR_8BIT+0x20>
 80041b2:	e0ba      	b.n	800432a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	214c      	movs	r1, #76	@ 0x4c
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80041be:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	183b      	adds	r3, r7, r0
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b2d9      	uxtb	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	400a      	ands	r2, r1
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	225a      	movs	r2, #90	@ 0x5a
 80041e4:	5a9b      	ldrh	r3, [r3, r2]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b299      	uxth	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	225a      	movs	r2, #90	@ 0x5a
 80041f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	225a      	movs	r2, #90	@ 0x5a
 80041f6:	5a9b      	ldrh	r3, [r3, r2]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d000      	beq.n	8004200 <UART_RxISR_8BIT+0x6c>
 80041fe:	e09c      	b.n	800433a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004200:	f3ef 8310 	mrs	r3, PRIMASK
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800420a:	2301      	movs	r3, #1
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004210:	f383 8810 	msr	PRIMASK, r3
}
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4948      	ldr	r1, [pc, #288]	@ (8004344 <UART_RxISR_8BIT+0x1b0>)
 8004222:	400a      	ands	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422c:	f383 8810 	msr	PRIMASK, r3
}
 8004230:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004232:	f3ef 8310 	mrs	r3, PRIMASK
 8004236:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	647b      	str	r3, [r7, #68]	@ 0x44
 800423c:	2301      	movs	r3, #1
 800423e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2101      	movs	r1, #1
 8004254:	438a      	bics	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	f383 8810 	msr	PRIMASK, r3
}
 8004262:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2280      	movs	r2, #128	@ 0x80
 8004268:	2120      	movs	r1, #32
 800426a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	2380      	movs	r3, #128	@ 0x80
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	4013      	ands	r3, r2
 8004284:	d018      	beq.n	80042b8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004286:	f3ef 8310 	mrs	r3, PRIMASK
 800428a:	61bb      	str	r3, [r7, #24]
  return(result);
 800428c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800428e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004290:	2301      	movs	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f383 8810 	msr	PRIMASK, r3
}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4928      	ldr	r1, [pc, #160]	@ (8004348 <UART_RxISR_8BIT+0x1b4>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f383 8810 	msr	PRIMASK, r3
}
 80042b6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d12f      	bne.n	8004320 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80042cc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d0:	2301      	movs	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f383 8810 	msr	PRIMASK, r3
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2110      	movs	r1, #16
 80042e8:	438a      	bics	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f383 8810 	msr	PRIMASK, r3
}
 80042f6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	2210      	movs	r2, #16
 8004300:	4013      	ands	r3, r2
 8004302:	2b10      	cmp	r3, #16
 8004304:	d103      	bne.n	800430e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2210      	movs	r2, #16
 800430c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2258      	movs	r2, #88	@ 0x58
 8004312:	5a9a      	ldrh	r2, [r3, r2]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0011      	movs	r1, r2
 8004318:	0018      	movs	r0, r3
 800431a:	f7ff fab9 	bl	8003890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800431e:	e00c      	b.n	800433a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f7fb ff7c 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8004328:	e007      	b.n	800433a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2108      	movs	r1, #8
 8004336:	430a      	orrs	r2, r1
 8004338:	619a      	str	r2, [r3, #24]
}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b014      	add	sp, #80	@ 0x50
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	fffffedf 	.word	0xfffffedf
 8004348:	fbffffff 	.word	0xfbffffff

0800434c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b094      	sub	sp, #80	@ 0x50
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004354:	204e      	movs	r0, #78	@ 0x4e
 8004356:	183b      	adds	r3, r7, r0
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	215c      	movs	r1, #92	@ 0x5c
 800435c:	5a52      	ldrh	r2, [r2, r1]
 800435e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	589b      	ldr	r3, [r3, r2]
 8004366:	2b22      	cmp	r3, #34	@ 0x22
 8004368:	d000      	beq.n	800436c <UART_RxISR_16BIT+0x20>
 800436a:	e0ba      	b.n	80044e2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	214c      	movs	r1, #76	@ 0x4c
 8004372:	187b      	adds	r3, r7, r1
 8004374:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004376:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800437e:	187b      	adds	r3, r7, r1
 8004380:	183a      	adds	r2, r7, r0
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	8812      	ldrh	r2, [r2, #0]
 8004386:	4013      	ands	r3, r2
 8004388:	b29a      	uxth	r2, r3
 800438a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800438c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004392:	1c9a      	adds	r2, r3, #2
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	225a      	movs	r2, #90	@ 0x5a
 800439c:	5a9b      	ldrh	r3, [r3, r2]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b299      	uxth	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	225a      	movs	r2, #90	@ 0x5a
 80043a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	225a      	movs	r2, #90	@ 0x5a
 80043ae:	5a9b      	ldrh	r3, [r3, r2]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d000      	beq.n	80043b8 <UART_RxISR_16BIT+0x6c>
 80043b6:	e09c      	b.n	80044f2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b8:	f3ef 8310 	mrs	r3, PRIMASK
 80043bc:	623b      	str	r3, [r7, #32]
  return(result);
 80043be:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c2:	2301      	movs	r3, #1
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	f383 8810 	msr	PRIMASK, r3
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4948      	ldr	r1, [pc, #288]	@ (80044fc <UART_RxISR_16BIT+0x1b0>)
 80043da:	400a      	ands	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	f383 8810 	msr	PRIMASK, r3
}
 80043e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ea:	f3ef 8310 	mrs	r3, PRIMASK
 80043ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f4:	2301      	movs	r3, #1
 80043f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	f383 8810 	msr	PRIMASK, r3
}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2101      	movs	r1, #1
 800440c:	438a      	bics	r2, r1
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004416:	f383 8810 	msr	PRIMASK, r3
}
 800441a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	2120      	movs	r1, #32
 8004422:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	4013      	ands	r3, r2
 800443c:	d018      	beq.n	8004470 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443e:	f3ef 8310 	mrs	r3, PRIMASK
 8004442:	617b      	str	r3, [r7, #20]
  return(result);
 8004444:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004448:	2301      	movs	r3, #1
 800444a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f383 8810 	msr	PRIMASK, r3
}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4928      	ldr	r1, [pc, #160]	@ (8004500 <UART_RxISR_16BIT+0x1b4>)
 8004460:	400a      	ands	r2, r1
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f383 8810 	msr	PRIMASK, r3
}
 800446e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004474:	2b01      	cmp	r3, #1
 8004476:	d12f      	bne.n	80044d8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447e:	f3ef 8310 	mrs	r3, PRIMASK
 8004482:	60bb      	str	r3, [r7, #8]
  return(result);
 8004484:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004486:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004488:	2301      	movs	r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f383 8810 	msr	PRIMASK, r3
}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2110      	movs	r1, #16
 80044a0:	438a      	bics	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f383 8810 	msr	PRIMASK, r3
}
 80044ae:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2210      	movs	r2, #16
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d103      	bne.n	80044c6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2210      	movs	r2, #16
 80044c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2258      	movs	r2, #88	@ 0x58
 80044ca:	5a9a      	ldrh	r2, [r3, r2]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	0011      	movs	r1, r2
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7ff f9dd 	bl	8003890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044d6:	e00c      	b.n	80044f2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	0018      	movs	r0, r3
 80044dc:	f7fb fea0 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 80044e0:	e007      	b.n	80044f2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2108      	movs	r1, #8
 80044ee:	430a      	orrs	r2, r1
 80044f0:	619a      	str	r2, [r3, #24]
}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b014      	add	sp, #80	@ 0x50
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	fffffedf 	.word	0xfffffedf
 8004500:	fbffffff 	.word	0xfbffffff

08004504 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800450c:	46c0      	nop			@ (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	b002      	add	sp, #8
 8004512:	bd80      	pop	{r7, pc}

08004514 <memset>:
 8004514:	0003      	movs	r3, r0
 8004516:	1882      	adds	r2, r0, r2
 8004518:	4293      	cmp	r3, r2
 800451a:	d100      	bne.n	800451e <memset+0xa>
 800451c:	4770      	bx	lr
 800451e:	7019      	strb	r1, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	e7f9      	b.n	8004518 <memset+0x4>

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	2600      	movs	r6, #0
 8004528:	4c0c      	ldr	r4, [pc, #48]	@ (800455c <__libc_init_array+0x38>)
 800452a:	4d0d      	ldr	r5, [pc, #52]	@ (8004560 <__libc_init_array+0x3c>)
 800452c:	1b64      	subs	r4, r4, r5
 800452e:	10a4      	asrs	r4, r4, #2
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	2600      	movs	r6, #0
 8004536:	f000 f819 	bl	800456c <_init>
 800453a:	4c0a      	ldr	r4, [pc, #40]	@ (8004564 <__libc_init_array+0x40>)
 800453c:	4d0a      	ldr	r5, [pc, #40]	@ (8004568 <__libc_init_array+0x44>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	00b3      	lsls	r3, r6, #2
 800454a:	58eb      	ldr	r3, [r5, r3]
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	00b3      	lsls	r3, r6, #2
 8004554:	58eb      	ldr	r3, [r5, r3]
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	080045bc 	.word	0x080045bc
 8004560:	080045bc 	.word	0x080045bc
 8004564:	080045c0 	.word	0x080045c0
 8004568:	080045bc 	.word	0x080045bc

0800456c <_init>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr

08004578 <_fini>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr
